
NUCLEO_L4R5ZI_UARTTestingTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800437c  0800437c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004384  08004384  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800438c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  2000000c  08004398  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08004398  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de31  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217b  00000000  00000000  0002de6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00030cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029aff  00000000  00000000  000318a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d998  00000000  00000000  0005b39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff9d3  00000000  00000000  00068d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016870a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  0016875c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080042c0 	.word	0x080042c0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080042c0 	.word	0x080042c0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b09a      	sub	sp, #104	; 0x68
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t UART1_rxBuffer[100] = {0};
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	2260      	movs	r2, #96	; 0x60
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f003 fecc 	bl	80042b0 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc49 	bl	8000dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82e 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f9ba 	bl	8000898 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f8aa 	bl	800067c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 f940 	bl	80007ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052c:	f000 f98a 	bl	8000844 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000530:	f000 f8f0 	bl	8000714 <MX_UART5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  strcpy((char*)UART1_rxBuffer, "Message transmitting at 230400 baud from device 2\r\n");
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <main+0x70>)
 8000538:	461c      	mov	r4, r3
 800053a:	4615      	mov	r5, r2
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	682b      	ldr	r3, [r5, #0]
 800054a:	6023      	str	r3, [r4, #0]
	  HAL_UART_Transmit(&huart5, UART1_rxBuffer, 100, HAL_MAX_DELAY);
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	2264      	movs	r2, #100	; 0x64
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <main+0x74>)
 8000556:	f002 fdd9 	bl	800310c <HAL_UART_Transmit>

	  //flash red led to indicate its running
	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <main+0x78>)
 8000560:	f000 ff4e 	bl	8001400 <HAL_GPIO_TogglePin>
	  	HAL_Delay(1000);
 8000564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000568:	f000 fc96 	bl	8000e98 <HAL_Delay>
	  strcpy((char*)UART1_rxBuffer, "Message transmitting at 230400 baud from device 2\r\n");
 800056c:	e7e2      	b.n	8000534 <main+0x34>
 800056e:	bf00      	nop
 8000570:	080042d8 	.word	0x080042d8
 8000574:	200000b4 	.word	0x200000b4
 8000578:	48000400 	.word	0x48000400

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0bc      	sub	sp, #240	; 0xf0
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f003 fe90 	bl	80042b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2294      	movs	r2, #148	; 0x94
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fe82 	bl	80042b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005ac:	2000      	movs	r0, #0
 80005ae:	f001 f8a9 	bl	8001704 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80005b8:	f000 fa12 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005bc:	2322      	movs	r3, #34	; 0x22
 80005be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ca:	2301      	movs	r3, #1
 80005cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005e8:	231e      	movs	r3, #30
 80005ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f941 	bl	800188c <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000610:	f000 f9e6 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000638:	2105      	movs	r1, #5
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fd4c 	bl	80020d8 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000646:	f000 f9cb 	bl	80009e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5
 800064a:	f242 0334 	movw	r3, #8244	; 0x2034
 800064e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000650:	2300      	movs	r3, #0
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000654:	2300      	movs	r3, #0
 8000656:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000658:	2300      	movs	r3, #0
 800065a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800065c:	2300      	movs	r3, #0
 800065e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f001 ffea 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800066e:	f000 f9b7 	bl	80009e0 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	37f0      	adds	r7, #240	; 0xf0
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000682:	4a23      	ldr	r2, [pc, #140]	; (8000710 <MX_LPUART1_UART_Init+0x94>)
 8000684:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000688:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800068c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006c6:	f002 fcd1 	bl	800306c <HAL_UART_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006d0:	f000 f986 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d4:	2100      	movs	r1, #0
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006d8:	f003 fa55 	bl	8003b86 <HAL_UARTEx_SetTxFifoThreshold>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006e2:	f000 f97d 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4808      	ldr	r0, [pc, #32]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006ea:	f003 fa8a 	bl	8003c02 <HAL_UARTEx_SetRxFifoThreshold>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006f4:	f000 f974 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006fa:	f003 fa0b 	bl	8003b14 <HAL_UARTEx_DisableFifoMode>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000704:	f000 f96c 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000028 	.word	0x20000028
 8000710:	40008000 	.word	0x40008000

08000714 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_UART5_Init+0x90>)
 800071a:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <MX_UART5_Init+0x94>)
 800071c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_UART5_Init+0x90>)
 8000720:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000724:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_UART5_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_UART5_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_UART5_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_UART5_Init+0x90>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_UART5_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_UART5_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_UART5_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_UART5_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_UART5_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800075c:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_UART5_Init+0x90>)
 800075e:	f002 fc85 	bl	800306c <HAL_UART_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000768:	f000 f93a 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_UART5_Init+0x90>)
 8000770:	f003 fa09 	bl	8003b86 <HAL_UARTEx_SetTxFifoThreshold>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800077a:	f000 f931 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_UART5_Init+0x90>)
 8000782:	f003 fa3e 	bl	8003c02 <HAL_UARTEx_SetRxFifoThreshold>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800078c:	f000 f928 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_UART5_Init+0x90>)
 8000792:	f003 f9bf 	bl	8003b14 <HAL_UARTEx_DisableFifoMode>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800079c:	f000 f920 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000b4 	.word	0x200000b4
 80007a8:	40005000 	.word	0x40005000

080007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_USART3_UART_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007f6:	f002 fc39 	bl	800306c <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 f8ee 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_USART3_UART_Init+0x90>)
 8000808:	f003 f9bd 	bl	8003b86 <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f8e5 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_USART3_UART_Init+0x90>)
 800081a:	f003 f9f2 	bl	8003c02 <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f8dc 	bl	80009e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_USART3_UART_Init+0x90>)
 800082a:	f003 f973 	bl	8003b14 <HAL_UARTEx_DisableFifoMode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f8d4 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000140 	.word	0x20000140
 8000840:	40004800 	.word	0x40004800

08000844 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800084a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800084e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000852:	2206      	movs	r2, #6
 8000854:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000858:	2202      	movs	r2, #2
 800085a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000870:	2201      	movs	r2, #1
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800087c:	2201      	movs	r2, #1
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000882:	f000 fdd7 	bl	8001434 <HAL_PCD_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 f8a8 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001cc 	.word	0x200001cc

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b47      	ldr	r3, [pc, #284]	; (80009cc <MX_GPIO_Init+0x134>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a46      	ldr	r2, [pc, #280]	; (80009cc <MX_GPIO_Init+0x134>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b44      	ldr	r3, [pc, #272]	; (80009cc <MX_GPIO_Init+0x134>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	4b41      	ldr	r3, [pc, #260]	; (80009cc <MX_GPIO_Init+0x134>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a40      	ldr	r2, [pc, #256]	; (80009cc <MX_GPIO_Init+0x134>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <MX_GPIO_Init+0x134>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <MX_GPIO_Init+0x134>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a3a      	ldr	r2, [pc, #232]	; (80009cc <MX_GPIO_Init+0x134>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b38      	ldr	r3, [pc, #224]	; (80009cc <MX_GPIO_Init+0x134>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <MX_GPIO_Init+0x134>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a34      	ldr	r2, [pc, #208]	; (80009cc <MX_GPIO_Init+0x134>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <MX_GPIO_Init+0x134>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <MX_GPIO_Init+0x134>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a2e      	ldr	r2, [pc, #184]	; (80009cc <MX_GPIO_Init+0x134>)
 8000914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <MX_GPIO_Init+0x134>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000926:	f000 ffa1 	bl	800186c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_GPIO_Init+0x134>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a27      	ldr	r2, [pc, #156]	; (80009cc <MX_GPIO_Init+0x134>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_GPIO_Init+0x134>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000948:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x138>)
 800094a:	f000 fd41 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	4820      	ldr	r0, [pc, #128]	; (80009d4 <MX_GPIO_Init+0x13c>)
 8000954:	f000 fd3c 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_GPIO_Init+0x140>)
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	481b      	ldr	r0, [pc, #108]	; (80009dc <MX_GPIO_Init+0x144>)
 800096e:	f000 fb9d 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000972:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4811      	ldr	r0, [pc, #68]	; (80009d0 <MX_GPIO_Init+0x138>)
 800098c:	f000 fb8e 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000990:	2320      	movs	r3, #32
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	480b      	ldr	r0, [pc, #44]	; (80009d4 <MX_GPIO_Init+0x13c>)
 80009a8:	f000 fb80 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ac:	2340      	movs	r3, #64	; 0x40
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_GPIO_Init+0x13c>)
 80009c0:	f000 fb74 	bl	80010ac <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000400 	.word	0x48000400
 80009d4:	48001800 	.word	0x48001800
 80009d8:	10110000 	.word	0x10110000
 80009dc:	48000800 	.word	0x48000800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_MspInit+0x44>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_MspInit+0x44>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6613      	str	r3, [r2, #96]	; 0x60
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_MspInit+0x44>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x44>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x44>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6593      	str	r3, [r2, #88]	; 0x58
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x44>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a55      	ldr	r2, [pc, #340]	; (8000ba8 <HAL_UART_MspInit+0x174>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12b      	bne.n	8000aae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a56:	4b55      	ldr	r3, [pc, #340]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5a:	4a54      	ldr	r2, [pc, #336]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a62:	4b52      	ldr	r3, [pc, #328]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
 8000a6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a4e      	ldr	r2, [pc, #312]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8000a86:	f000 fef1 	bl	800186c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000a8a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4842      	ldr	r0, [pc, #264]	; (8000bb0 <HAL_UART_MspInit+0x17c>)
 8000aa8:	f000 fb00 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aac:	e078      	b.n	8000ba0 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==UART5)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <HAL_UART_MspInit+0x180>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d145      	bne.n	8000b44 <HAL_UART_MspInit+0x110>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abc:	4a3b      	ldr	r2, [pc, #236]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac4:	4b39      	ldr	r3, [pc, #228]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b36      	ldr	r3, [pc, #216]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a35      	ldr	r2, [pc, #212]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b33      	ldr	r3, [pc, #204]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000aee:	f043 0308 	orr.w	r3, r3, #8
 8000af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af4:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	f003 0308 	and.w	r3, r3, #8
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b12:	2308      	movs	r3, #8
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <HAL_UART_MspInit+0x184>)
 8000b1e:	f000 fac5 	bl	80010ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b22:	2304      	movs	r3, #4
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b32:	2308      	movs	r3, #8
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481f      	ldr	r0, [pc, #124]	; (8000bbc <HAL_UART_MspInit+0x188>)
 8000b3e:	f000 fab5 	bl	80010ac <HAL_GPIO_Init>
}
 8000b42:	e02d      	b.n	8000ba0 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART3)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <HAL_UART_MspInit+0x18c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d128      	bne.n	8000ba0 <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b58:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_MspInit+0x178>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b90:	2307      	movs	r3, #7
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4808      	ldr	r0, [pc, #32]	; (8000bbc <HAL_UART_MspInit+0x188>)
 8000b9c:	f000 fa86 	bl	80010ac <HAL_GPIO_Init>
}
 8000ba0:	bf00      	nop
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40008000 	.word	0x40008000
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	48001800 	.word	0x48001800
 8000bb4:	40005000 	.word	0x40005000
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	40004800 	.word	0x40004800

08000bc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000be4:	d154      	bne.n	8000c90 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a2b      	ldr	r2, [pc, #172]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c10:	230a      	movs	r3, #10
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 fa45 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f000 fa37 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d114      	bne.n	8000c8c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000c7a:	f000 fde7 	bl	800184c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <HAL_PCD_MspInit+0xd4>)
 8000c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c8a:	e001      	b.n	8000c90 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000c8c:	f000 fdde 	bl	800184c <HAL_PWREx_EnableVddUSB>
}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8b6 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <SystemInit+0x64>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <SystemInit+0x64>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <SystemInit+0x68>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <SystemInit+0x68>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <SystemInit+0x68>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <SystemInit+0x68>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <SystemInit+0x68>)
 8000d1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <SystemInit+0x68>)
 8000d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <SystemInit+0x68>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <SystemInit+0x68>)
 8000d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <SystemInit+0x68>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SystemInit+0x64>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d46:	609a      	str	r2, [r3, #8]
#endif
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00
 8000d58:	40021000 	.word	0x40021000

08000d5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d60:	f7ff ffc6 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d66:	e003      	b.n	8000d70 <LoopCopyDataInit>

08000d68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d6e:	3104      	adds	r1, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d70:	480a      	ldr	r0, [pc, #40]	; (8000d9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d78:	d3f6      	bcc.n	8000d68 <CopyDataInit>
	ldr	r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d7c:	e002      	b.n	8000d84 <LoopFillZerobss>

08000d7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d80:	f842 3b04 	str.w	r3, [r2], #4

08000d84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <LoopForever+0x16>)
	cmp	r2, r3
 8000d86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d88:	d3f9      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f003 fa6d 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d8e:	f7ff fbb7 	bl	8000500 <main>

08000d92 <LoopForever>:

LoopForever:
    b LoopForever
 8000d92:	e7fe      	b.n	8000d92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d94:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000d98:	0800438c 	.word	0x0800438c
	ldr	r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000da0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000da4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000da8:	200005d8 	.word	0x200005d8

08000dac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_IRQHandler>

08000dae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f943 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f80e 	bl	8000de0 <HAL_InitTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	e001      	b.n	8000dd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd0:	f7ff fe0c 	bl	80009ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_InitTick+0x6c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d023      	beq.n	8000e3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_InitTick+0x70>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_InitTick+0x6c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f941 	bl	8001092 <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10f      	bne.n	8000e36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d809      	bhi.n	8000e30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f919 	bl	800105a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_InitTick+0x74>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e007      	b.n	8000e40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e004      	b.n	8000e40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e001      	b.n	8000e40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	200005d4 	.word	0x200005d4

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200005d4 	.word	0x200005d4

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff ff8e 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff47 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff5c 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff8e 	bl	8000f98 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffb0 	bl	8001000 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	e166      	b.n	800138a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8158 	beq.w	8001384 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d00b      	beq.n	80010f4 <HAL_GPIO_Init+0x48>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d007      	beq.n	80010f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e8:	2b11      	cmp	r3, #17
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b12      	cmp	r3, #18
 80010f2:	d130      	bne.n	8001156 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112a:	2201      	movs	r2, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 0201 	and.w	r2, r3, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0xea>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b12      	cmp	r3, #18
 8001194:	d123      	bne.n	80011de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	6939      	ldr	r1, [r7, #16]
 80011da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0203 	and.w	r2, r3, #3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80b2 	beq.w	8001384 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001220:	4b61      	ldr	r3, [pc, #388]	; (80013a8 <HAL_GPIO_Init+0x2fc>)
 8001222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001224:	4a60      	ldr	r2, [pc, #384]	; (80013a8 <HAL_GPIO_Init+0x2fc>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6613      	str	r3, [r2, #96]	; 0x60
 800122c:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <HAL_GPIO_Init+0x2fc>)
 800122e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001238:	4a5c      	ldr	r2, [pc, #368]	; (80013ac <HAL_GPIO_Init+0x300>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001262:	d02b      	beq.n	80012bc <HAL_GPIO_Init+0x210>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d025      	beq.n	80012b8 <HAL_GPIO_Init+0x20c>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a51      	ldr	r2, [pc, #324]	; (80013b4 <HAL_GPIO_Init+0x308>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d01f      	beq.n	80012b4 <HAL_GPIO_Init+0x208>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a50      	ldr	r2, [pc, #320]	; (80013b8 <HAL_GPIO_Init+0x30c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d019      	beq.n	80012b0 <HAL_GPIO_Init+0x204>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a4f      	ldr	r2, [pc, #316]	; (80013bc <HAL_GPIO_Init+0x310>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d013      	beq.n	80012ac <HAL_GPIO_Init+0x200>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a4e      	ldr	r2, [pc, #312]	; (80013c0 <HAL_GPIO_Init+0x314>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00d      	beq.n	80012a8 <HAL_GPIO_Init+0x1fc>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a4d      	ldr	r2, [pc, #308]	; (80013c4 <HAL_GPIO_Init+0x318>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0x1f8>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_GPIO_Init+0x31c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_GPIO_Init+0x1f4>
 800129c:	2307      	movs	r3, #7
 800129e:	e00e      	b.n	80012be <HAL_GPIO_Init+0x212>
 80012a0:	2308      	movs	r3, #8
 80012a2:	e00c      	b.n	80012be <HAL_GPIO_Init+0x212>
 80012a4:	2306      	movs	r3, #6
 80012a6:	e00a      	b.n	80012be <HAL_GPIO_Init+0x212>
 80012a8:	2305      	movs	r3, #5
 80012aa:	e008      	b.n	80012be <HAL_GPIO_Init+0x212>
 80012ac:	2304      	movs	r3, #4
 80012ae:	e006      	b.n	80012be <HAL_GPIO_Init+0x212>
 80012b0:	2303      	movs	r3, #3
 80012b2:	e004      	b.n	80012be <HAL_GPIO_Init+0x212>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e002      	b.n	80012be <HAL_GPIO_Init+0x212>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_GPIO_Init+0x212>
 80012bc:	2300      	movs	r3, #0
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	f002 0203 	and.w	r2, r2, #3
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	4093      	lsls	r3, r2
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ce:	4937      	ldr	r1, [pc, #220]	; (80013ac <HAL_GPIO_Init+0x300>)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_GPIO_Init+0x320>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001300:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_GPIO_Init+0x320>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_GPIO_Init+0x320>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800132a:	4a28      	ldr	r2, [pc, #160]	; (80013cc <HAL_GPIO_Init+0x320>)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_GPIO_Init+0x320>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_GPIO_Init+0x320>)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_GPIO_Init+0x320>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137e:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_GPIO_Init+0x320>)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	f47f ae91 	bne.w	80010bc <HAL_GPIO_Init+0x10>
  }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48000800 	.word	0x48000800
 80013b8:	48000c00 	.word	0x48000c00
 80013bc:	48001000 	.word	0x48001000
 80013c0:	48001400 	.word	0x48001400
 80013c4:	48001800 	.word	0x48001800
 80013c8:	48001c00 	.word	0x48001c00
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43d9      	mvns	r1, r3
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	400b      	ands	r3, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	b08f      	sub	sp, #60	; 0x3c
 8001438:	af0a      	add	r7, sp, #40	; 0x28
 800143a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e116      	b.n	8001674 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d106      	bne.n	8001466 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fbaf 	bl	8000bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fcb1 	bl	8003dec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	687e      	ldr	r6, [r7, #4]
 8001492:	466d      	mov	r5, sp
 8001494:	f106 0410 	add.w	r4, r6, #16
 8001498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014a8:	1d33      	adds	r3, r6, #4
 80014aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ac:	6838      	ldr	r0, [r7, #0]
 80014ae:	f002 fc4b 	bl	8003d48 <USB_CoreInit>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0d7      	b.n	8001674 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fc9f 	bl	8003e0e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e04a      	b.n	800156c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	333d      	adds	r3, #61	; 0x3d
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	333c      	adds	r3, #60	; 0x3c
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	b298      	uxth	r0, r3
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3342      	adds	r3, #66	; 0x42
 8001512:	4602      	mov	r2, r0
 8001514:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	333f      	adds	r3, #63	; 0x3f
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3344      	adds	r3, #68	; 0x44
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3348      	adds	r3, #72	; 0x48
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3350      	adds	r3, #80	; 0x50
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	3301      	adds	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3af      	bcc.n	80014d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e044      	b.n	8001606 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	1a9b      	subs	r3, r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3301      	adds	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d3b5      	bcc.n	800157c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	687e      	ldr	r6, [r7, #4]
 8001618:	466d      	mov	r5, sp
 800161a:	f106 0410 	add.w	r4, r6, #16
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800162a:	e885 0003 	stmia.w	r5, {r0, r1}
 800162e:	1d33      	adds	r3, r6, #4
 8001630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	f002 fc16 	bl	8003e64 <USB_DevInit>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2202      	movs	r2, #2
 8001642:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e014      	b.n	8001674 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f80a 	bl	800167c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f002 fda6 	bl	80041be <USB_DevDisconnect>

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800167c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	f043 0303 	orr.w	r3, r3, #3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d4:	d102      	bne.n	80016dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80016d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016da:	e00b      	b.n	80016f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ea:	d102      	bne.n	80016f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80016ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f0:	e000      	b.n	80016f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80016f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40007000 	.word	0x40007000

08001704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d141      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001712:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171e:	d131      	bne.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001720:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001726:	4a46      	ldr	r2, [pc, #280]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001738:	4a41      	ldr	r2, [pc, #260]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001740:	4b40      	ldr	r3, [pc, #256]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2232      	movs	r2, #50	; 0x32
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a3f      	ldr	r2, [pc, #252]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	3301      	adds	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001756:	e002      	b.n	800175e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3b01      	subs	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800175e:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176a:	d102      	bne.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f2      	bne.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177e:	d158      	bne.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e057      	b.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800178a:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001794:	e04d      	b.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179c:	d141      	bne.n	8001822 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d131      	bne.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017ac:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017c4:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2232      	movs	r2, #50	; 0x32
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	0c9b      	lsrs	r3, r3, #18
 80017de:	3301      	adds	r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e2:	e002      	b.n	80017ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f6:	d102      	bne.n	80017fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f2      	bne.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180a:	d112      	bne.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e011      	b.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001820:	e007      	b.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001830:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40007000 	.word	0x40007000
 8001844:	20000000 	.word	0x20000000
 8001848:	431bde83 	.word	0x431bde83

0800184c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185a:	6053      	str	r3, [r2, #4]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40007000 	.word	0x40007000

0800186c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6053      	str	r3, [r2, #4]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40007000 	.word	0x40007000

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	f000 bc16 	b.w	80020cc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a0:	4b96      	ldr	r3, [pc, #600]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018aa:	4b94      	ldr	r3, [pc, #592]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80e4 	beq.w	8001a8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4c>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	f040 808b 	bne.w	80019e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	f040 8087 	bne.w	80019e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d8:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x64>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e3ed      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1a      	ldr	r2, [r3, #32]
 80018f4:	4b81      	ldr	r3, [pc, #516]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <HAL_RCC_OscConfig+0x7e>
 8001900:	4b7e      	ldr	r3, [pc, #504]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001908:	e005      	b.n	8001916 <HAL_RCC_OscConfig+0x8a>
 800190a:	4b7c      	ldr	r3, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 800190c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001916:	4293      	cmp	r3, r2
 8001918:	d223      	bcs.n	8001962 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fdca 	bl	80024b8 <RCC_SetFlashLatencyFromMSIRange>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e3ce      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192e:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a72      	ldr	r2, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	496d      	ldr	r1, [pc, #436]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194c:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	4968      	ldr	r1, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
 8001960:	e025      	b.n	80019ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001962:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a65      	ldr	r2, [pc, #404]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4960      	ldr	r1, [pc, #384]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001980:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	495b      	ldr	r1, [pc, #364]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fd8a 	bl	80024b8 <RCC_SetFlashLatencyFromMSIRange>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e38e      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ae:	f000 fcbf 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b51      	ldr	r3, [pc, #324]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	4950      	ldr	r1, [pc, #320]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 80019c0:	5ccb      	ldrb	r3, [r1, r3]
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a4e      	ldr	r2, [pc, #312]	; (8001b04 <HAL_RCC_OscConfig+0x278>)
 80019cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019ce:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fa04 	bl	8000de0 <HAL_InitTick>
 80019d8:	4603      	mov	r3, r0
 80019da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d052      	beq.n	8001a88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	e372      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d032      	beq.n	8001a54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a42      	ldr	r2, [pc, #264]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa41 	bl	8000e80 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a02:	f7ff fa3d 	bl	8000e80 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e35b      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a35      	ldr	r2, [pc, #212]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4930      	ldr	r1, [pc, #192]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	492b      	ldr	r1, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
 8001a52:	e01a      	b.n	8001a8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fa0e 	bl	8000e80 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a68:	f7ff fa0a 	bl	8000e80 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e328      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1dc>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d073      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x21c>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d10b      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d063      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d15f      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e305      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac8:	d106      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x24c>
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e025      	b.n	8001b24 <HAL_RCC_OscConfig+0x298>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae0:	d114      	bne.n	8001b0c <HAL_RCC_OscConfig+0x280>
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a02      	ldr	r2, [pc, #8]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e013      	b.n	8001b24 <HAL_RCC_OscConfig+0x298>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	0800431c 	.word	0x0800431c
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	4ba0      	ldr	r3, [pc, #640]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a9f      	ldr	r2, [pc, #636]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b9d      	ldr	r3, [pc, #628]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a9c      	ldr	r2, [pc, #624]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f9a8 	bl	8000e80 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f9a4 	bl	8000e80 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e2c2      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x2a8>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f994 	bl	8000e80 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f990 	bl	8000e80 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e2ae      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2d0>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d060      	beq.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_OscConfig+0x310>
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d119      	bne.n	8001bca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d116      	bne.n	8001bca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x328>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e28b      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	061b      	lsls	r3, r3, #24
 8001bc2:	4973      	ldr	r1, [pc, #460]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc8:	e040      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d023      	beq.n	8001c1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f94f 	bl	8000e80 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff f94b 	bl	8000e80 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e269      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf8:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	495f      	ldr	r1, [pc, #380]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e018      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5c      	ldr	r2, [pc, #368]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f92b 	bl	8000e80 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f927 	bl	8000e80 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e245      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d03c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01c      	beq.n	8001c9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f906 	bl	8000e80 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff f902 	bl	8000e80 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e220      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ef      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3ec>
 8001c98:	e01b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca0:	4a3b      	ldr	r2, [pc, #236]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f8e9 	bl	8000e80 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f8e5 	bl	8000e80 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e203      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ef      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80a6 	beq.w	8001e2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	4a26      	ldr	r2, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x508>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d118      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_OscConfig+0x508>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_RCC_OscConfig+0x508>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d24:	f7ff f8ac 	bl	8000e80 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7ff f8a8 	bl	8000e80 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1c6      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_RCC_OscConfig+0x508>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d108      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4d8>
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d62:	e029      	b.n	8001db8 <HAL_RCC_OscConfig+0x52c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d115      	bne.n	8001d98 <HAL_RCC_OscConfig+0x50c>
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_RCC_OscConfig+0x504>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8c:	e014      	b.n	8001db8 <HAL_RCC_OscConfig+0x52c>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
 8001d98:	4b9d      	ldr	r3, [pc, #628]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9e:	4a9c      	ldr	r2, [pc, #624]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da8:	4b99      	ldr	r3, [pc, #612]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	4a98      	ldr	r2, [pc, #608]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d016      	beq.n	8001dee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f85e 	bl	8000e80 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f85a 	bl	8000e80 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e176      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dde:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ed      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x53c>
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff f847 	bl	8000e80 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff f843 	bl	8000e80 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e15f      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e0c:	4b80      	ldr	r3, [pc, #512]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1ed      	bne.n	8001df6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e20:	4b7b      	ldr	r3, [pc, #492]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a7a      	ldr	r2, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e40:	4b73      	ldr	r3, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e46:	4a72      	ldr	r2, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff f816 	bl	8000e80 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e58:	f7ff f812 	bl	8000e80 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e130      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e6a:	4b69      	ldr	r3, [pc, #420]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ef      	beq.n	8001e58 <HAL_RCC_OscConfig+0x5cc>
 8001e78:	e01b      	b.n	8001eb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e80:	4a63      	ldr	r2, [pc, #396]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7fe fff9 	bl	8000e80 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e92:	f7fe fff5 	bl	8000e80 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e113      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ea4:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ef      	bne.n	8001e92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8107 	beq.w	80020ca <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	f040 80cf 	bne.w	8002064 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ec6:	4b52      	ldr	r3, [pc, #328]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d12c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d123      	bne.n	8001f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d11b      	bne.n	8001f34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d113      	bne.n	8001f34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d109      	bne.n	8001f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d071      	beq.n	8002018 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d068      	beq.n	800200c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f46:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0ba      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f56:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2d      	ldr	r2, [pc, #180]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f62:	f7fe ff8d 	bl	8000e80 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7fe ff89 	bl	8000e80 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0a7      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x788>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f98:	3a01      	subs	r2, #1
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fa2:	0212      	lsls	r2, r2, #8
 8001fa4:	4311      	orrs	r1, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001faa:	0852      	lsrs	r2, r2, #1
 8001fac:	3a01      	subs	r2, #1
 8001fae:	0552      	lsls	r2, r2, #21
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fb6:	0852      	lsrs	r2, r2, #1
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0652      	lsls	r2, r2, #25
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fc2:	06d2      	lsls	r2, r2, #27
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	4912      	ldr	r1, [pc, #72]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe4:	f7fe ff4c 	bl	8000e80 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe ff48 	bl	8000e80 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e066      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <HAL_RCC_OscConfig+0x784>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800200a:	e05e      	b.n	80020ca <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e05d      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
 8002010:	40021000 	.word	0x40021000
 8002014:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d152      	bne.n	80020ca <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 800202a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a27      	ldr	r2, [pc, #156]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800203c:	f7fe ff20 	bl	8000e80 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe ff1c 	bl	8000e80 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e03a      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x7b8>
 8002062:	e032      	b.n	80020ca <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d02d      	beq.n	80020c6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002074:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002088:	f023 0303 	bic.w	r3, r3, #3
 800208c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 8002094:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7fe feef 	bl	8000e80 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe feeb 	bl	8000e80 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e009      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_OscConfig+0x848>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x81a>
 80020c4:	e001      	b.n	80020ca <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e10f      	b.n	8002310 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b89      	ldr	r3, [pc, #548]	; (8002318 <HAL_RCC_ClockConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d910      	bls.n	8002120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b86      	ldr	r3, [pc, #536]	; (8002318 <HAL_RCC_ClockConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 020f 	bic.w	r2, r3, #15
 8002106:	4984      	ldr	r1, [pc, #528]	; (8002318 <HAL_RCC_ClockConfig+0x240>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b82      	ldr	r3, [pc, #520]	; (8002318 <HAL_RCC_ClockConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0f7      	b.n	8002310 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8089 	beq.w	8002240 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d133      	bne.n	800219e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	4b79      	ldr	r3, [pc, #484]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0e4      	b.n	8002310 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002146:	f000 fa11 	bl	800256c <RCC_GetSysClockFreqFromPLLSource>
 800214a:	4603      	mov	r3, r0
 800214c:	4a74      	ldr	r2, [pc, #464]	; (8002320 <HAL_RCC_ClockConfig+0x248>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d955      	bls.n	80021fe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800215e:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002166:	4a6d      	ldr	r2, [pc, #436]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 8002168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e044      	b.n	80021fe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d03e      	beq.n	80021fe <HAL_RCC_ClockConfig+0x126>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d13a      	bne.n	80021fe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002188:	4b64      	ldr	r3, [pc, #400]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002190:	4a62      	ldr	r2, [pc, #392]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 8002192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002196:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e02f      	b.n	80021fe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d115      	bne.n	80021de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0ac      	b.n	8002310 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021be:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0a0      	b.n	8002310 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e098      	b.n	8002310 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80021de:	f000 f8a7 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <HAL_RCC_ClockConfig+0x248>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d909      	bls.n	80021fe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f2:	4a4a      	ldr	r2, [pc, #296]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80021f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4944      	ldr	r1, [pc, #272]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002210:	f7fe fe36 	bl	8000e80 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7fe fe32 	bl	8000e80 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e070      	b.n	8002310 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b33      	ldr	r3, [pc, #204]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4930      	ldr	r1, [pc, #192]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
 800225e:	e008      	b.n	8002272 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d105      	bne.n	8002272 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4a2c      	ldr	r2, [pc, #176]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 800226c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002270:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_ClockConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d210      	bcs.n	80022a2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_RCC_ClockConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 020f 	bic.w	r2, r3, #15
 8002288:	4923      	ldr	r1, [pc, #140]	; (8002318 <HAL_RCC_ClockConfig+0x240>)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCC_ClockConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e036      	b.n	8002310 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4918      	ldr	r1, [pc, #96]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4910      	ldr	r1, [pc, #64]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e0:	f000 f826 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_ClockConfig+0x244>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <HAL_RCC_ClockConfig+0x24c>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x250>)
 80022fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_RCC_ClockConfig+0x254>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fd6b 	bl	8000de0 <HAL_InitTick>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]

  return status;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40022000 	.word	0x40022000
 800231c:	40021000 	.word	0x40021000
 8002320:	04c4b400 	.word	0x04c4b400
 8002324:	0800431c 	.word	0x0800431c
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233e:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002348:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x34>
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d121      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d11e      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e005      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800238c:	4a2b      	ldr	r2, [pc, #172]	; (800243c <HAL_RCC_GetSysClockFreq+0x10c>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_RCC_GetSysClockFreq+0x110>)
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	e004      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_RCC_GetSysClockFreq+0x114>)
 80023b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d134      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d003      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0xac>
 80023d4:	e005      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCC_GetSysClockFreq+0x110>)
 80023d8:	617b      	str	r3, [r7, #20]
      break;
 80023da:	e005      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCC_GetSysClockFreq+0x114>)
 80023de:	617b      	str	r3, [r7, #20]
      break;
 80023e0:	e002      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	617b      	str	r3, [r7, #20]
      break;
 80023e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3301      	adds	r3, #1
 80023f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	fb03 f202 	mul.w	r2, r3, r2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	0e5b      	lsrs	r3, r3, #25
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	3301      	adds	r3, #1
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002428:	69bb      	ldr	r3, [r7, #24]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	08004334 	.word	0x08004334
 8002440:	00f42400 	.word	0x00f42400
 8002444:	007a1200 	.word	0x007a1200

08002448 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_RCC_GetHCLKFreq+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000000 	.word	0x20000000

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002464:	f7ff fff0 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	0800432c 	.word	0x0800432c

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002490:	f7ff ffda 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0adb      	lsrs	r3, r3, #11
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4904      	ldr	r1, [pc, #16]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000
 80024b4:	0800432c 	.word	0x0800432c

080024b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024d0:	f7ff f8f8 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
 80024d4:	6178      	str	r0, [r7, #20]
 80024d6:	e014      	b.n	8002502 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	4a21      	ldr	r2, [pc, #132]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e2:	6593      	str	r3, [r2, #88]	; 0x58
 80024e4:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024f0:	f7ff f8e8 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
 80024f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002508:	d10b      	bne.n	8002522 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d913      	bls.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2ba0      	cmp	r3, #160	; 0xa0
 8002514:	d902      	bls.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002516:	2302      	movs	r3, #2
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	e00d      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800251c:	2301      	movs	r3, #1
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	e00a      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b7f      	cmp	r3, #127	; 0x7f
 8002526:	d902      	bls.n	800252e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002528:	2302      	movs	r3, #2
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e004      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b70      	cmp	r3, #112	; 0x70
 8002532:	d101      	bne.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002534:	2301      	movs	r3, #1
 8002536:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 020f 	bic.w	r2, r3, #15
 8002540:	4909      	ldr	r1, [pc, #36]	; (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	40022000 	.word	0x40022000

0800256c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d118      	bne.n	80025b4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d107      	bne.n	800259e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e005      	b.n	80025aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800259e:	4b23      	ldr	r3, [pc, #140]	; (800262c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d003      	beq.n	80025cc <RCC_GetSysClockFreqFromPLLSource+0x60>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d003      	beq.n	80025d2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80025ca:	e005      	b.n	80025d8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80025ce:	613b      	str	r3, [r7, #16]
    break;
 80025d0:	e005      	b.n	80025de <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80025d4:	613b      	str	r3, [r7, #16]
    break;
 80025d6:	e002      	b.n	80025de <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
    break;
 80025dc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	3301      	adds	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	fb03 f202 	mul.w	r2, r3, r2
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0e5b      	lsrs	r3, r3, #25
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800261e:	683b      	ldr	r3, [r7, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40021000 	.word	0x40021000
 8002630:	08004334 	.word	0x08004334
 8002634:	00f42400 	.word	0x00f42400
 8002638:	007a1200 	.word	0x007a1200

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002644:	2300      	movs	r3, #0
 8002646:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002648:	2300      	movs	r3, #0
 800264a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002654:	2b00      	cmp	r3, #0
 8002656:	d040      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d02a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d825      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002664:	2b60      	cmp	r3, #96	; 0x60
 8002666:	d026      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002668:	2b60      	cmp	r3, #96	; 0x60
 800266a:	d821      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d006      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d81d      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d010      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800267c:	e018      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800267e:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a88      	ldr	r2, [pc, #544]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800268a:	e015      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fb02 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800269c:	e00c      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3320      	adds	r3, #32
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fbed 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ae:	e003      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	74fb      	strb	r3, [r7, #19]
      break;
 80026b4:	e000      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80026b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10b      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026be:	4b79      	ldr	r3, [pc, #484]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026c4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026cc:	4975      	ldr	r1, [pc, #468]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80026d4:	e001      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d047      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ee:	d030      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80026f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f4:	d82a      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80026f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026fa:	d02a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80026fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002700:	d824      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002706:	d008      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270c:	d81e      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002716:	d010      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002718:	e018      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800271a:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4a61      	ldr	r2, [pc, #388]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002726:	e015      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fab4 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002738:	e00c      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3320      	adds	r3, #32
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fb9f 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800274a:	e003      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	74fb      	strb	r3, [r7, #19]
      break;
 8002750:	e000      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800275a:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800275c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	494e      	ldr	r1, [pc, #312]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002770:	e001      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 809f 	beq.w	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002798:	2300      	movs	r3, #0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00d      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4a40      	ldr	r2, [pc, #256]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	2301      	movs	r3, #1
 80027b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a3a      	ldr	r2, [pc, #232]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c6:	f7fe fb5b 	bl	8000e80 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027cc:	e009      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fb57 	bl	8000e80 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d902      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	74fb      	strb	r3, [r7, #19]
        break;
 80027e0:	e005      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e2:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ef      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d15b      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01f      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	429a      	cmp	r2, r3
 8002810:	d019      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800283e:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d016      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fb16 	bl	8000e80 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	e00b      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fb12 	bl	8000e80 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d902      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	74fb      	strb	r3, [r7, #19]
            break;
 800286e:	e006      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ec      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10c      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	4903      	ldr	r1, [pc, #12]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800289c:	e008      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	74bb      	strb	r3, [r7, #18]
 80028a2:	e005      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b0:	7c7b      	ldrb	r3, [r7, #17]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4ba0      	ldr	r3, [pc, #640]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	4a9f      	ldr	r2, [pc, #636]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ce:	4b9a      	ldr	r3, [pc, #616]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f023 0203 	bic.w	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	4996      	ldr	r1, [pc, #600]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f0:	4b91      	ldr	r3, [pc, #580]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 020c 	bic.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	498e      	ldr	r1, [pc, #568]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002912:	4b89      	ldr	r3, [pc, #548]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	4985      	ldr	r1, [pc, #532]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002934:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002942:	497d      	ldr	r1, [pc, #500]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002956:	4b78      	ldr	r3, [pc, #480]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	4974      	ldr	r1, [pc, #464]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002978:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	496c      	ldr	r1, [pc, #432]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800299a:	4b67      	ldr	r3, [pc, #412]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a8:	4963      	ldr	r1, [pc, #396]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029bc:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ca:	495b      	ldr	r1, [pc, #364]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029de:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ec:	4952      	ldr	r1, [pc, #328]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a00:	4b4d      	ldr	r3, [pc, #308]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	494a      	ldr	r1, [pc, #296]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a22:	4b45      	ldr	r3, [pc, #276]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	4941      	ldr	r1, [pc, #260]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a4a:	f023 0203 	bic.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a52:	4939      	ldr	r1, [pc, #228]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d028      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a74:	4930      	ldr	r1, [pc, #192]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a84:	d106      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a90:	60d3      	str	r3, [r2, #12]
 8002a92:	e011      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f8f9 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d04d      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002acc:	d108      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ada:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ade:	e012      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afe:	490e      	ldr	r1, [pc, #56]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1a:	60d3      	str	r3, [r2, #12]
 8002b1c:	e020      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b26:	d109      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a02      	ldr	r2, [pc, #8]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b32:	60d3      	str	r3, [r2, #12]
 8002b34:	e014      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f8a5 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d028      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7a:	4947      	ldr	r1, [pc, #284]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a41      	ldr	r2, [pc, #260]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
 8002b98:	e011      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba2:	d10c      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f876 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01e      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bca:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bda:	492f      	ldr	r1, [pc, #188]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f851 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c1a:	f023 0204 	bic.w	r2, r3, #4
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c24:	491c      	ldr	r1, [pc, #112]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c3e:	f023 0218 	bic.w	r2, r3, #24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	4913      	ldr	r1, [pc, #76]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d017      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6c:	490a      	ldr	r1, [pc, #40]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000

08002c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002caa:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00e      	beq.n	8002cd4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cb6:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0203 	and.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d103      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d142      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e03f      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d018      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x72>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d825      	bhi.n	8002d2c <RCCEx_PLLSAI1_Config+0x90>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x4e>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d009      	beq.n	8002cfc <RCCEx_PLLSAI1_Config+0x60>
 8002ce8:	e020      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cea:	4b62      	ldr	r3, [pc, #392]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfa:	e01a      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cfc:	4b5d      	ldr	r3, [pc, #372]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e013      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1a:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2a:	e006      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e004      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002d42:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4949      	ldr	r1, [pc, #292]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 8086 	bne.w	8002e68 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d5c:	4b45      	ldr	r3, [pc, #276]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a44      	ldr	r2, [pc, #272]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe f88a 	bl	8000e80 <HAL_GetTick>
 8002d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d6e:	e009      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d70:	f7fe f886 	bl	8000e80 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d902      	bls.n	8002d84 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	73fb      	strb	r3, [r7, #15]
        break;
 8002d82:	e005      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ef      	bne.n	8002d70 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d168      	bne.n	8002e68 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d113      	bne.n	8002dc4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d9c:	4b35      	ldr	r3, [pc, #212]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6892      	ldr	r2, [r2, #8]
 8002da8:	0211      	lsls	r1, r2, #8
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	06d2      	lsls	r2, r2, #27
 8002db0:	4311      	orrs	r1, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6852      	ldr	r2, [r2, #4]
 8002db6:	3a01      	subs	r2, #1
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	492d      	ldr	r1, [pc, #180]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	610b      	str	r3, [r1, #16]
 8002dc2:	e02d      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d115      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dca:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	0211      	lsls	r1, r2, #8
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6912      	ldr	r2, [r2, #16]
 8002ddc:	0852      	lsrs	r2, r2, #1
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0552      	lsls	r2, r2, #21
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6852      	ldr	r2, [r2, #4]
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	430a      	orrs	r2, r1
 8002dee:	4921      	ldr	r1, [pc, #132]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	610b      	str	r3, [r1, #16]
 8002df4:	e014      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df6:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6892      	ldr	r2, [r2, #8]
 8002e02:	0211      	lsls	r1, r2, #8
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6952      	ldr	r2, [r2, #20]
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0652      	lsls	r2, r2, #25
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	4916      	ldr	r1, [pc, #88]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7fe f828 	bl	8000e80 <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e32:	e009      	b.n	8002e48 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e34:	f7fe f824 	bl	8000e80 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	73fb      	strb	r3, [r7, #15]
          break;
 8002e46:	e005      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ef      	beq.n	8002e34 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	4904      	ldr	r1, [pc, #16]	; (8002e74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	07ff800f 	.word	0x07ff800f
 8002e7c:	ff9f800f 	.word	0xff9f800f
 8002e80:	f9ff800f 	.word	0xf9ff800f

08002e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e92:	4b72      	ldr	r3, [pc, #456]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d103      	bne.n	8002eb6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d142      	bne.n	8002f3c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	e03f      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d018      	beq.n	8002ef6 <RCCEx_PLLSAI2_Config+0x72>
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d825      	bhi.n	8002f14 <RCCEx_PLLSAI2_Config+0x90>
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d002      	beq.n	8002ed2 <RCCEx_PLLSAI2_Config+0x4e>
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d009      	beq.n	8002ee4 <RCCEx_PLLSAI2_Config+0x60>
 8002ed0:	e020      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ed2:	4b62      	ldr	r3, [pc, #392]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11d      	bne.n	8002f1a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee2:	e01a      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee4:	4b5d      	ldr	r3, [pc, #372]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d116      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef4:	e013      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ef6:	4b59      	ldr	r3, [pc, #356]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f12:	e006      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e004      	b.n	8002f24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e002      	b.n	8002f24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d108      	bne.n	8002f3c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4949      	ldr	r1, [pc, #292]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 8086 	bne.w	8003050 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f44:	4b45      	ldr	r3, [pc, #276]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a44      	ldr	r2, [pc, #272]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fd ff96 	bl	8000e80 <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f56:	e009      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f58:	f7fd ff92 	bl	8000e80 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6a:	e005      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ef      	bne.n	8002f58 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d168      	bne.n	8003050 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d113      	bne.n	8002fac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f84:	4b35      	ldr	r3, [pc, #212]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	0211      	lsls	r1, r2, #8
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	06d2      	lsls	r2, r2, #27
 8002f98:	4311      	orrs	r1, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6852      	ldr	r2, [r2, #4]
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	492d      	ldr	r1, [pc, #180]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	614b      	str	r3, [r1, #20]
 8002faa:	e02d      	b.n	8003008 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d115      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fb2:	4b2a      	ldr	r3, [pc, #168]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6892      	ldr	r2, [r2, #8]
 8002fbe:	0211      	lsls	r1, r2, #8
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6912      	ldr	r2, [r2, #16]
 8002fc4:	0852      	lsrs	r2, r2, #1
 8002fc6:	3a01      	subs	r2, #1
 8002fc8:	0552      	lsls	r2, r2, #21
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6852      	ldr	r2, [r2, #4]
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	4921      	ldr	r1, [pc, #132]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	614b      	str	r3, [r1, #20]
 8002fdc:	e014      	b.n	8003008 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fde:	4b1f      	ldr	r3, [pc, #124]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	4b21      	ldr	r3, [pc, #132]	; (8003068 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6892      	ldr	r2, [r2, #8]
 8002fea:	0211      	lsls	r1, r2, #8
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6952      	ldr	r2, [r2, #20]
 8002ff0:	0852      	lsrs	r2, r2, #1
 8002ff2:	3a01      	subs	r2, #1
 8002ff4:	0652      	lsls	r2, r2, #25
 8002ff6:	4311      	orrs	r1, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6852      	ldr	r2, [r2, #4]
 8002ffc:	3a01      	subs	r2, #1
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	430a      	orrs	r2, r1
 8003002:	4916      	ldr	r1, [pc, #88]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003004:	4313      	orrs	r3, r2
 8003006:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a13      	ldr	r2, [pc, #76]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 800300e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003012:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fd ff34 	bl	8000e80 <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800301a:	e009      	b.n	8003030 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800301c:	f7fd ff30 	bl	8000e80 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d902      	bls.n	8003030 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	73fb      	strb	r3, [r7, #15]
          break;
 800302e:	e005      	b.n	800303c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ef      	beq.n	800301c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	4904      	ldr	r1, [pc, #16]	; (800305c <RCCEx_PLLSAI2_Config+0x1d8>)
 800304c:	4313      	orrs	r3, r2
 800304e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	07ff800f 	.word	0x07ff800f
 8003064:	ff9f800f 	.word	0xff9f800f
 8003068:	f9ff800f 	.word	0xf9ff800f

0800306c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e042      	b.n	8003104 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fd fccf 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2224      	movs	r2, #36	; 0x24
 800309a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8c4 	bl	800323c <UART_SetConfig>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e022      	b.n	8003104 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fbba 	bl	8003840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fc41 	bl	8003984 <UART_CheckIdleState>
 8003102:	4603      	mov	r3, r0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003122:	2b20      	cmp	r3, #32
 8003124:	f040 8084 	bne.w	8003230 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_UART_Transmit+0x28>
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e07c      	b.n	8003232 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_UART_Transmit+0x3a>
 8003142:	2302      	movs	r3, #2
 8003144:	e075      	b.n	8003232 <HAL_UART_Transmit+0x126>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800315e:	f7fd fe8f 	bl	8000e80 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317c:	d108      	bne.n	8003190 <HAL_UART_Transmit+0x84>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d104      	bne.n	8003190 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	e003      	b.n	8003198 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80031a0:	e02d      	b.n	80031fe <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fc31 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e03a      	b.n	8003232 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ce:	b292      	uxth	r2, r2
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	3302      	adds	r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e008      	b.n	80031ec <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b292      	uxth	r2, r2
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1cb      	bne.n	80031a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2140      	movs	r1, #64	; 0x40
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fbfd 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e006      	b.n	8003232 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800323c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003240:	b08c      	sub	sp, #48	; 0x30
 8003242:	af00      	add	r7, sp, #0
 8003244:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	431a      	orrs	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	431a      	orrs	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4313      	orrs	r3, r2
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326a:	4313      	orrs	r3, r2
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4baa      	ldr	r3, [pc, #680]	; (8003520 <UART_SetConfig+0x2e4>)
 8003276:	4013      	ands	r3, r2
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800327e:	430b      	orrs	r3, r1
 8003280:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4aa0      	ldr	r2, [pc, #640]	; (8003524 <UART_SetConfig+0x2e8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ae:	4313      	orrs	r3, r2
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80032bc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032c6:	430b      	orrs	r3, r1
 80032c8:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f023 010f 	bic.w	r1, r3, #15
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a90      	ldr	r2, [pc, #576]	; (8003528 <UART_SetConfig+0x2ec>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d126      	bne.n	8003338 <UART_SetConfig+0xfc>
 80032ea:	4b90      	ldr	r3, [pc, #576]	; (800352c <UART_SetConfig+0x2f0>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d81b      	bhi.n	8003330 <UART_SetConfig+0xf4>
 80032f8:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <UART_SetConfig+0xc4>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	08003311 	.word	0x08003311
 8003304:	08003321 	.word	0x08003321
 8003308:	08003319 	.word	0x08003319
 800330c:	08003329 	.word	0x08003329
 8003310:	2301      	movs	r3, #1
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003316:	e116      	b.n	8003546 <UART_SetConfig+0x30a>
 8003318:	2302      	movs	r3, #2
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800331e:	e112      	b.n	8003546 <UART_SetConfig+0x30a>
 8003320:	2304      	movs	r3, #4
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003326:	e10e      	b.n	8003546 <UART_SetConfig+0x30a>
 8003328:	2308      	movs	r3, #8
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800332e:	e10a      	b.n	8003546 <UART_SetConfig+0x30a>
 8003330:	2310      	movs	r3, #16
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003336:	e106      	b.n	8003546 <UART_SetConfig+0x30a>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7c      	ldr	r2, [pc, #496]	; (8003530 <UART_SetConfig+0x2f4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d138      	bne.n	80033b4 <UART_SetConfig+0x178>
 8003342:	4b7a      	ldr	r3, [pc, #488]	; (800352c <UART_SetConfig+0x2f0>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d82d      	bhi.n	80033ac <UART_SetConfig+0x170>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <UART_SetConfig+0x11c>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	0800338d 	.word	0x0800338d
 800335c:	080033ad 	.word	0x080033ad
 8003360:	080033ad 	.word	0x080033ad
 8003364:	080033ad 	.word	0x080033ad
 8003368:	0800339d 	.word	0x0800339d
 800336c:	080033ad 	.word	0x080033ad
 8003370:	080033ad 	.word	0x080033ad
 8003374:	080033ad 	.word	0x080033ad
 8003378:	08003395 	.word	0x08003395
 800337c:	080033ad 	.word	0x080033ad
 8003380:	080033ad 	.word	0x080033ad
 8003384:	080033ad 	.word	0x080033ad
 8003388:	080033a5 	.word	0x080033a5
 800338c:	2300      	movs	r3, #0
 800338e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003392:	e0d8      	b.n	8003546 <UART_SetConfig+0x30a>
 8003394:	2302      	movs	r3, #2
 8003396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800339a:	e0d4      	b.n	8003546 <UART_SetConfig+0x30a>
 800339c:	2304      	movs	r3, #4
 800339e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033a2:	e0d0      	b.n	8003546 <UART_SetConfig+0x30a>
 80033a4:	2308      	movs	r3, #8
 80033a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033aa:	e0cc      	b.n	8003546 <UART_SetConfig+0x30a>
 80033ac:	2310      	movs	r3, #16
 80033ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033b2:	e0c8      	b.n	8003546 <UART_SetConfig+0x30a>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a5e      	ldr	r2, [pc, #376]	; (8003534 <UART_SetConfig+0x2f8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d125      	bne.n	800340a <UART_SetConfig+0x1ce>
 80033be:	4b5b      	ldr	r3, [pc, #364]	; (800352c <UART_SetConfig+0x2f0>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033c8:	2b30      	cmp	r3, #48	; 0x30
 80033ca:	d016      	beq.n	80033fa <UART_SetConfig+0x1be>
 80033cc:	2b30      	cmp	r3, #48	; 0x30
 80033ce:	d818      	bhi.n	8003402 <UART_SetConfig+0x1c6>
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d00a      	beq.n	80033ea <UART_SetConfig+0x1ae>
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d814      	bhi.n	8003402 <UART_SetConfig+0x1c6>
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <UART_SetConfig+0x1a6>
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d008      	beq.n	80033f2 <UART_SetConfig+0x1b6>
 80033e0:	e00f      	b.n	8003402 <UART_SetConfig+0x1c6>
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e8:	e0ad      	b.n	8003546 <UART_SetConfig+0x30a>
 80033ea:	2302      	movs	r3, #2
 80033ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f0:	e0a9      	b.n	8003546 <UART_SetConfig+0x30a>
 80033f2:	2304      	movs	r3, #4
 80033f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f8:	e0a5      	b.n	8003546 <UART_SetConfig+0x30a>
 80033fa:	2308      	movs	r3, #8
 80033fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003400:	e0a1      	b.n	8003546 <UART_SetConfig+0x30a>
 8003402:	2310      	movs	r3, #16
 8003404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003408:	e09d      	b.n	8003546 <UART_SetConfig+0x30a>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a4a      	ldr	r2, [pc, #296]	; (8003538 <UART_SetConfig+0x2fc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d125      	bne.n	8003460 <UART_SetConfig+0x224>
 8003414:	4b45      	ldr	r3, [pc, #276]	; (800352c <UART_SetConfig+0x2f0>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800341e:	2bc0      	cmp	r3, #192	; 0xc0
 8003420:	d016      	beq.n	8003450 <UART_SetConfig+0x214>
 8003422:	2bc0      	cmp	r3, #192	; 0xc0
 8003424:	d818      	bhi.n	8003458 <UART_SetConfig+0x21c>
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d00a      	beq.n	8003440 <UART_SetConfig+0x204>
 800342a:	2b80      	cmp	r3, #128	; 0x80
 800342c:	d814      	bhi.n	8003458 <UART_SetConfig+0x21c>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <UART_SetConfig+0x1fc>
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d008      	beq.n	8003448 <UART_SetConfig+0x20c>
 8003436:	e00f      	b.n	8003458 <UART_SetConfig+0x21c>
 8003438:	2300      	movs	r3, #0
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800343e:	e082      	b.n	8003546 <UART_SetConfig+0x30a>
 8003440:	2302      	movs	r3, #2
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003446:	e07e      	b.n	8003546 <UART_SetConfig+0x30a>
 8003448:	2304      	movs	r3, #4
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344e:	e07a      	b.n	8003546 <UART_SetConfig+0x30a>
 8003450:	2308      	movs	r3, #8
 8003452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003456:	e076      	b.n	8003546 <UART_SetConfig+0x30a>
 8003458:	2310      	movs	r3, #16
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345e:	e072      	b.n	8003546 <UART_SetConfig+0x30a>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a35      	ldr	r2, [pc, #212]	; (800353c <UART_SetConfig+0x300>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d12a      	bne.n	80034c0 <UART_SetConfig+0x284>
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <UART_SetConfig+0x2f0>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003478:	d01a      	beq.n	80034b0 <UART_SetConfig+0x274>
 800347a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347e:	d81b      	bhi.n	80034b8 <UART_SetConfig+0x27c>
 8003480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003484:	d00c      	beq.n	80034a0 <UART_SetConfig+0x264>
 8003486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348a:	d815      	bhi.n	80034b8 <UART_SetConfig+0x27c>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <UART_SetConfig+0x25c>
 8003490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003494:	d008      	beq.n	80034a8 <UART_SetConfig+0x26c>
 8003496:	e00f      	b.n	80034b8 <UART_SetConfig+0x27c>
 8003498:	2300      	movs	r3, #0
 800349a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800349e:	e052      	b.n	8003546 <UART_SetConfig+0x30a>
 80034a0:	2302      	movs	r3, #2
 80034a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a6:	e04e      	b.n	8003546 <UART_SetConfig+0x30a>
 80034a8:	2304      	movs	r3, #4
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ae:	e04a      	b.n	8003546 <UART_SetConfig+0x30a>
 80034b0:	2308      	movs	r3, #8
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b6:	e046      	b.n	8003546 <UART_SetConfig+0x30a>
 80034b8:	2310      	movs	r3, #16
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034be:	e042      	b.n	8003546 <UART_SetConfig+0x30a>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a17      	ldr	r2, [pc, #92]	; (8003524 <UART_SetConfig+0x2e8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d13a      	bne.n	8003540 <UART_SetConfig+0x304>
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <UART_SetConfig+0x2f0>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034d8:	d01a      	beq.n	8003510 <UART_SetConfig+0x2d4>
 80034da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034de:	d81b      	bhi.n	8003518 <UART_SetConfig+0x2dc>
 80034e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e4:	d00c      	beq.n	8003500 <UART_SetConfig+0x2c4>
 80034e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ea:	d815      	bhi.n	8003518 <UART_SetConfig+0x2dc>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <UART_SetConfig+0x2bc>
 80034f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f4:	d008      	beq.n	8003508 <UART_SetConfig+0x2cc>
 80034f6:	e00f      	b.n	8003518 <UART_SetConfig+0x2dc>
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fe:	e022      	b.n	8003546 <UART_SetConfig+0x30a>
 8003500:	2302      	movs	r3, #2
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003506:	e01e      	b.n	8003546 <UART_SetConfig+0x30a>
 8003508:	2304      	movs	r3, #4
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350e:	e01a      	b.n	8003546 <UART_SetConfig+0x30a>
 8003510:	2308      	movs	r3, #8
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003516:	e016      	b.n	8003546 <UART_SetConfig+0x30a>
 8003518:	2310      	movs	r3, #16
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800351e:	e012      	b.n	8003546 <UART_SetConfig+0x30a>
 8003520:	cfff69f3 	.word	0xcfff69f3
 8003524:	40008000 	.word	0x40008000
 8003528:	40013800 	.word	0x40013800
 800352c:	40021000 	.word	0x40021000
 8003530:	40004400 	.word	0x40004400
 8003534:	40004800 	.word	0x40004800
 8003538:	40004c00 	.word	0x40004c00
 800353c:	40005000 	.word	0x40005000
 8003540:	2310      	movs	r3, #16
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4aae      	ldr	r2, [pc, #696]	; (8003804 <UART_SetConfig+0x5c8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	f040 8097 	bne.w	8003680 <UART_SetConfig+0x444>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003556:	2b08      	cmp	r3, #8
 8003558:	d823      	bhi.n	80035a2 <UART_SetConfig+0x366>
 800355a:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <UART_SetConfig+0x324>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	08003585 	.word	0x08003585
 8003564:	080035a3 	.word	0x080035a3
 8003568:	0800358d 	.word	0x0800358d
 800356c:	080035a3 	.word	0x080035a3
 8003570:	08003593 	.word	0x08003593
 8003574:	080035a3 	.word	0x080035a3
 8003578:	080035a3 	.word	0x080035a3
 800357c:	080035a3 	.word	0x080035a3
 8003580:	0800359b 	.word	0x0800359b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003584:	f7fe ff6c 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8003588:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800358a:	e010      	b.n	80035ae <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800358c:	4b9e      	ldr	r3, [pc, #632]	; (8003808 <UART_SetConfig+0x5cc>)
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003590:	e00d      	b.n	80035ae <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7fe fecd 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 8003596:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003598:	e009      	b.n	80035ae <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035a0:	e005      	b.n	80035ae <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8130 	beq.w	8003816 <UART_SetConfig+0x5da>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	4a94      	ldr	r2, [pc, #592]	; (800380c <UART_SetConfig+0x5d0>)
 80035bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d305      	bcc.n	80035e6 <UART_SetConfig+0x3aa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d903      	bls.n	80035ee <UART_SetConfig+0x3b2>
      {
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035ec:	e113      	b.n	8003816 <UART_SetConfig+0x5da>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	2200      	movs	r2, #0
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	60fa      	str	r2, [r7, #12]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	4a84      	ldr	r2, [pc, #528]	; (800380c <UART_SetConfig+0x5d0>)
 80035fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003600:	b29b      	uxth	r3, r3
 8003602:	2200      	movs	r2, #0
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800360c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003610:	f7fc fdf4 	bl	80001fc <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	020b      	lsls	r3, r1, #8
 8003626:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800362a:	0202      	lsls	r2, r0, #8
 800362c:	6979      	ldr	r1, [r7, #20]
 800362e:	6849      	ldr	r1, [r1, #4]
 8003630:	0849      	lsrs	r1, r1, #1
 8003632:	2000      	movs	r0, #0
 8003634:	460c      	mov	r4, r1
 8003636:	4605      	mov	r5, r0
 8003638:	eb12 0804 	adds.w	r8, r2, r4
 800363c:	eb43 0905 	adc.w	r9, r3, r5
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	469a      	mov	sl, r3
 8003648:	4693      	mov	fp, r2
 800364a:	4652      	mov	r2, sl
 800364c:	465b      	mov	r3, fp
 800364e:	4640      	mov	r0, r8
 8003650:	4649      	mov	r1, r9
 8003652:	f7fc fdd3 	bl	80001fc <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4613      	mov	r3, r2
 800365c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003664:	d308      	bcc.n	8003678 <UART_SetConfig+0x43c>
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366c:	d204      	bcs.n	8003678 <UART_SetConfig+0x43c>
        {
          huart->Instance->BRR = usartdiv;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	e0ce      	b.n	8003816 <UART_SetConfig+0x5da>
        }
        else
        {
          ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800367e:	e0ca      	b.n	8003816 <UART_SetConfig+0x5da>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003688:	d167      	bne.n	800375a <UART_SetConfig+0x51e>
  {
    switch (clocksource)
 800368a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800368e:	2b08      	cmp	r3, #8
 8003690:	d827      	bhi.n	80036e2 <UART_SetConfig+0x4a6>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <UART_SetConfig+0x45c>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036e3 	.word	0x080036e3
 80036a8:	080036d3 	.word	0x080036d3
 80036ac:	080036e3 	.word	0x080036e3
 80036b0:	080036e3 	.word	0x080036e3
 80036b4:	080036e3 	.word	0x080036e3
 80036b8:	080036db 	.word	0x080036db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe fed0 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036c2:	e014      	b.n	80036ee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7fe fee2 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 80036c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ca:	e010      	b.n	80036ee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036cc:	4b4e      	ldr	r3, [pc, #312]	; (8003808 <UART_SetConfig+0x5cc>)
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036d0:	e00d      	b.n	80036ee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d2:	f7fe fe2d 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036d8:	e009      	b.n	80036ee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036e0:	e005      	b.n	80036ee <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8090 	beq.w	8003816 <UART_SetConfig+0x5da>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4a44      	ldr	r2, [pc, #272]	; (800380c <UART_SetConfig+0x5d0>)
 80036fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003700:	461a      	mov	r2, r3
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	fbb3 f3f2 	udiv	r3, r3, r2
 8003708:	005a      	lsls	r2, r3, #1
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	441a      	add	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	b29b      	uxth	r3, r3
 800371c:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	2b0f      	cmp	r3, #15
 8003722:	d916      	bls.n	8003752 <UART_SetConfig+0x516>
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372a:	d212      	bcs.n	8003752 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	b29b      	uxth	r3, r3
 8003730:	f023 030f 	bic.w	r3, r3, #15
 8003734:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	b29b      	uxth	r3, r3
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	b29a      	uxth	r2, r3
 8003742:	8bfb      	ldrh	r3, [r7, #30]
 8003744:	4313      	orrs	r3, r2
 8003746:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	8bfa      	ldrh	r2, [r7, #30]
 800374e:	60da      	str	r2, [r3, #12]
 8003750:	e061      	b.n	8003816 <UART_SetConfig+0x5da>
      }
      else
      {
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003758:	e05d      	b.n	8003816 <UART_SetConfig+0x5da>
      }
    }
  }
  else
  {
    switch (clocksource)
 800375a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800375e:	2b08      	cmp	r3, #8
 8003760:	d827      	bhi.n	80037b2 <UART_SetConfig+0x576>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <UART_SetConfig+0x52c>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	0800378d 	.word	0x0800378d
 800376c:	08003795 	.word	0x08003795
 8003770:	0800379d 	.word	0x0800379d
 8003774:	080037b3 	.word	0x080037b3
 8003778:	080037a3 	.word	0x080037a3
 800377c:	080037b3 	.word	0x080037b3
 8003780:	080037b3 	.word	0x080037b3
 8003784:	080037b3 	.word	0x080037b3
 8003788:	080037ab 	.word	0x080037ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800378c:	f7fe fe68 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8003790:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003792:	e014      	b.n	80037be <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003794:	f7fe fe7a 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 8003798:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800379a:	e010      	b.n	80037be <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800379c:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <UART_SetConfig+0x5cc>)
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037a0:	e00d      	b.n	80037be <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a2:	f7fe fdc5 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80037a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037a8:	e009      	b.n	80037be <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037b0:	e005      	b.n	80037be <UART_SetConfig+0x582>
      default:
        pclk = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037bc:	bf00      	nop
    }

    if (pclk != 0U)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d028      	beq.n	8003816 <UART_SetConfig+0x5da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <UART_SetConfig+0x5d0>)
 80037ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	441a      	add	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d90f      	bls.n	8003810 <UART_SetConfig+0x5d4>
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f6:	d20b      	bcs.n	8003810 <UART_SetConfig+0x5d4>
      {
        huart->Instance->BRR = usartdiv;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	e009      	b.n	8003816 <UART_SetConfig+0x5da>
 8003802:	bf00      	nop
 8003804:	40008000 	.word	0x40008000
 8003808:	00f42400 	.word	0x00f42400
 800380c:	08004364 	.word	0x08004364
      }
      else
      {
        ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2201      	movs	r2, #1
 800381a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2201      	movs	r2, #1
 8003822:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2200      	movs	r2, #0
 8003830:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003832:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003836:	4618      	mov	r0, r3
 8003838:	3730      	adds	r7, #48	; 0x30
 800383a:	46bd      	mov	sp, r7
 800383c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01a      	beq.n	8003956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393e:	d10a      	bne.n	8003956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af02      	add	r7, sp, #8
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003994:	f7fd fa74 	bl	8000e80 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d10e      	bne.n	80039c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f82c 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e022      	b.n	8003a0c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d10e      	bne.n	80039f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f816 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e00c      	b.n	8003a0c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	e062      	b.n	8003aec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d05e      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fd fa27 	bl	8000e80 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d11d      	bne.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a52:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e045      	b.n	8003b0c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02e      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9c:	d126      	bne.n	8003aec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ab6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e00f      	b.n	8003b0c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d08d      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_UARTEx_DisableFifoMode+0x16>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e027      	b.n	8003b7a <HAL_UARTEx_DisableFifoMode+0x66>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2224      	movs	r2, #36	; 0x24
 8003b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003b58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e02d      	b.n	8003bfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2224      	movs	r2, #36	; 0x24
 8003baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f850 	bl	8003c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e02d      	b.n	8003c76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2224      	movs	r2, #36	; 0x24
 8003c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f812 	bl	8003c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	; 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003c88:	4a2d      	ldr	r2, [pc, #180]	; (8003d40 <UARTEx_SetNbDataToProcess+0xc0>)
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c92:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003c96:	4a2b      	ldr	r2, [pc, #172]	; (8003d44 <UARTEx_SetNbDataToProcess+0xc4>)
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ca0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d108      	bne.n	8003cbe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cbc:	e039      	b.n	8003d32 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	0e5b      	lsrs	r3, r3, #25
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	0f5b      	lsrs	r3, r3, #29
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003ce6:	7fbb      	ldrb	r3, [r7, #30]
 8003ce8:	7f3a      	ldrb	r2, [r7, #28]
 8003cea:	3220      	adds	r2, #32
 8003cec:	443a      	add	r2, r7
 8003cee:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	7f3a      	ldrb	r2, [r7, #28]
 8003cf8:	3220      	adds	r2, #32
 8003cfa:	443a      	add	r2, r7
 8003cfc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
 8003d0e:	7f7a      	ldrb	r2, [r7, #29]
 8003d10:	3220      	adds	r2, #32
 8003d12:	443a      	add	r2, r7
 8003d14:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	7f7a      	ldrb	r2, [r7, #29]
 8003d1e:	3220      	adds	r2, #32
 8003d20:	443a      	add	r2, r7
 8003d22:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	0800430c 	.word	0x0800430c
 8003d44:	08004314 	.word	0x08004314

08003d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d48:	b084      	sub	sp, #16
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	f107 001c 	add.w	r0, r7, #28
 8003d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d122      	bne.n	8003da6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa30 	bl	8004200 <USB_CoreReset>
 8003da0:	4603      	mov	r3, r0
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	e01a      	b.n	8003ddc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa24 	bl	8004200 <USB_CoreReset>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8003dce:	e005      	b.n	8003ddc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003de8:	b004      	add	sp, #16
 8003dea:	4770      	bx	lr

08003dec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 0201 	bic.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d106      	bne.n	8003e3a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	e00b      	b.n	8003e52 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	e001      	b.n	8003e52 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e003      	b.n	8003e5a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e52:	2032      	movs	r0, #50	; 0x32
 8003e54:	f7fd f820 	bl	8000e98 <HAL_Delay>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e64:	b084      	sub	sp, #16
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b086      	sub	sp, #24
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	e009      	b.n	8003e98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3340      	adds	r3, #64	; 0x40
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	3301      	adds	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b0e      	cmp	r3, #14
 8003e9c:	d9f2      	bls.n	8003e84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d11c      	bne.n	8003ede <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e005      	b.n	8003eea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efc:	4619      	mov	r1, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f04:	461a      	mov	r2, r3
 8003f06:	680b      	ldr	r3, [r1, #0]
 8003f08:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f0a:	2103      	movs	r1, #3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f93d 	bl	800418c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f12:	2110      	movs	r1, #16
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8f1 	bl	80040fc <USB_FlushTxFifo>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f90f 	bl	8004148 <USB_FlushRxFifo>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	461a      	mov	r2, r3
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f52:	461a      	mov	r2, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e043      	b.n	8003fe6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f74:	d118      	bne.n	8003fa8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e013      	b.n	8003fba <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e008      	b.n	8003fba <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2300      	movs	r3, #0
 8003fca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3b7      	bcc.n	8003f5e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e043      	b.n	800407c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800400a:	d118      	bne.n	800403e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	461a      	mov	r2, r3
 8004020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e013      	b.n	8004050 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	461a      	mov	r2, r3
 8004036:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	e008      	b.n	8004050 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	461a      	mov	r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	461a      	mov	r2, r3
 800405e:	2300      	movs	r3, #0
 8004060:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	461a      	mov	r2, r3
 8004070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004074:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3301      	adds	r3, #1
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d3b7      	bcc.n	8003ff4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004096:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f043 0210 	orr.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <USB_DevInit+0x294>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f043 0208 	orr.w	r2, r3, #8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040f2:	b004      	add	sp, #16
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	803c3800 	.word	0x803c3800

080040fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	f043 0220 	orr.w	r2, r3, #32
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3301      	adds	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <USB_FlushTxFifo+0x48>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e006      	b.n	8004136 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b20      	cmp	r3, #32
 8004132:	d0f0      	beq.n	8004116 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	00030d40 	.word	0x00030d40

08004148 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2210      	movs	r2, #16
 8004158:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3301      	adds	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a09      	ldr	r2, [pc, #36]	; (8004188 <USB_FlushRxFifo+0x40>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d901      	bls.n	800416c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e006      	b.n	800417a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d0f0      	beq.n	800415a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	00030d40 	.word	0x00030d40

0800418c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041d8:	f023 0303 	bic.w	r3, r3, #3
 80041dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a13      	ldr	r2, [pc, #76]	; (8004264 <USB_CoreReset+0x64>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e01b      	b.n	8004256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	daf2      	bge.n	800420c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a09      	ldr	r2, [pc, #36]	; (8004264 <USB_CoreReset+0x64>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e006      	b.n	8004256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b01      	cmp	r3, #1
 8004252:	d0f0      	beq.n	8004236 <USB_CoreReset+0x36>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	00030d40 	.word	0x00030d40

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	; (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	; (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	; (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	; (80042ac <__libc_init_array+0x44>)
 800427c:	f000 f820 	bl	80042c0 <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004384 	.word	0x08004384
 80042a4:	08004384 	.word	0x08004384
 80042a8:	08004384 	.word	0x08004384
 80042ac:	08004388 	.word	0x08004388

080042b0 <memset>:
 80042b0:	4402      	add	r2, r0
 80042b2:	4603      	mov	r3, r0
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d100      	bne.n	80042ba <memset+0xa>
 80042b8:	4770      	bx	lr
 80042ba:	f803 1b01 	strb.w	r1, [r3], #1
 80042be:	e7f9      	b.n	80042b4 <memset+0x4>

080042c0 <_init>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr

080042cc <_fini>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr
