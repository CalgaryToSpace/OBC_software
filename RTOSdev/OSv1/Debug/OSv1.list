
OSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e8  080088e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088f0  080088f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080088f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e10  20000074  0800896c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e84  0800896c  00022e84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac36  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ed7  00000000  00000000  0004acda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  0004fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002ebd5  00000000  00000000  00051958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002269d  00000000  00000000  0008052d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001184aa  00000000  00000000  000a2bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001bb074  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b90  00000000  00000000  001bb0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ef8  00000000  00000000  001bcc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800879c 	.word	0x0800879c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800879c 	.word	0x0800879c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 f85b 	bl	80015b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 fd9c 	bl	800103c <SystemClock_Config>
  startUart();
 8000504:	f000 fd80 	bl	8001008 <startUart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f005 f9aa 	bl	8005860 <osKernelInitialize>

  /* Create the thread(s) */


  /* USER CODE BEGIN RTOS_THREADS */
  head = NULL;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <main+0x30>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
  startThread(mainThread, osPriorityHigh, "Main", 8*128);
 8000512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <main+0x34>)
 8000518:	2128      	movs	r1, #40	; 0x28
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <main+0x38>)
 800051c:	f000 fb54 	bl	8000bc8 <startThread>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
   osKernelStart();
 8000520:	f005 f9d2 	bl	80058c8 <osKernelStart>
  //char* taskName = "Test 1";
  //startTask(functionName, 10, taskName, 4*128);
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x2c>
 8000526:	bf00      	nop
 8000528:	200027fc 	.word	0x200027fc
 800052c:	080087b4 	.word	0x080087b4
 8000530:	08000eed 	.word	0x08000eed

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_MspInit+0x4c>)
 8000548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800054a:	4a10      	ldr	r2, [pc, #64]	; (800058c <HAL_MspInit+0x4c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6613      	str	r3, [r2, #96]	; 0x60
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_MspInit+0x4c>)
 8000554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_MspInit+0x4c>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <HAL_MspInit+0x4c>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_MspInit+0x4c>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	210f      	movs	r1, #15
 800057a:	f06f 0001 	mvn.w	r0, #1
 800057e:	f001 f92f 	bl	80017e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a44      	ldr	r2, [pc, #272]	; (80006c0 <HAL_UART_MspInit+0x130>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d154      	bne.n	800065c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80005b2:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80005b6:	4a43      	ldr	r2, [pc, #268]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80005be:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
 80005c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a3d      	ldr	r2, [pc, #244]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80005e2:	f001 ff5f 	bl	80024a4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80005e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80005f8:	2308      	movs	r3, #8
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4831      	ldr	r0, [pc, #196]	; (80006c8 <HAL_UART_MspInit+0x138>)
 8000604:	f001 fb88 	bl	8001d18 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000608:	4b30      	ldr	r3, [pc, #192]	; (80006cc <HAL_UART_MspInit+0x13c>)
 800060a:	4a31      	ldr	r2, [pc, #196]	; (80006d0 <HAL_UART_MspInit+0x140>)
 800060c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000610:	2222      	movs	r2, #34	; 0x22
 8000612:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000614:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <HAL_UART_MspInit+0x13c>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000620:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <HAL_UART_MspInit+0x13c>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <HAL_UART_MspInit+0x13c>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800063e:	4823      	ldr	r0, [pc, #140]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000640:	f001 f8f8 	bl	8001834 <HAL_DMA_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800064a:	f7ff ff73 	bl	8000534 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000652:	679a      	str	r2, [r3, #120]	; 0x78
 8000654:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800065a:	e02d      	b.n	80006b8 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <HAL_UART_MspInit+0x144>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d128      	bne.n	80006b8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_UART_MspInit+0x134>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <HAL_UART_MspInit+0x134>)
 800066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000670:	6593      	str	r3, [r2, #88]	; 0x58
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_UART_MspInit+0x134>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_UART_MspInit+0x134>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <HAL_UART_MspInit+0x134>)
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_UART_MspInit+0x134>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800069a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006a8:	2307      	movs	r3, #7
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <HAL_UART_MspInit+0x148>)
 80006b4:	f001 fb30 	bl	8001d18 <HAL_GPIO_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3730      	adds	r7, #48	; 0x30
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40008000 	.word	0x40008000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48001800 	.word	0x48001800
 80006cc:	20002d6c 	.word	0x20002d6c
 80006d0:	40020008 	.word	0x40020008
 80006d4:	40004800 	.word	0x40004800
 80006d8:	48000c00 	.word	0x48000c00

080006dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a17      	ldr	r2, [pc, #92]	; (8000758 <HAL_SPI_MspInit+0x7c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d128      	bne.n	8000750 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_SPI_MspInit+0x80>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <HAL_SPI_MspInit+0x80>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000708:	6613      	str	r3, [r2, #96]	; 0x60
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_SPI_MspInit+0x80>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_SPI_MspInit+0x80>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <HAL_SPI_MspInit+0x80>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_SPI_MspInit+0x80>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800072e:	23e0      	movs	r3, #224	; 0xe0
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800073e:	2305      	movs	r3, #5
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f001 fae4 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40013000 	.word	0x40013000
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000780:	d154      	bne.n	800082c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800079a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007ac:	230a      	movs	r3, #10
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 faad 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f001 fa9f 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 80007e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d114      	bne.n	8000828 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000816:	f001 fe35 	bl	8002484 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000824:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000826:	e001      	b.n	800082c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000828:	f001 fe2c 	bl	8002484 <HAL_PWREx_EnableVddUSB>
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	201d      	movs	r0, #29
 800084e:	f000 ffc7 	bl	80017e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000852:	201d      	movs	r0, #29
 8000854:	f000 ffe0 	bl	8001818 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_InitTick+0xa0>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <HAL_InitTick+0xa0>)
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	6593      	str	r3, [r2, #88]	; 0x58
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_InitTick+0xa0>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000870:	f107 0210 	add.w	r2, r7, #16
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fc38 	bl	80030f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000880:	f002 fc0a 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8000884:	4603      	mov	r3, r0
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <HAL_InitTick+0xa4>)
 800088e:	fba2 2303 	umull	r2, r3, r2, r3
 8000892:	0c9b      	lsrs	r3, r3, #18
 8000894:	3b01      	subs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_InitTick+0xa8>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <HAL_InitTick+0xac>)
 800089c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_InitTick+0xa8>)
 80008a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_InitTick+0xa8>)
 80008a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008aa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_InitTick+0xa8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_InitTick+0xa8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <HAL_InitTick+0xa8>)
 80008ba:	f003 fac8 	bl	8003e4e <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d104      	bne.n	80008ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <HAL_InitTick+0xa8>)
 80008c6:	f003 fb23 	bl	8003f10 <HAL_TIM_Base_Start_IT>
 80008ca:	4603      	mov	r3, r0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3730      	adds	r7, #48	; 0x30
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	431bde83 	.word	0x431bde83
 80008e0:	20002800 	.word	0x20002800
 80008e4:	40000400 	.word	0x40000400

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Channel1_IRQHandler+0x10>)
 800091a:	f001 f8ae 	bl	8001a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20002d6c 	.word	0x20002d6c

08000928 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM3_IRQHandler+0x10>)
 800092e:	f003 fb5f 	bl	8003ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20002800 	.word	0x20002800

0800093c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <_sbrk+0x5c>)
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <_sbrk+0x60>)
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <_sbrk+0x64>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <_sbrk+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800096c:	f007 fdfe 	bl	800856c <__errno>
 8000970:	4603      	mov	r3, r0
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	e009      	b.n	8000990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_sbrk+0x64>)
 800098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200a0000 	.word	0x200a0000
 800099c:	00000400 	.word	0x00000400
 80009a0:	20000090 	.word	0x20000090
 80009a4:	20002e88 	.word	0x20002e88

080009a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <SystemInit+0x64>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <SystemInit+0x64>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <SystemInit+0x68>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a13      	ldr	r2, [pc, #76]	; (8000a10 <SystemInit+0x68>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <SystemInit+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <SystemInit+0x68>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <SystemInit+0x68>)
 80009d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <SystemInit+0x68>)
 80009e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <SystemInit+0x68>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <SystemInit+0x68>)
 80009ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <SystemInit+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SystemInit+0x64>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	40021000 	.word	0x40021000

08000a14 <addChildNodeToParent>:
#include "uart.h"
#include <stdio.h>



void addChildNodeToParent(struct threadNode* parentNode, struct threadNode* child){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	if(parentNode == NULL)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d04a      	beq.n	8000aba <addChildNodeToParent+0xa6>
		return;
	if(parentNode->children == NULL){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d10e      	bne.n	8000a4a <addChildNodeToParent+0x36>
		parentNode->children = (struct threadNode**) malloc(sizeof(struct threadNode*));
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f007 fdc7 	bl	80085c0 <malloc>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	609a      	str	r2, [r3, #8]
		parentNode->childCount = 1;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
		parentNode->children[0] = child;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e038      	b.n	8000abc <addChildNodeToParent+0xa8>
	}
	else{
		parentNode->childCount += 1;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60da      	str	r2, [r3, #12]
		struct threadNode** temp = parentNode->children;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	60bb      	str	r3, [r7, #8]
		parentNode->children = (struct threadNode**) malloc(sizeof(struct threadNode*) * parentNode->childCount);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f007 fdad 	bl	80085c0 <malloc>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < parentNode->childCount - 1; i++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	e00d      	b.n	8000a90 <addChildNodeToParent+0x7c>
			parentNode->children[i] = temp[i];
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	441a      	add	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6899      	ldr	r1, [r3, #8]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	440b      	add	r3, r1
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < parentNode->childCount - 1; i++){
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbeb      	blt.n	8000a74 <addChildNodeToParent+0x60>
		}
		parentNode->children[parentNode->childCount - 1] = child;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	601a      	str	r2, [r3, #0]
		free(temp);
 8000ab2:	68b8      	ldr	r0, [r7, #8]
 8000ab4:	f007 fd8c 	bl	80085d0 <free>
 8000ab8:	e000      	b.n	8000abc <addChildNodeToParent+0xa8>
		return;
 8000aba:	bf00      	nop
	}
}
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <removeChildNodeFromParent>:

void removeChildNodeFromParent(struct threadNode* parentNode, struct threadNode* doomed){
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
	parentNode->childCount -= 1;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	1e5a      	subs	r2, r3, #1
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60da      	str	r2, [r3, #12]
	struct threadNode** temp = parentNode->children;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	60fb      	str	r3, [r7, #12]
	parentNode->children = (struct threadNode**) malloc(sizeof(struct threadNode*) * parentNode->childCount);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f007 fd6c 	bl	80085c0 <malloc>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	609a      	str	r2, [r3, #8]
	int j = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < parentNode->childCount + 1; i++){
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	e01a      	b.n	8000b30 <removeChildNodeFromParent+0x6e>
		if(temp[i] == doomed){
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d00e      	beq.n	8000b28 <removeChildNodeFromParent+0x66>
			continue;
		}
		parentNode->children[j] = temp[i];
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	441a      	add	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6899      	ldr	r1, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	6812      	ldr	r2, [r2, #0]
 8000b1e:	601a      	str	r2, [r3, #0]
		j++;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e000      	b.n	8000b2a <removeChildNodeFromParent+0x68>
			continue;
 8000b28:	bf00      	nop
	for(int i = 0; i < parentNode->childCount + 1; i++){
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	dddf      	ble.n	8000afa <removeChildNodeFromParent+0x38>
	}
	free(temp);
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f007 fd48 	bl	80085d0 <free>
}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <initializeThreadNode>:

void checkMainModuleNodesStatus(){

}

void initializeThreadNode(struct threadNode* parent, osThreadId_t handle, struct threadInfo* theInfo){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	struct threadNode* theNode = (struct threadNode*)malloc(sizeof(struct threadNode));
 8000b54:	201c      	movs	r0, #28
 8000b56:	f007 fd33 	bl	80085c0 <malloc>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	617b      	str	r3, [r7, #20]
	theNode->parent = parent;
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	601a      	str	r2, [r3, #0]
	theNode->handle = handle;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	605a      	str	r2, [r3, #4]
	theNode->children = NULL;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
	theNode->childCount = 0;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
	theNode->threadState = theInfo->threadState;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	611a      	str	r2, [r3, #16]
	theNode->threadPriority = theInfo->threadPriority;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	615a      	str	r2, [r3, #20]
	theNode->threadName = theInfo->threadName;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	619a      	str	r2, [r3, #24]
	if(parent == NULL)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d103      	bne.n	8000b9c <initializeThreadNode+0x54>
			head = theNode;
 8000b94:	4a05      	ldr	r2, [pc, #20]	; (8000bac <initializeThreadNode+0x64>)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	6013      	str	r3, [r2, #0]
	else
		addChildNodeToParent(parent, theNode);

}
 8000b9a:	e003      	b.n	8000ba4 <initializeThreadNode+0x5c>
		addChildNodeToParent(parent, theNode);
 8000b9c:	6979      	ldr	r1, [r7, #20]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff ff38 	bl	8000a14 <addChildNodeToParent>
}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200027fc 	.word	0x200027fc

08000bb0 <childCount>:
	sendUartMessage(" children", 9);
	sendUartMessage("\n", 1);
	sendUartMessage("\r", 1);
}

int childCount(struct threadNode* theNode){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	return theNode->childCount;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <startThread>:

// Function that puts thread information into a struct of type threadInfo, starts
// the thread, and returns the struct. Requires a function pointer to the function
// the new thread will run, the priority to set the new thread to, the name of the
// new thread, and the stack size of the new thread.
void startThread(void (*funPtr), int tp, char* tn, int stackSize){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b092      	sub	sp, #72	; 0x48
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
	struct threadInfo info;
	info.threadPriority = tp;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	info.threadName = tn;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	643b      	str	r3, [r7, #64]	; 0x40
	osThreadAttr_t threadAttributes = {
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2224      	movs	r2, #36	; 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 fd08 	bl	80085fc <memset>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = tn,
			.priority = (osPriority_t) tp,
			.stack_size = stackSize
	};
	osThreadId_t threadHandle;
	threadHandle = osThreadNew(funPtr, NULL, &threadAttributes);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f107 0214 	add.w	r2, r7, #20
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fe97 	bl	8005934 <osThreadNew>
 8000c06:	6478      	str	r0, [r7, #68]	; 0x44
	if(head == NULL){
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <startThread+0x84>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <startThread+0x5c>
		initializeThreadNode(NULL, osThreadGetId(), &info);
 8000c10:	f004 ff36 	bl	8005a80 <osThreadGetId>
 8000c14:	4601      	mov	r1, r0
 8000c16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff ff93 	bl	8000b48 <initializeThreadNode>
	}
	else{
		initializeThreadNode(findNode(osThreadGetId()), threadHandle, &info);
		findNode(threadHandle);
	}
	return;
 8000c22:	e00f      	b.n	8000c44 <startThread+0x7c>
		initializeThreadNode(findNode(osThreadGetId()), threadHandle, &info);
 8000c24:	f004 ff2c 	bl	8005a80 <osThreadGetId>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f88a 	bl	8000d44 <findNode>
 8000c30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c34:	461a      	mov	r2, r3
 8000c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000c38:	f7ff ff86 	bl	8000b48 <initializeThreadNode>
		findNode(threadHandle);
 8000c3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c3e:	f000 f881 	bl	8000d44 <findNode>
	return;
 8000c42:	bf00      	nop
}
 8000c44:	3748      	adds	r7, #72	; 0x48
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200027fc 	.word	0x200027fc

08000c50 <newTreeQueue>:
		sendUartMessage("\r", 1);
		sendUartMessage("I am Main", 9);
	}
}

struct treeQueue* newTreeQueue(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	struct treeQueue *queue = (struct treeQueue*) malloc(sizeof(struct treeQueue));
 8000c56:	2014      	movs	r0, #20
 8000c58:	f007 fcb2 	bl	80085c0 <malloc>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	607b      	str	r3, [r7, #4]
	queue->maxSize = 100;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2264      	movs	r2, #100	; 0x64
 8000c64:	601a      	str	r2, [r3, #0]
	queue->items = (struct threadNode**)malloc(sizeof(struct threadNode*) * 100);
 8000c66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000c6a:	f007 fca9 	bl	80085c0 <malloc>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	611a      	str	r2, [r3, #16]
	queue->itemCount = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
	queue->readIndex = 0;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
	queue->writeIndex = 0;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
	return queue;
 8000c88:	687b      	ldr	r3, [r7, #4]
};
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <enqueue>:

void enqueue(struct treeQueue* queue, struct threadNode* toAdd){
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	if(queue->itemCount == queue->maxSize){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d01d      	beq.n	8000ce4 <enqueue+0x52>
		return;
	}
	//sendUartMessage("\n", 1);
	//sendUartMessage("\r", 1);
	//sendUartMessage(toAdd->threadName, 3);
	queue->items[queue->writeIndex] = toAdd;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	601a      	str	r2, [r3, #0]
	queue->writeIndex++;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60da      	str	r2, [r3, #12]
	queue->itemCount++;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	605a      	str	r2, [r3, #4]
	queue->writeIndex = queue->writeIndex % queue->maxSize;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	fb93 f1f2 	sdiv	r1, r3, r2
 8000cd8:	fb02 f201 	mul.w	r2, r2, r1
 8000cdc:	1a9a      	subs	r2, r3, r2
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60da      	str	r2, [r3, #12]
	//sendUartMessage("\n", 1);
	//sendUartMessage("\r", 1);
	//sendUartMessage(queue->items[queue->writeIndex-1]->threadName, 3);
	return;
 8000ce2:	e000      	b.n	8000ce6 <enqueue+0x54>
		return;
 8000ce4:	bf00      	nop
}
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <dequeue>:

struct threadNode* dequeue(struct treeQueue* queue){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if(queue->itemCount == 0){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <dequeue+0x14>

		return NULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e018      	b.n	8000d36 <dequeue+0x46>
	}
	struct threadNode* temp = queue->items[queue->readIndex];
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	60fb      	str	r3, [r7, #12]
	queue->readIndex++;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
	queue->readIndex = queue->readIndex % queue->maxSize;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6812      	ldr	r2, [r2, #0]
 8000d26:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d2a:	fb02 f201 	mul.w	r2, r2, r1
 8000d2e:	1a9a      	subs	r2, r3, r2
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	609a      	str	r2, [r3, #8]
	return temp;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <findNode>:

struct threadNode* findNode(osThreadId_t handle){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if(handle == NULL){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <findNode+0x12>
			return NULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e037      	b.n	8000dc6 <findNode+0x82>
		}
	if(head->handle == handle){
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <findNode+0x8c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d102      	bne.n	8000d68 <findNode+0x24>
		//sendUartMessage("head", 4);
		//sendUartMessage("\n", 1);
		//sendUartMessage("\r", 1);
		return head;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <findNode+0x8c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	e02e      	b.n	8000dc6 <findNode+0x82>
	}
	struct treeQueue* theQueue = newTreeQueue();
 8000d68:	f7ff ff72 	bl	8000c50 <newTreeQueue>
 8000d6c:	6138      	str	r0, [r7, #16]
	enqueue(theQueue, head);
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <findNode+0x8c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	6938      	ldr	r0, [r7, #16]
 8000d76:	f7ff ff8c 	bl	8000c92 <enqueue>
	struct threadNode* currentNode;
	while(theQueue->itemCount != 0){
 8000d7a:	e01f      	b.n	8000dbc <findNode+0x78>
		currentNode = dequeue(theQueue);
 8000d7c:	6938      	ldr	r0, [r7, #16]
 8000d7e:	f7ff ffb7 	bl	8000cf0 <dequeue>
 8000d82:	60f8      	str	r0, [r7, #12]
			//sendUartMessage("\n", 1);
			//sendUartMessage("\r", 1);
			//sendUartMessage("currentNode NULL", 16);
		//}
		//sendUartMessage(currentNode->threadName, 3);
		if(currentNode->handle == handle){
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d101      	bne.n	8000d92 <findNode+0x4e>
			//sendUartMessage(currentNode->threadName, 3);
			//sendUartMessage("\n", 1);
			//sendUartMessage("\r", 1);
			return currentNode;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	e019      	b.n	8000dc6 <findNode+0x82>
		}
		else{
			for(int i = 0; i < currentNode->childCount; i++){
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e00c      	b.n	8000db2 <findNode+0x6e>
				//sendUartMessage(currentNode->children[i]->threadName, 3);
				enqueue(theQueue, currentNode->children[i]);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	6938      	ldr	r0, [r7, #16]
 8000da8:	f7ff ff73 	bl	8000c92 <enqueue>
			for(int i = 0; i < currentNode->childCount; i++){
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbed      	blt.n	8000d98 <findNode+0x54>
	while(theQueue->itemCount != 0){
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1db      	bne.n	8000d7c <findNode+0x38>
		}
	}
	//sendUartMessage("\n", 1);
	//sendUartMessage("\r", 1);
	//sendUartMessage("NULL", 4);
	return NULL;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200027fc 	.word	0x200027fc

08000dd4 <killThread>:

void killThread(struct threadNode* theNode){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	if(theNode->children == NULL){
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d113      	bne.n	8000e0c <killThread+0x38>
			removeChildNodeFromParent(theNode->parent, theNode);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fe69 	bl	8000ac2 <removeChildNodeFromParent>
			osThreadTerminate(theNode->handle);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fe4f 	bl	8005a98 <osThreadTerminate>
			free(theNode->children);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f007 fbe6 	bl	80085d0 <free>
			free(theNode);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f007 fbe3 	bl	80085d0 <free>
			return;
 8000e0a:	e027      	b.n	8000e5c <killThread+0x88>
	}
	else{
		for(int i = 0; i < theNode->childCount; i++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e00b      	b.n	8000e2a <killThread+0x56>
			killThread(theNode->children[i]);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ffd8 	bl	8000dd4 <killThread>
		for(int i = 0; i < theNode->childCount; i++){
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbee      	blt.n	8000e12 <killThread+0x3e>
		}
	}
	removeChildNodeFromParent(theNode->parent, theNode);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe41 	bl	8000ac2 <removeChildNodeFromParent>
	osThreadTerminate(theNode->handle);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 fe27 	bl	8005a98 <osThreadTerminate>
	free(theNode->children);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f007 fbbe 	bl	80085d0 <free>
	free(theNode);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f007 fbbb 	bl	80085d0 <free>
	return;
 8000e5a:	bf00      	nop
}
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <printAllThreadInfo>:

int verifyAllAlive(){

}

void printAllThreadInfo(){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	sendUartMessage("\n", 1);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	481b      	ldr	r0, [pc, #108]	; (8000edc <printAllThreadInfo+0x78>)
 8000e6e:	f000 fb65 	bl	800153c <sendUartMessage>
	sendUartMessage("\r", 1);
 8000e72:	2101      	movs	r1, #1
 8000e74:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <printAllThreadInfo+0x7c>)
 8000e76:	f000 fb61 	bl	800153c <sendUartMessage>
	sendUartMessage("I am the: ", 10);
 8000e7a:	210a      	movs	r1, #10
 8000e7c:	4819      	ldr	r0, [pc, #100]	; (8000ee4 <printAllThreadInfo+0x80>)
 8000e7e:	f000 fb5d 	bl	800153c <sendUartMessage>
	sendUartMessage(head->threadName, 4);
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <printAllThreadInfo+0x84>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	2104      	movs	r1, #4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fb56 	bl	800153c <sendUartMessage>
	for(int i = 0; i < head->childCount; i++){
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	e016      	b.n	8000ec4 <printAllThreadInfo+0x60>
		sendUartMessage("\n", 1);
 8000e96:	2101      	movs	r1, #1
 8000e98:	4810      	ldr	r0, [pc, #64]	; (8000edc <printAllThreadInfo+0x78>)
 8000e9a:	f000 fb4f 	bl	800153c <sendUartMessage>
		sendUartMessage("\r", 1);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <printAllThreadInfo+0x7c>)
 8000ea2:	f000 fb4b 	bl	800153c <sendUartMessage>
		sendUartMessage(head->children[i]->threadName, 3);
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <printAllThreadInfo+0x84>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fb3f 	bl	800153c <sendUartMessage>
	for(int i = 0; i < head->childCount; i++){
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <printAllThreadInfo+0x84>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbe2      	blt.n	8000e96 <printAllThreadInfo+0x32>
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	080087bc 	.word	0x080087bc
 8000ee0:	080087c0 	.word	0x080087c0
 8000ee4:	08008834 	.word	0x08008834
 8000ee8:	200027fc 	.word	0x200027fc

08000eec <mainThread>:
//UART_HandleTypeDef huart3;
//DMA_HandleTypeDef hdma_lpuart1_rx;
//SPI_HandleTypeDef hspi1;
//PCD_HandleTypeDef hpcd_USB_OTG_FS;

void mainThread(void *argument){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	int mainProcessCount = 2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
	//sendUartMessage("\n", 1);
	//sendUartMessage("\r", 1);
	//sendUartMessage("Starting Memory thread", 22);
	//sendUartMessage("\n", 1);
	//sendUartMessage("\r", 1);
	startThread(test1, osPriorityLow, "Mem", 4*64);
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <mainThread+0x70>)
 8000efe:	2108      	movs	r1, #8
 8000f00:	4817      	ldr	r0, [pc, #92]	; (8000f60 <mainThread+0x74>)
 8000f02:	f7ff fe61 	bl	8000bc8 <startThread>
	//checkChildrenDebug(osThreadGetId());
	//sendUartMessage("Starting GPS thread", 19);
	//sendUartMessage("\n", 1);
	//sendUartMessage("\r", 1);
	startThread(test2, osPriorityHigh, "GPS", 4*64);
 8000f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <mainThread+0x78>)
 8000f0c:	2128      	movs	r1, #40	; 0x28
 8000f0e:	4816      	ldr	r0, [pc, #88]	; (8000f68 <mainThread+0x7c>)
 8000f10:	f7ff fe5a 	bl	8000bc8 <startThread>
	//checkChildrenDebug(osThreadGetId());
	//printAllThreadInfo();

	for(;;){
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f18:	f005 fde2 	bl	8006ae0 <vTaskDelay>
		printAllThreadInfo();
 8000f1c:	f7ff ffa2 	bl	8000e64 <printAllThreadInfo>
		sendUartMessage("\n", 1);
 8000f20:	2101      	movs	r1, #1
 8000f22:	4812      	ldr	r0, [pc, #72]	; (8000f6c <mainThread+0x80>)
 8000f24:	f000 fb0a 	bl	800153c <sendUartMessage>
		sendUartMessage("\r", 1);
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <mainThread+0x84>)
 8000f2c:	f000 fb06 	bl	800153c <sendUartMessage>
		vTaskDelay(pdMS_TO_TICKS(5000));
 8000f30:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f34:	f005 fdd4 	bl	8006ae0 <vTaskDelay>
		killThread(findNode(osThreadGetId())->children[0]);
 8000f38:	f004 fda2 	bl	8005a80 <osThreadGetId>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff00 	bl	8000d44 <findNode>
 8000f44:	4603      	mov	r3, r0
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff42 	bl	8000dd4 <killThread>
		//printAllThreadInfo();
		//sendUartMessage("I live", 6);
		if(mainProcessCount != childCount(head)){
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <mainThread+0x88>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fe2b 	bl	8000bb0 <childCount>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000f5a:	e7db      	b.n	8000f14 <mainThread+0x28>
 8000f5c:	08008840 	.word	0x08008840
 8000f60:	08000f79 	.word	0x08000f79
 8000f64:	08008844 	.word	0x08008844
 8000f68:	08000fc1 	.word	0x08000fc1
 8000f6c:	08008848 	.word	0x08008848
 8000f70:	0800884c 	.word	0x0800884c
 8000f74:	200027fc 	.word	0x200027fc

08000f78 <test1>:
	}
}

//Test function
void test1(void *argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
//  sendUartMessage("Test 1", 6);
//  sendUartMessage("\n", 1);
//  sendUartMessage("\r", 1);
  for(;;)
  {
	sendUartMessage("\n", 1);
 8000f80:	2101      	movs	r1, #1
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <test1+0x3c>)
 8000f84:	f000 fada 	bl	800153c <sendUartMessage>
	sendUartMessage("\r", 1);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <test1+0x40>)
 8000f8c:	f000 fad6 	bl	800153c <sendUartMessage>
	sendUartMessage("BBBBBB", 6);
 8000f90:	2106      	movs	r1, #6
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <test1+0x44>)
 8000f94:	f000 fad2 	bl	800153c <sendUartMessage>
	sendUartMessage("\n", 1);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <test1+0x3c>)
 8000f9c:	f000 face 	bl	800153c <sendUartMessage>
	sendUartMessage("\r", 1);
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <test1+0x40>)
 8000fa4:	f000 faca 	bl	800153c <sendUartMessage>
    vTaskDelay(pdMS_TO_TICKS(1000));
 8000fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fac:	f005 fd98 	bl	8006ae0 <vTaskDelay>
	sendUartMessage("\n", 1);
 8000fb0:	e7e6      	b.n	8000f80 <test1+0x8>
 8000fb2:	bf00      	nop
 8000fb4:	08008848 	.word	0x08008848
 8000fb8:	0800884c 	.word	0x0800884c
 8000fbc:	08008850 	.word	0x08008850

08000fc0 <test2>:
  }
}

//Test function
void test2(void *argument)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
//	sendUartMessage("\n", 1);
//	sendUartMessage("\r", 1);
	//startThread(test3, osPriorityHigh, "EXP", 4*64);
	for(;;)
	{
		sendUartMessage("\n", 1);
 8000fc8:	2101      	movs	r1, #1
 8000fca:	480c      	ldr	r0, [pc, #48]	; (8000ffc <test2+0x3c>)
 8000fcc:	f000 fab6 	bl	800153c <sendUartMessage>
		sendUartMessage("\r", 1);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	480b      	ldr	r0, [pc, #44]	; (8001000 <test2+0x40>)
 8000fd4:	f000 fab2 	bl	800153c <sendUartMessage>
		sendUartMessage("AAAAAA", 6);
 8000fd8:	2106      	movs	r1, #6
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <test2+0x44>)
 8000fdc:	f000 faae 	bl	800153c <sendUartMessage>
		sendUartMessage("\n", 1);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <test2+0x3c>)
 8000fe4:	f000 faaa 	bl	800153c <sendUartMessage>
		sendUartMessage("\r", 1);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <test2+0x40>)
 8000fec:	f000 faa6 	bl	800153c <sendUartMessage>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000ff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff4:	f005 fd74 	bl	8006ae0 <vTaskDelay>
		sendUartMessage("\n", 1);
 8000ff8:	e7e6      	b.n	8000fc8 <test2+0x8>
 8000ffa:	bf00      	nop
 8000ffc:	08008848 	.word	0x08008848
 8001000:	0800884c 	.word	0x0800884c
 8001004:	08008858 	.word	0x08008858

08001008 <startUart>:
uint8_t UART1_txBuffer[160] = {0};
uint8_t UART1_rxBuffer[160] = {0};


// Function containing calls to all necessary UART initialization functions
void startUart(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800100c:	f000 f9be 	bl	800138c <MX_GPIO_Init>
	MX_DMA_Init();
 8001010:	f000 f992 	bl	8001338 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 8001014:	f000 f890 	bl	8001138 <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init();
 8001018:	f000 f8da 	bl	80011d0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800101c:	f000 f962 	bl	80012e4 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8001020:	f000 f922 	bl	8001268 <MX_SPI1_Init>
	HAL_UART_Receive_DMA(&hlpuart1, UART1_rxBuffer, 160);
 8001024:	22a0      	movs	r2, #160	; 0xa0
 8001026:	4903      	ldr	r1, [pc, #12]	; (8001034 <startUart+0x2c>)
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <startUart+0x30>)
 800102a:	f003 fac9 	bl	80045c0 <HAL_UART_Receive_DMA>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000094 	.word	0x20000094
 8001038:	20002ce0 	.word	0x20002ce0

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0bc      	sub	sp, #240	; 0xf0
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001046:	2244      	movs	r2, #68	; 0x44
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f007 fad6 	bl	80085fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2294      	movs	r2, #148	; 0x94
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f007 fac8 	bl	80085fc <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800106c:	2000      	movs	r0, #0
 800106e:	f001 f965 	bl	800233c <HAL_PWREx_ControlVoltageScaling>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001078:	f7ff fa5c 	bl	8000534 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800107c:	2322      	movs	r3, #34	; 0x22
 800107e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800108a:	2301      	movs	r3, #1
 800108c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2340      	movs	r3, #64	; 0x40
 8001092:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80010a8:	231e      	movs	r3, #30
 80010aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 f9fd 	bl	80024c4 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010d0:	f7ff fa30 	bl	8000534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010f8:	2105      	movs	r1, #5
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fe08 	bl	8002d10 <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001106:	f7ff fa15 	bl	8000534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 800110a:	f242 0324 	movw	r3, #8228	; 0x2024
 800110e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001110:	2300      	movs	r3, #0
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001114:	2300      	movs	r3, #0
 8001116:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001118:	2300      	movs	r3, #0
 800111a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f8da 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800112a:	f7ff fa03 	bl	8000534 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	37f0      	adds	r7, #240	; 0xf0
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800113e:	4a23      	ldr	r2, [pc, #140]	; (80011cc <MX_LPUART1_UART_Init+0x94>)
 8001140:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001144:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001148:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001180:	4811      	ldr	r0, [pc, #68]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001182:	f003 f935 	bl	80043f0 <HAL_UART_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800118c:	f7ff f9d2 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 8001194:	f003 ffe7 	bl	8005166 <HAL_UARTEx_SetTxFifoThreshold>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800119e:	f7ff f9c9 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 80011a6:	f004 f81c 	bl	80051e2 <HAL_UARTEx_SetRxFifoThreshold>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011b0:	f7ff f9c0 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_LPUART1_UART_Init+0x90>)
 80011b6:	f003 ff9d 	bl	80050f4 <HAL_UARTEx_DisableFifoMode>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011c0:	f7ff f9b8 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20002ce0 	.word	0x20002ce0
 80011cc:	40008000 	.word	0x40008000

080011d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <MX_USART3_UART_Init+0x94>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_USART3_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_USART3_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_USART3_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_USART3_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800121a:	f003 f8e9 	bl	80043f0 <HAL_UART_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001224:	f7ff f986 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800122c:	f003 ff9b 	bl	8005166 <HAL_UARTEx_SetTxFifoThreshold>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001236:	f7ff f97d 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800123e:	f003 ffd0 	bl	80051e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001248:	f7ff f974 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_USART3_UART_Init+0x90>)
 800124e:	f003 ff51 	bl	80050f4 <HAL_UARTEx_DisableFifoMode>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001258:	f7ff f96c 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000284c 	.word	0x2000284c
 8001264:	40004800 	.word	0x40004800

08001268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_SPI1_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_SPI1_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_SPI1_Init+0x74>)
 8001274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_SPI1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SPI1_Init+0x74>)
 8001282:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001286:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_SPI1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_SPI1_Init+0x74>)
 8001296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI1_Init+0x74>)
 800129e:	2208      	movs	r2, #8
 80012a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_SPI1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI1_Init+0x74>)
 80012b6:	2207      	movs	r2, #7
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_SPI1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI1_Init+0x74>)
 80012c2:	2208      	movs	r2, #8
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_SPI1_Init+0x74>)
 80012c8:	f002 fd1e 	bl	8003d08 <HAL_SPI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f7ff f92f 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20002dcc 	.word	0x20002dcc
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012f2:	2206      	movs	r2, #6
 80012f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012fe:	2201      	movs	r2, #1
 8001300:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001310:	2201      	movs	r2, #1
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800131c:	2201      	movs	r2, #1
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001322:	f000 fea3 	bl	800206c <HAL_PCD_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800132c:	f7ff f902 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200028d8 	.word	0x200028d8

08001338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_DMA_Init+0x50>)
 8001340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001342:	4a11      	ldr	r2, [pc, #68]	; (8001388 <MX_DMA_Init+0x50>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6493      	str	r3, [r2, #72]	; 0x48
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_DMA_Init+0x50>)
 800134c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_DMA_Init+0x50>)
 8001358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <MX_DMA_Init+0x50>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6493      	str	r3, [r2, #72]	; 0x48
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_DMA_Init+0x50>)
 8001364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	200b      	movs	r0, #11
 8001374:	f000 fa34 	bl	80017e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001378:	200b      	movs	r0, #11
 800137a:	f000 fa4d 	bl	8001818 <HAL_NVIC_EnableIRQ>

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b52      	ldr	r3, [pc, #328]	; (80014ec <MX_GPIO_Init+0x160>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a51      	ldr	r2, [pc, #324]	; (80014ec <MX_GPIO_Init+0x160>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <MX_GPIO_Init+0x160>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <MX_GPIO_Init+0x160>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a4b      	ldr	r2, [pc, #300]	; (80014ec <MX_GPIO_Init+0x160>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <MX_GPIO_Init+0x160>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <MX_GPIO_Init+0x160>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a45      	ldr	r2, [pc, #276]	; (80014ec <MX_GPIO_Init+0x160>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <MX_GPIO_Init+0x160>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <MX_GPIO_Init+0x160>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a3f      	ldr	r2, [pc, #252]	; (80014ec <MX_GPIO_Init+0x160>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <MX_GPIO_Init+0x160>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <MX_GPIO_Init+0x160>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a39      	ldr	r2, [pc, #228]	; (80014ec <MX_GPIO_Init+0x160>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <MX_GPIO_Init+0x160>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <MX_GPIO_Init+0x160>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a33      	ldr	r2, [pc, #204]	; (80014ec <MX_GPIO_Init+0x160>)
 8001420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b31      	ldr	r3, [pc, #196]	; (80014ec <MX_GPIO_Init+0x160>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001432:	f001 f837 	bl	80024a4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800143c:	482c      	ldr	r0, [pc, #176]	; (80014f0 <MX_GPIO_Init+0x164>)
 800143e:	f000 fdfd 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001448:	482a      	ldr	r0, [pc, #168]	; (80014f4 <MX_GPIO_Init+0x168>)
 800144a:	f000 fdf7 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2120      	movs	r1, #32
 8001452:	4829      	ldr	r0, [pc, #164]	; (80014f8 <MX_GPIO_Init+0x16c>)
 8001454:	f000 fdf2 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	4b27      	ldr	r3, [pc, #156]	; (80014fc <MX_GPIO_Init+0x170>)
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	4824      	ldr	r0, [pc, #144]	; (8001500 <MX_GPIO_Init+0x174>)
 800146e:	f000 fc53 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001472:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	4819      	ldr	r0, [pc, #100]	; (80014f0 <MX_GPIO_Init+0x164>)
 800148c:	f000 fc44 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4812      	ldr	r0, [pc, #72]	; (80014f4 <MX_GPIO_Init+0x168>)
 80014aa:	f000 fc35 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014ae:	2320      	movs	r3, #32
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_GPIO_Init+0x16c>)
 80014c6:	f000 fc27 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014ca:	2340      	movs	r3, #64	; 0x40
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_GPIO_Init+0x16c>)
 80014de:	f000 fc1b 	bl	8001d18 <HAL_GPIO_Init>

}
 80014e2:	bf00      	nop
 80014e4:	3730      	adds	r7, #48	; 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000c00 	.word	0x48000c00
 80014f8:	48001800 	.word	0x48001800
 80014fc:	10110000 	.word	0x10110000
 8001500:	48000800 	.word	0x48000800

08001504 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001516:	f000 f867 	bl	80015e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40000400 	.word	0x40000400

08001528 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <sendUartMessage>:

// Function that takes in a char pointer with a UART message to transmit and
// the length of said message
void sendUartMessage(char* message, int length){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)message, length, HAL_MAX_DELAY);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b29a      	uxth	r2, r3
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <sendUartMessage+0x24>)
 8001552:	f002 ff9d 	bl	8004490 <HAL_UART_Transmit>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20002ce0 	.word	0x20002ce0

08001564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001568:	f7ff fa1e 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800156c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800156e:	e003      	b.n	8001578 <LoopCopyDataInit>

08001570 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001572:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001574:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001576:	3104      	adds	r1, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800157c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800157e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001580:	d3f6      	bcc.n	8001570 <CopyDataInit>
	ldr	r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001584:	e002      	b.n	800158c <LoopFillZerobss>

08001586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001586:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001588:	f842 3b04 	str.w	r3, [r2], #4

0800158c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <LoopForever+0x16>)
	cmp	r2, r3
 800158e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001590:	d3f9      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f006 fff1 	bl	8008578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001596:	f7fe ffaf 	bl	80004f8 <main>

0800159a <LoopForever>:

LoopForever:
    b LoopForever
 800159a:	e7fe      	b.n	800159a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800159c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80015a0:	080088f8 	.word	0x080088f8
	ldr	r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015a8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80015ac:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80015b0:	20002e84 	.word	0x20002e84

080015b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_IRQHandler>

080015b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f902 	bl	80017ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff f936 	bl	8000838 <HAL_InitTick>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	e001      	b.n	80015dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d8:	f7fe ffb2 	bl	8000540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015dc:	79fb      	ldrb	r3, [r7, #7]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	20002e30 	.word	0x20002e30

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20002e30 	.word	0x20002e30

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff4c 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017f2:	f7ff ff61 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 80017f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f7ff ffb1 	bl	8001764 <NVIC_EncodePriority>
 8001802:	4602      	mov	r2, r0
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff80 	bl	8001710 <__NVIC_SetPriority>
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff54 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e08d      	b.n	8001962 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_DMA_Init+0x138>)
 800184e:	429a      	cmp	r2, r3
 8001850:	d80f      	bhi.n	8001872 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	4b45      	ldr	r3, [pc, #276]	; (8001970 <HAL_DMA_Init+0x13c>)
 800185a:	4413      	add	r3, r2
 800185c:	4a45      	ldr	r2, [pc, #276]	; (8001974 <HAL_DMA_Init+0x140>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	009a      	lsls	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a42      	ldr	r2, [pc, #264]	; (8001978 <HAL_DMA_Init+0x144>)
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
 8001870:	e00e      	b.n	8001890 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <HAL_DMA_Init+0x148>)
 800187a:	4413      	add	r3, r2
 800187c:	4a3d      	ldr	r2, [pc, #244]	; (8001974 <HAL_DMA_Init+0x140>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	009a      	lsls	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a3c      	ldr	r2, [pc, #240]	; (8001980 <HAL_DMA_Init+0x14c>)
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f9b6 	bl	8001c54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f0:	d102      	bne.n	80018f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800190c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d010      	beq.n	8001938 <HAL_DMA_Init+0x104>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d80c      	bhi.n	8001938 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f9d6 	bl	8001cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e008      	b.n	800194a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40020407 	.word	0x40020407
 8001970:	bffdfff8 	.word	0xbffdfff8
 8001974:	cccccccd 	.word	0xcccccccd
 8001978:	40020000 	.word	0x40020000
 800197c:	bffdfbf8 	.word	0xbffdfbf8
 8001980:	40020400 	.word	0x40020400

08001984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_DMA_Start_IT+0x20>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e066      	b.n	8001a72 <HAL_DMA_Start_IT+0xee>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d155      	bne.n	8001a64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f8fb 	bl	8001bd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 020e 	orr.w	r2, r2, #14
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e00f      	b.n	8001a1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0204 	bic.w	r2, r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 020a 	orr.w	r2, r2, #10
 8001a1a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a38:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a50:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e005      	b.n	8001a70 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f003 031c 	and.w	r3, r3, #28
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d026      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x7a>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d021      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0204 	bic.w	r2, r2, #4
 8001acc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f003 021c 	and.w	r2, r3, #28
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2104      	movs	r1, #4
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d071      	beq.n	8001bce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001af2:	e06c      	b.n	8001bce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	f003 031c 	and.w	r3, r3, #28
 8001afc:	2202      	movs	r2, #2
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d02e      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xec>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d029      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10b      	bne.n	8001b38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 020a 	bic.w	r2, r2, #10
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f003 021c 	and.w	r2, r3, #28
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2102      	movs	r1, #2
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d038      	beq.n	8001bce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b64:	e033      	b.n	8001bce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f003 031c 	and.w	r3, r3, #28
 8001b6e:	2208      	movs	r2, #8
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d02a      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x156>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d025      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 020e 	bic.w	r2, r2, #14
 8001b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f003 021c 	and.w	r2, r3, #28
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
}
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bee:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c00:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f003 021c 	and.w	r2, r3, #28
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d108      	bne.n	8001c38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c36:	e007      	b.n	8001c48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d80a      	bhi.n	8001c7e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c74:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6493      	str	r3, [r2, #72]	; 0x48
 8001c7c:	e007      	b.n	8001c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	009a      	lsls	r2, r3, #2
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c88:	4413      	add	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3b08      	subs	r3, #8
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2201      	movs	r2, #1
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40020407 	.word	0x40020407
 8001cc4:	4002081c 	.word	0x4002081c
 8001cc8:	cccccccd 	.word	0xcccccccd
 8001ccc:	40020880 	.word	0x40020880

08001cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cf2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	1000823f 	.word	0x1000823f
 8001d14:	40020940 	.word	0x40020940

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e166      	b.n	8001ff6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8158 	beq.w	8001ff0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d00b      	beq.n	8001d60 <HAL_GPIO_Init+0x48>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d007      	beq.n	8001d60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d54:	2b11      	cmp	r3, #17
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b12      	cmp	r3, #18
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0xea>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b12      	cmp	r3, #18
 8001e00:	d123      	bne.n	8001e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	6939      	ldr	r1, [r7, #16]
 8001e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0203 	and.w	r2, r3, #3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80b2 	beq.w	8001ff0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8c:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_GPIO_Init+0x2fc>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	4a60      	ldr	r2, [pc, #384]	; (8002014 <HAL_GPIO_Init+0x2fc>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6613      	str	r3, [r2, #96]	; 0x60
 8001e98:	4b5e      	ldr	r3, [pc, #376]	; (8002014 <HAL_GPIO_Init+0x2fc>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ea4:	4a5c      	ldr	r2, [pc, #368]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ece:	d02b      	beq.n	8001f28 <HAL_GPIO_Init+0x210>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x304>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d025      	beq.n	8001f24 <HAL_GPIO_Init+0x20c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_GPIO_Init+0x308>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d01f      	beq.n	8001f20 <HAL_GPIO_Init+0x208>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_GPIO_Init+0x30c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d019      	beq.n	8001f1c <HAL_GPIO_Init+0x204>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a4f      	ldr	r2, [pc, #316]	; (8002028 <HAL_GPIO_Init+0x310>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x200>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a4e      	ldr	r2, [pc, #312]	; (800202c <HAL_GPIO_Init+0x314>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1fc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a4d      	ldr	r2, [pc, #308]	; (8002030 <HAL_GPIO_Init+0x318>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1f8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_GPIO_Init+0x31c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1f4>
 8001f08:	2307      	movs	r3, #7
 8001f0a:	e00e      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	e00c      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f10:	2306      	movs	r3, #6
 8001f12:	e00a      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f14:	2305      	movs	r3, #5
 8001f16:	e008      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f3a:	4937      	ldr	r1, [pc, #220]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f48:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f6c:	4a32      	ldr	r2, [pc, #200]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f96:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f9c:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <HAL_GPIO_Init+0x320>)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	f47f ae91 	bne.w	8001d28 <HAL_GPIO_Init+0x10>
  }
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	48000400 	.word	0x48000400
 8002020:	48000800 	.word	0x48000800
 8002024:	48000c00 	.word	0x48000c00
 8002028:	48001000 	.word	0x48001000
 800202c:	48001400 	.word	0x48001400
 8002030:	48001800 	.word	0x48001800
 8002034:	48001c00 	.word	0x48001c00
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002058:	e002      	b.n	8002060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	b08f      	sub	sp, #60	; 0x3c
 8002070:	af0a      	add	r7, sp, #40	; 0x28
 8002072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e116      	b.n	80022ac <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7fe fb61 	bl	8000760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2203      	movs	r2, #3
 80020a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 f989 	bl	80053d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	687e      	ldr	r6, [r7, #4]
 80020ca:	466d      	mov	r5, sp
 80020cc:	f106 0410 	add.w	r4, r6, #16
 80020d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e0:	1d33      	adds	r3, r6, #4
 80020e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	f003 f923 	bl	8005330 <USB_CoreInit>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0d7      	b.n	80022ac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f003 f977 	bl	80053f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e04a      	b.n	80021a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	333d      	adds	r3, #61	; 0x3d
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	333c      	adds	r3, #60	; 0x3c
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	b298      	uxth	r0, r3
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	3342      	adds	r3, #66	; 0x42
 800214a:	4602      	mov	r2, r0
 800214c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	333f      	adds	r3, #63	; 0x3f
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3344      	adds	r3, #68	; 0x44
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3348      	adds	r3, #72	; 0x48
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3350      	adds	r3, #80	; 0x50
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	3301      	adds	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d3af      	bcc.n	800210e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e044      	b.n	800223e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	3301      	adds	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d3b5      	bcc.n	80021b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	687e      	ldr	r6, [r7, #4]
 8002250:	466d      	mov	r5, sp
 8002252:	f106 0410 	add.w	r4, r6, #16
 8002256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002262:	e885 0003 	stmia.w	r5, {r0, r1}
 8002266:	1d33      	adds	r3, r6, #4
 8002268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226a:	6838      	ldr	r0, [r7, #0]
 800226c:	f003 f8ee 	bl	800544c <USB_DevInit>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e014      	b.n	80022ac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2b01      	cmp	r3, #1
 8002298:	d102      	bne.n	80022a0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f80a 	bl	80022b4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fa7e 	bl	80057a6 <USB_DevDisconnect>

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e6:	f043 0303 	orr.w	r3, r3, #3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230c:	d102      	bne.n	8002314 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800230e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002312:	e00b      	b.n	800232c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002322:	d102      	bne.n	800232a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002328:	e000      	b.n	800232c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800232a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40007000 	.word	0x40007000

0800233c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d141      	bne.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800234a:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002356:	d131      	bne.n	80023bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002358:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800235e:	4a46      	ldr	r2, [pc, #280]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002368:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002370:	4a41      	ldr	r2, [pc, #260]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002378:	4b40      	ldr	r3, [pc, #256]	; (800247c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2232      	movs	r2, #50	; 0x32
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	4a3f      	ldr	r2, [pc, #252]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	3301      	adds	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800238e:	e002      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3b01      	subs	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002396:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a2:	d102      	bne.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f2      	bne.n	8002390 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023aa:	4b33      	ldr	r3, [pc, #204]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b6:	d158      	bne.n	800246a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e057      	b.n	800246c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023bc:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c2:	4a2d      	ldr	r2, [pc, #180]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023cc:	e04d      	b.n	800246a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d141      	bne.n	800245a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e2:	d131      	bne.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ea:	4a23      	ldr	r2, [pc, #140]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023fc:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002402:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2232      	movs	r2, #50	; 0x32
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	0c9b      	lsrs	r3, r3, #18
 8002416:	3301      	adds	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800241a:	e002      	b.n	8002422 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3b01      	subs	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242e:	d102      	bne.n	8002436 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f2      	bne.n	800241c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d112      	bne.n	800246a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e011      	b.n	800246c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002458:	e007      	b.n	800246a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002468:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40007000 	.word	0x40007000
 800247c:	20000000 	.word	0x20000000
 8002480:	431bde83 	.word	0x431bde83

08002484 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002492:	6053      	str	r3, [r2, #4]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40007000 	.word	0x40007000

080024a4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b2:	6053      	str	r3, [r2, #4]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40007000 	.word	0x40007000

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f000 bc16 	b.w	8002d04 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d8:	4ba0      	ldr	r3, [pc, #640]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e2:	4b9e      	ldr	r3, [pc, #632]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80e4 	beq.w	80026c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_RCC_OscConfig+0x4c>
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	f040 808b 	bne.w	800261e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 8087 	bne.w	800261e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002510:	4b92      	ldr	r3, [pc, #584]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x64>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e3ed      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_RCC_OscConfig+0x7e>
 8002538:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002540:	e005      	b.n	800254e <HAL_RCC_OscConfig+0x8a>
 8002542:	4b86      	ldr	r3, [pc, #536]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254e:	4293      	cmp	r3, r2
 8002550:	d223      	bcs.n	800259a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fdfc 	bl	8003154 <RCC_SetFlashLatencyFromMSIRange>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e3ce      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002566:	4b7d      	ldr	r3, [pc, #500]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7c      	ldr	r2, [pc, #496]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b7a      	ldr	r3, [pc, #488]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4977      	ldr	r1, [pc, #476]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002584:	4b75      	ldr	r3, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	4972      	ldr	r1, [pc, #456]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e025      	b.n	80025e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259a:	4b70      	ldr	r3, [pc, #448]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6f      	ldr	r2, [pc, #444]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	496a      	ldr	r1, [pc, #424]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	4965      	ldr	r1, [pc, #404]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fdbc 	bl	8003154 <RCC_SetFlashLatencyFromMSIRange>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e38e      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e6:	f000 fcbf 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b5b      	ldr	r3, [pc, #364]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	495a      	ldr	r1, [pc, #360]	; (8002760 <HAL_RCC_OscConfig+0x29c>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_OscConfig+0x2a0>)
 8002604:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002606:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_RCC_OscConfig+0x2a4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe f914 	bl	8000838 <HAL_InitTick>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d052      	beq.n	80026c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	e372      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d032      	beq.n	800268c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002626:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002632:	f7fe ffed 	bl	8001610 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263a:	f7fe ffe9 	bl	8001610 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e35b      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800264c:	4b43      	ldr	r3, [pc, #268]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002658:	4b40      	ldr	r3, [pc, #256]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3f      	ldr	r2, [pc, #252]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b3d      	ldr	r3, [pc, #244]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	493a      	ldr	r1, [pc, #232]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002676:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	4935      	ldr	r1, [pc, #212]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
 800268a:	e01a      	b.n	80026c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a32      	ldr	r2, [pc, #200]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002698:	f7fe ffba 	bl	8001610 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a0:	f7fe ffb6 	bl	8001610 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e328      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b2:	4b2a      	ldr	r3, [pc, #168]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1dc>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d073      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_OscConfig+0x21c>
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d10e      	bne.n	80026f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d10b      	bne.n	80026f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d063      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d15f      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e305      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x24c>
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e01d      	b.n	800274c <HAL_RCC_OscConfig+0x288>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x270>
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a0c      	ldr	r2, [pc, #48]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x288>
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_RCC_OscConfig+0x298>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <HAL_RCC_OscConfig+0x298>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe ff5c 	bl	8001610 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275a:	e010      	b.n	800277e <HAL_RCC_OscConfig+0x2ba>
 800275c:	40021000 	.word	0x40021000
 8002760:	08008888 	.word	0x08008888
 8002764:	20000000 	.word	0x20000000
 8002768:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe ff50 	bl	8001610 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e2c2      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277e:	4baf      	ldr	r3, [pc, #700]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x2a8>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe ff40 	bl	8001610 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe ff3c 	bl	8001610 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e2ae      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a6:	4ba5      	ldr	r3, [pc, #660]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x2d0>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d060      	beq.n	8002884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_OscConfig+0x310>
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d119      	bne.n	8002802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d116      	bne.n	8002802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d4:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x328>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e28b      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b93      	ldr	r3, [pc, #588]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	4990      	ldr	r1, [pc, #576]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002800:	e040      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d023      	beq.n	8002852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280a:	4b8c      	ldr	r3, [pc, #560]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a8b      	ldr	r2, [pc, #556]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fefb 	bl	8001610 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fef7 	bl	8001610 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e269      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	4b82      	ldr	r3, [pc, #520]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b7f      	ldr	r3, [pc, #508]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	497c      	ldr	r1, [pc, #496]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
 8002850:	e018      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b7a      	ldr	r3, [pc, #488]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a79      	ldr	r2, [pc, #484]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 8002858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe fed7 	bl	8001610 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7fe fed3 	bl	8001610 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e245      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002878:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d03c      	beq.n	800290a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002898:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289e:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe feb2 	bl	8001610 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe feae 	bl	8001610 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e220      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c2:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <HAL_RCC_OscConfig+0x3ec>
 80028d0:	e01b      	b.n	800290a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d2:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7fe fe95 	bl	8001610 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ea:	f7fe fe91 	bl	8001610 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e203      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028fc:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ef      	bne.n	80028ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80a6 	beq.w	8002a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800291c:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a43      	ldr	r2, [pc, #268]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <HAL_RCC_OscConfig+0x57c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d118      	bne.n	8002982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002950:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x57c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3a      	ldr	r2, [pc, #232]	; (8002a40 <HAL_RCC_OscConfig+0x57c>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295c:	f7fe fe58 	bl	8001610 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fe54 	bl	8001610 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1c6      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCC_OscConfig+0x57c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_RCC_OscConfig+0x4d8>
 800298a:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299a:	e024      	b.n	80029e6 <HAL_RCC_OscConfig+0x522>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d110      	bne.n	80029c6 <HAL_RCC_OscConfig+0x502>
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a20      	ldr	r2, [pc, #128]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c4:	e00f      	b.n	80029e6 <HAL_RCC_OscConfig+0x522>
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe fe0f 	bl	8001610 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fe0b 	bl	8001610 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e17b      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_OscConfig+0x578>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ed      	beq.n	80029f6 <HAL_RCC_OscConfig+0x532>
 8002a1a:	e01a      	b.n	8002a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fdf8 	bl	8001610 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a22:	e00f      	b.n	8002a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fdf4 	bl	8001610 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d906      	bls.n	8002a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e164      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a44:	4ba8      	ldr	r3, [pc, #672]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e8      	bne.n	8002a24 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4ba3      	ldr	r3, [pc, #652]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	4aa2      	ldr	r2, [pc, #648]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d03c      	beq.n	8002aea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a78:	4b9b      	ldr	r3, [pc, #620]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7e:	4a9a      	ldr	r2, [pc, #616]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fdc2 	bl	8001610 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a90:	f7fe fdbe 	bl	8001610 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e130      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aa2:	4b91      	ldr	r3, [pc, #580]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ef      	beq.n	8002a90 <HAL_RCC_OscConfig+0x5cc>
 8002ab0:	e01b      	b.n	8002aea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ab2:	4b8d      	ldr	r3, [pc, #564]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab8:	4a8b      	ldr	r2, [pc, #556]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fda5 	bl	8001610 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aca:	f7fe fda1 	bl	8001610 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e113      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002adc:	4b82      	ldr	r3, [pc, #520]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ef      	bne.n	8002aca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8107 	beq.w	8002d02 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	f040 80cb 	bne.w	8002c94 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002afe:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d12c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d123      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d11b      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d113      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d109      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	3b01      	subs	r3, #1
 8002b66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d06d      	beq.n	8002c48 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d068      	beq.n	8002c44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b72:	4b5d      	ldr	r3, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b7e:	4b5a      	ldr	r3, [pc, #360]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0ba      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a55      	ldr	r2, [pc, #340]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b9a:	f7fe fd39 	bl	8001610 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fd35 	bl	8001610 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0a7      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc0:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	4b49      	ldr	r3, [pc, #292]	; (8002cec <HAL_RCC_OscConfig+0x828>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bd0:	3a01      	subs	r2, #1
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bda:	0212      	lsls	r2, r2, #8
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002be2:	0852      	lsrs	r2, r2, #1
 8002be4:	3a01      	subs	r2, #1
 8002be6:	0552      	lsls	r2, r2, #21
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bee:	0852      	lsrs	r2, r2, #1
 8002bf0:	3a01      	subs	r2, #1
 8002bf2:	0652      	lsls	r2, r2, #25
 8002bf4:	4311      	orrs	r1, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bfa:	06d2      	lsls	r2, r2, #27
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	493a      	ldr	r1, [pc, #232]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c04:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a37      	ldr	r2, [pc, #220]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c10:	4b35      	ldr	r3, [pc, #212]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a34      	ldr	r2, [pc, #208]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c1c:	f7fe fcf8 	bl	8001610 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe fcf4 	bl	8001610 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e066      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c42:	e05e      	b.n	8002d02 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e05d      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d156      	bne.n	8002d02 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a23      	ldr	r2, [pc, #140]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c6c:	f7fe fcd0 	bl	8001610 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c74:	f7fe fccc 	bl	8001610 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e03e      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x7b0>
 8002c92:	e036      	b.n	8002d02 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	d031      	beq.n	8002cfe <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002cb8:	f023 0303 	bic.w	r3, r3, #3
 8002cbc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002cc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ccc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe fc9f 	bl	8001610 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe fc9b 	bl	8001610 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d905      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e00d      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_OscConfig+0x848>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ec      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x812>
 8002cfc:	e001      	b.n	8002d02 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e10f      	b.n	8002f48 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d28:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d910      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b86      	ldr	r3, [pc, #536]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 020f 	bic.w	r2, r3, #15
 8002d3e:	4984      	ldr	r1, [pc, #528]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0f7      	b.n	8002f48 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8089 	beq.w	8002e78 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d133      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	4b79      	ldr	r3, [pc, #484]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0e4      	b.n	8002f48 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d7e:	f000 fa43 	bl	8003208 <RCC_GetSysClockFreqFromPLLSource>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a74      	ldr	r2, [pc, #464]	; (8002f58 <HAL_RCC_ClockConfig+0x248>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d955      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d8a:	4b72      	ldr	r3, [pc, #456]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d96:	4b6f      	ldr	r3, [pc, #444]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d9e:	4a6d      	ldr	r2, [pc, #436]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e044      	b.n	8002e36 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d03e      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x126>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13a      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dc0:	4b64      	ldr	r3, [pc, #400]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc8:	4a62      	ldr	r2, [pc, #392]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e02f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dde:	4b5d      	ldr	r3, [pc, #372]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0ac      	b.n	8002f48 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df6:	4b57      	ldr	r3, [pc, #348]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0a0      	b.n	8002f48 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e06:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e098      	b.n	8002f48 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e16:	f000 f8a7 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4a4e      	ldr	r2, [pc, #312]	; (8002f58 <HAL_RCC_ClockConfig+0x248>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d909      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e22:	4b4c      	ldr	r3, [pc, #304]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2a:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4944      	ldr	r1, [pc, #272]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e48:	f7fe fbe2 	bl	8001610 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe fbde 	bl	8001610 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e070      	b.n	8002f48 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b33      	ldr	r3, [pc, #204]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4930      	ldr	r1, [pc, #192]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eaa:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d210      	bcs.n	8002eda <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 020f 	bic.w	r2, r3, #15
 8002ec0:	4923      	ldr	r1, [pc, #140]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e036      	b.n	8002f48 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4918      	ldr	r1, [pc, #96]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f04:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4910      	ldr	r1, [pc, #64]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f18:	f000 f826 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	490c      	ldr	r1, [pc, #48]	; (8002f5c <HAL_RCC_ClockConfig+0x24c>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x250>)
 8002f36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_RCC_ClockConfig+0x254>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fc7b 	bl	8000838 <HAL_InitTick>
 8002f42:	4603      	mov	r3, r0
 8002f44:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40021000 	.word	0x40021000
 8002f58:	04c4b400 	.word	0x04c4b400
 8002f5c:	08008888 	.word	0x08008888
 8002f60:	20000000 	.word	0x20000000
 8002f64:	20000004 	.word	0x20000004

08002f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x34>
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d121      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d11e      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f9c:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fa8:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d102      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fe0:	4b25      	ldr	r3, [pc, #148]	; (8003078 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fec:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d134      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d003      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0xa6>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d003      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0xac>
 800300c:	e005      	b.n	800301a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_RCC_GetSysClockFreq+0x110>)
 8003010:	617b      	str	r3, [r7, #20]
      break;
 8003012:	e005      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_RCC_GetSysClockFreq+0x114>)
 8003016:	617b      	str	r3, [r7, #20]
      break;
 8003018:	e002      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	617b      	str	r3, [r7, #20]
      break;
 800301e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3301      	adds	r3, #1
 800302c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	fb02 f203 	mul.w	r2, r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_RCC_GetSysClockFreq+0x108>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	0e5b      	lsrs	r3, r3, #25
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	3301      	adds	r3, #1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003060:	69bb      	ldr	r3, [r7, #24]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
 8003074:	080088a0 	.word	0x080088a0
 8003078:	00f42400 	.word	0x00f42400
 800307c:	007a1200 	.word	0x007a1200

08003080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4904      	ldr	r1, [pc, #16]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08008898 	.word	0x08008898

080030c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030c8:	f7ff ffda 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0adb      	lsrs	r3, r3, #11
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4904      	ldr	r1, [pc, #16]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08008898 	.word	0x08008898

080030f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	220f      	movs	r2, #15
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	08db      	lsrs	r3, r3, #3
 800312a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <HAL_RCC_GetClockConfig+0x60>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 020f 	and.w	r2, r3, #15
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	601a      	str	r2, [r3, #0]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	40022000 	.word	0x40022000

08003154 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800316c:	f7ff f8c6 	bl	80022fc <HAL_PWREx_GetVoltageRange>
 8003170:	6178      	str	r0, [r7, #20]
 8003172:	e014      	b.n	800319e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	4a21      	ldr	r2, [pc, #132]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800317a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317e:	6593      	str	r3, [r2, #88]	; 0x58
 8003180:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800318c:	f7ff f8b6 	bl	80022fc <HAL_PWREx_GetVoltageRange>
 8003190:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a4:	d10b      	bne.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d913      	bls.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2ba0      	cmp	r3, #160	; 0xa0
 80031b0:	d902      	bls.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b2:	2302      	movs	r3, #2
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	e00d      	b.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b8:	2301      	movs	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e00a      	b.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b7f      	cmp	r3, #127	; 0x7f
 80031c2:	d902      	bls.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031c4:	2302      	movs	r3, #2
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e004      	b.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b70      	cmp	r3, #112	; 0x70
 80031ce:	d101      	bne.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d0:	2301      	movs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 020f 	bic.w	r2, r3, #15
 80031dc:	4909      	ldr	r1, [pc, #36]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	40022000 	.word	0x40022000

08003208 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003212:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d118      	bne.n	8003250 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800321e:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d107      	bne.n	800323a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800322c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e005      	b.n	8003246 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003246:	4a21      	ldr	r2, [pc, #132]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d003      	beq.n	8003268 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d003      	beq.n	800326e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003266:	e005      	b.n	8003274 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800326a:	613b      	str	r3, [r7, #16]
    break;
 800326c:	e005      	b.n	800327a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003270:	613b      	str	r3, [r7, #16]
    break;
 8003272:	e002      	b.n	800327a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	613b      	str	r3, [r7, #16]
    break;
 8003278:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	3301      	adds	r3, #1
 8003286:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	fb02 f203 	mul.w	r2, r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0e5b      	lsrs	r3, r3, #25
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032ba:	683b      	ldr	r3, [r7, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	40021000 	.word	0x40021000
 80032cc:	080088a0 	.word	0x080088a0
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	007a1200 	.word	0x007a1200

080032d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e0:	2300      	movs	r3, #0
 80032e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e4:	2300      	movs	r3, #0
 80032e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d040      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d02a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d825      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003300:	2b60      	cmp	r3, #96	; 0x60
 8003302:	d026      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003304:	2b60      	cmp	r3, #96	; 0x60
 8003306:	d821      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d006      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d81d      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003314:	2b20      	cmp	r3, #32
 8003316:	d010      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003318:	e018      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800331a:	4b89      	ldr	r3, [pc, #548]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a88      	ldr	r2, [pc, #544]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003326:	e015      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fb02 	bl	8003938 <RCCEx_PLLSAI1_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003338:	e00c      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3320      	adds	r3, #32
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fbed 	bl	8003b20 <RCCEx_PLLSAI2_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334a:	e003      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	74fb      	strb	r3, [r7, #19]
      break;
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335a:	4b79      	ldr	r3, [pc, #484]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003360:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003368:	4975      	ldr	r1, [pc, #468]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003370:	e001      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d047      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338a:	d030      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003390:	d82a      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003396:	d02a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339c:	d824      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800339e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a2:	d008      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a8:	d81e      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b2:	d010      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033b4:	e018      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b6:	4b62      	ldr	r3, [pc, #392]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	4a61      	ldr	r2, [pc, #388]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c2:	e015      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fab4 	bl	8003938 <RCCEx_PLLSAI1_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d4:	e00c      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3320      	adds	r3, #32
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fb9f 	bl	8003b20 <RCCEx_PLLSAI2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	74fb      	strb	r3, [r7, #19]
      break;
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80033ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033f6:	4b52      	ldr	r3, [pc, #328]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	494e      	ldr	r1, [pc, #312]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800340c:	e001      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 809f 	beq.w	800355e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003420:	2300      	movs	r3, #0
 8003422:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003424:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003434:	2300      	movs	r3, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	4a40      	ldr	r2, [pc, #256]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	6593      	str	r3, [r2, #88]	; 0x58
 8003446:	4b3e      	ldr	r3, [pc, #248]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a3a      	ldr	r2, [pc, #232]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003462:	f7fe f8d5 	bl	8001610 <HAL_GetTick>
 8003466:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003468:	e009      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fe f8d1 	bl	8001610 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d902      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	74fb      	strb	r3, [r7, #19]
        break;
 800347c:	e005      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ef      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d15b      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003490:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01f      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d019      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ba:	4b21      	ldr	r3, [pc, #132]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	4a1f      	ldr	r2, [pc, #124]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034da:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d016      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe f890 	bl	8001610 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f2:	e00b      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fe f88c 	bl	8001610 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d902      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	74fb      	strb	r3, [r7, #19]
            break;
 800350a:	e006      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ec      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10c      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003538:	e008      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	74bb      	strb	r3, [r7, #18]
 800353e:	e005      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354c:	7c7b      	ldrb	r3, [r7, #17]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003552:	4ba0      	ldr	r3, [pc, #640]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	4a9f      	ldr	r2, [pc, #636]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800356a:	4b9a      	ldr	r3, [pc, #616]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f023 0203 	bic.w	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	4996      	ldr	r1, [pc, #600]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800358c:	4b91      	ldr	r3, [pc, #580]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 020c 	bic.w	r2, r3, #12
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	498e      	ldr	r1, [pc, #568]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035ae:	4b89      	ldr	r3, [pc, #548]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	4985      	ldr	r1, [pc, #532]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035d0:	4b80      	ldr	r3, [pc, #512]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035de:	497d      	ldr	r1, [pc, #500]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035f2:	4b78      	ldr	r3, [pc, #480]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003600:	4974      	ldr	r1, [pc, #464]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003614:	4b6f      	ldr	r3, [pc, #444]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	496c      	ldr	r1, [pc, #432]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003636:	4b67      	ldr	r3, [pc, #412]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003644:	4963      	ldr	r1, [pc, #396]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003658:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003666:	495b      	ldr	r1, [pc, #364]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367a:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	4952      	ldr	r1, [pc, #328]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800369c:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	494a      	ldr	r1, [pc, #296]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036be:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	4941      	ldr	r1, [pc, #260]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036e0:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	4939      	ldr	r1, [pc, #228]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d028      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	4930      	ldr	r1, [pc, #192]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003720:	d106      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372c:	60d3      	str	r3, [r2, #12]
 800372e:	e011      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f8f9 	bl	8003938 <RCCEx_PLLSAI1_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d04d      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003768:	d108      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003776:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800377a:	e012      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003782:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003788:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379a:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037aa:	d106      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b6:	60d3      	str	r3, [r2, #12]
 80037b8:	e020      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c2:	d109      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a02      	ldr	r2, [pc, #8]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	60d3      	str	r3, [r2, #12]
 80037d0:	e014      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e0:	d10c      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2101      	movs	r1, #1
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f8a5 	bl	8003938 <RCCEx_PLLSAI1_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d028      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003808:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003816:	4947      	ldr	r1, [pc, #284]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003826:	d106      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003828:	4b42      	ldr	r3, [pc, #264]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a41      	ldr	r2, [pc, #260]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003832:	60d3      	str	r3, [r2, #12]
 8003834:	e011      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800383e:	d10c      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f876 	bl	8003938 <RCCEx_PLLSAI1_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01e      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003866:	4b33      	ldr	r3, [pc, #204]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003876:	492f      	ldr	r1, [pc, #188]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f851 	bl	8003938 <RCCEx_PLLSAI1_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800389a:	7cfb      	ldrb	r3, [r7, #19]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038b6:	f023 0204 	bic.w	r2, r3, #4
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c0:	491c      	ldr	r1, [pc, #112]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038d4:	4b17      	ldr	r3, [pc, #92]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038da:	f023 0218 	bic.w	r2, r3, #24
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	4913      	ldr	r1, [pc, #76]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d017      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003908:	490a      	ldr	r1, [pc, #40]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391a:	d105      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003926:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003928:	7cbb      	ldrb	r3, [r7, #18]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000

08003938 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003946:	4b72      	ldr	r3, [pc, #456]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00e      	beq.n	8003970 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003952:	4b6f      	ldr	r3, [pc, #444]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d103      	bne.n	800396a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
       ||
 8003966:	2b00      	cmp	r3, #0
 8003968:	d142      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e03f      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d018      	beq.n	80039aa <RCCEx_PLLSAI1_Config+0x72>
 8003978:	2b03      	cmp	r3, #3
 800397a:	d825      	bhi.n	80039c8 <RCCEx_PLLSAI1_Config+0x90>
 800397c:	2b01      	cmp	r3, #1
 800397e:	d002      	beq.n	8003986 <RCCEx_PLLSAI1_Config+0x4e>
 8003980:	2b02      	cmp	r3, #2
 8003982:	d009      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0x60>
 8003984:	e020      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003986:	4b62      	ldr	r3, [pc, #392]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11d      	bne.n	80039ce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003996:	e01a      	b.n	80039ce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003998:	4b5d      	ldr	r3, [pc, #372]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a8:	e013      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039aa:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10f      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039b6:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039c6:	e006      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      break;
 80039cc:	e004      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d108      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80039de:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 0203 	bic.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4949      	ldr	r1, [pc, #292]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 8086 	bne.w	8003b04 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a04:	f7fd fe04 	bl	8001610 <HAL_GetTick>
 8003a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a0a:	e009      	b.n	8003a20 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a0c:	f7fd fe00 	bl	8001610 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d902      	bls.n	8003a20 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a1e:	e005      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a20:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ef      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d168      	bne.n	8003b04 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d113      	bne.n	8003a60 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6892      	ldr	r2, [r2, #8]
 8003a44:	0211      	lsls	r1, r2, #8
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	06d2      	lsls	r2, r2, #27
 8003a4c:	4311      	orrs	r1, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6852      	ldr	r2, [r2, #4]
 8003a52:	3a01      	subs	r2, #1
 8003a54:	0112      	lsls	r2, r2, #4
 8003a56:	430a      	orrs	r2, r1
 8003a58:	492d      	ldr	r1, [pc, #180]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	610b      	str	r3, [r1, #16]
 8003a5e:	e02d      	b.n	8003abc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d115      	bne.n	8003a92 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a66:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6892      	ldr	r2, [r2, #8]
 8003a72:	0211      	lsls	r1, r2, #8
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6912      	ldr	r2, [r2, #16]
 8003a78:	0852      	lsrs	r2, r2, #1
 8003a7a:	3a01      	subs	r2, #1
 8003a7c:	0552      	lsls	r2, r2, #21
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6852      	ldr	r2, [r2, #4]
 8003a84:	3a01      	subs	r2, #1
 8003a86:	0112      	lsls	r2, r2, #4
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	4921      	ldr	r1, [pc, #132]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	610b      	str	r3, [r1, #16]
 8003a90:	e014      	b.n	8003abc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a92:	4b1f      	ldr	r3, [pc, #124]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	0211      	lsls	r1, r2, #8
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6952      	ldr	r2, [r2, #20]
 8003aa4:	0852      	lsrs	r2, r2, #1
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	0652      	lsls	r2, r2, #25
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6852      	ldr	r2, [r2, #4]
 8003ab0:	3a01      	subs	r2, #1
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	4916      	ldr	r1, [pc, #88]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fda2 	bl	8001610 <HAL_GetTick>
 8003acc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ace:	e009      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad0:	f7fd fd9e 	bl	8001610 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d902      	bls.n	8003ae4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae2:	e005      	b.n	8003af0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ef      	beq.n	8003ad0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	4904      	ldr	r1, [pc, #16]	; (8003b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	07ff800f 	.word	0x07ff800f
 8003b18:	ff9f800f 	.word	0xff9f800f
 8003b1c:	f9ff800f 	.word	0xf9ff800f

08003b20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b2e:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00e      	beq.n	8003b58 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b3a:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f003 0203 	and.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d103      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d142      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	e03f      	b.n	8003bd8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d018      	beq.n	8003b92 <RCCEx_PLLSAI2_Config+0x72>
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d825      	bhi.n	8003bb0 <RCCEx_PLLSAI2_Config+0x90>
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d002      	beq.n	8003b6e <RCCEx_PLLSAI2_Config+0x4e>
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d009      	beq.n	8003b80 <RCCEx_PLLSAI2_Config+0x60>
 8003b6c:	e020      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b6e:	4b62      	ldr	r3, [pc, #392]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11d      	bne.n	8003bb6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7e:	e01a      	b.n	8003bb6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b80:	4b5d      	ldr	r3, [pc, #372]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b90:	e013      	b.n	8003bba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b92:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b9e:	4b56      	ldr	r3, [pc, #344]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bae:	e006      	b.n	8003bbe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e004      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d108      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003bc6:	4b4c      	ldr	r3, [pc, #304]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f023 0203 	bic.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4949      	ldr	r1, [pc, #292]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 8086 	bne.w	8003cec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a44      	ldr	r2, [pc, #272]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd fd10 	bl	8001610 <HAL_GetTick>
 8003bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bf2:	e009      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bf4:	f7fd fd0c 	bl	8001610 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	73fb      	strb	r3, [r7, #15]
        break;
 8003c06:	e005      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c08:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ef      	bne.n	8003bf4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d168      	bne.n	8003cec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d113      	bne.n	8003c48 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c20:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1dc>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6892      	ldr	r2, [r2, #8]
 8003c2c:	0211      	lsls	r1, r2, #8
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	06d2      	lsls	r2, r2, #27
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6852      	ldr	r2, [r2, #4]
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	492d      	ldr	r1, [pc, #180]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	614b      	str	r3, [r1, #20]
 8003c46:	e02d      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d115      	bne.n	8003c7a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6892      	ldr	r2, [r2, #8]
 8003c5a:	0211      	lsls	r1, r2, #8
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6912      	ldr	r2, [r2, #16]
 8003c60:	0852      	lsrs	r2, r2, #1
 8003c62:	3a01      	subs	r2, #1
 8003c64:	0552      	lsls	r2, r2, #21
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6852      	ldr	r2, [r2, #4]
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0112      	lsls	r2, r2, #4
 8003c70:	430a      	orrs	r2, r1
 8003c72:	4921      	ldr	r1, [pc, #132]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	614b      	str	r3, [r1, #20]
 8003c78:	e014      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6892      	ldr	r2, [r2, #8]
 8003c86:	0211      	lsls	r1, r2, #8
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6952      	ldr	r2, [r2, #20]
 8003c8c:	0852      	lsrs	r2, r2, #1
 8003c8e:	3a01      	subs	r2, #1
 8003c90:	0652      	lsls	r2, r2, #25
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6852      	ldr	r2, [r2, #4]
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	4916      	ldr	r1, [pc, #88]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ca4:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fcae 	bl	8001610 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cb6:	e009      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cb8:	f7fd fcaa 	bl	8001610 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cca:	e005      	b.n	8003cd8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ef      	beq.n	8003cb8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	4904      	ldr	r1, [pc, #16]	; (8003cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	07ff800f 	.word	0x07ff800f
 8003d00:	ff9f800f 	.word	0xff9f800f
 8003d04:	f9ff800f 	.word	0xf9ff800f

08003d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e095      	b.n	8003e46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2a:	d009      	beq.n	8003d40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	61da      	str	r2, [r3, #28]
 8003d32:	e005      	b.n	8003d40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc fcbe 	bl	80006dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d80:	d902      	bls.n	8003d88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e002      	b.n	8003d8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d96:	d007      	beq.n	8003da8 <HAL_SPI_Init+0xa0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003da0:	d002      	beq.n	8003da8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	ea42 0103 	orr.w	r1, r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	f003 0204 	and.w	r2, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e24:	ea42 0103 	orr.w	r1, r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e049      	b.n	8003ef4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f841 	bl	8003efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 f9f7 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d001      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e04f      	b.n	8003fc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01d      	beq.n	8003f86 <HAL_TIM_Base_Start_IT+0x76>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f52:	d018      	beq.n	8003f86 <HAL_TIM_Base_Start_IT+0x76>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1f      	ldr	r2, [pc, #124]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_TIM_Base_Start_IT+0x76>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1e      	ldr	r2, [pc, #120]	; (8003fdc <HAL_TIM_Base_Start_IT+0xcc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <HAL_TIM_Base_Start_IT+0x76>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_TIM_Base_Start_IT+0x76>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_TIM_Base_Start_IT+0x76>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d115      	bne.n	8003fb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_TIM_Base_Start_IT+0xdc>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b06      	cmp	r3, #6
 8003f96:	d015      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0xb4>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9e:	d011      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb0:	e008      	b.n	8003fc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e000      	b.n	8003fc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40013400 	.word	0x40013400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	00010007 	.word	0x00010007

08003ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0202 	mvn.w	r2, #2
 800401c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f905 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8f7 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f908 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0204 	mvn.w	r2, #4
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8db 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8cd 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8de 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d122      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d11b      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0208 	mvn.w	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8b1 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8a3 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8b4 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0210 	mvn.w	r2, #16
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f887 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f879 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f88a 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0201 	mvn.w	r2, #1
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd f9c8 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f914 	bl	80043c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d10e      	bne.n	80041ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f907 	bl	80043dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d10e      	bne.n	80041fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d107      	bne.n	80041fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f838 	bl	800426a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d10e      	bne.n	8004226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b20      	cmp	r3, #32
 8004214:	d107      	bne.n	8004226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0220 	mvn.w	r2, #32
 800421e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f8c7 	bl	80043b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a40      	ldr	r2, [pc, #256]	; (8004394 <TIM_Base_SetConfig+0x114>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d00f      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3d      	ldr	r2, [pc, #244]	; (8004398 <TIM_Base_SetConfig+0x118>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3c      	ldr	r2, [pc, #240]	; (800439c <TIM_Base_SetConfig+0x11c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <TIM_Base_SetConfig+0x120>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3a      	ldr	r2, [pc, #232]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <TIM_Base_SetConfig+0x114>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01f      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d01b      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <TIM_Base_SetConfig+0x118>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d017      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <TIM_Base_SetConfig+0x11c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <TIM_Base_SetConfig+0x120>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00f      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <TIM_Base_SetConfig+0x128>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <TIM_Base_SetConfig+0x12c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <TIM_Base_SetConfig+0x130>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <TIM_Base_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00f      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <TIM_Base_SetConfig+0x128>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <TIM_Base_SetConfig+0x12c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0f      	ldr	r2, [pc, #60]	; (80043b0 <TIM_Base_SetConfig+0x130>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	615a      	str	r2, [r3, #20]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40013400 	.word	0x40013400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800

080043b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e042      	b.n	8004488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fc f8bb 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	; 0x24
 800441e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f960 	bl	80046f8 <UART_SetConfig>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e022      	b.n	8004488 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fc24 	bl	8004c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fcab 	bl	8004ddc <UART_CheckIdleState>
 8004486:	4603      	mov	r3, r0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	f040 8084 	bne.w	80045b4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_UART_Transmit+0x28>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e07c      	b.n	80045b6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Transmit+0x3a>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e075      	b.n	80045b6 <HAL_UART_Transmit+0x126>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2221      	movs	r2, #33	; 0x21
 80044de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80044e2:	f7fd f895 	bl	8001610 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d108      	bne.n	8004514 <HAL_UART_Transmit+0x84>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	e003      	b.n	800451c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004524:	e02d      	b.n	8004582 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2200      	movs	r2, #0
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fc9b 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e03a      	b.n	80045b6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	881a      	ldrh	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004552:	b292      	uxth	r2, r2
 8004554:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	3302      	adds	r3, #2
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	e008      	b.n	8004570 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	b292      	uxth	r2, r2
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3301      	adds	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1cb      	bne.n	8004526 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	2140      	movs	r1, #64	; 0x40
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fc67 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e006      	b.n	80045b6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d170      	bne.n	80046ba <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_UART_Receive_DMA+0x24>
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e069      	b.n	80046bc <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Receive_DMA+0x36>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e062      	b.n	80046bc <HAL_UART_Receive_DMA+0xfc>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2222      	movs	r2, #34	; 0x22
 8004618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02c      	beq.n	800467e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004628:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <HAL_UART_Receive_DMA+0x104>)
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004630:	4a25      	ldr	r2, [pc, #148]	; (80046c8 <HAL_UART_Receive_DMA+0x108>)
 8004632:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <HAL_UART_Receive_DMA+0x10c>)
 800463a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004640:	2200      	movs	r2, #0
 8004642:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3324      	adds	r3, #36	; 0x24
 800464e:	4619      	mov	r1, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	461a      	mov	r2, r3
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	f7fd f994 	bl	8001984 <HAL_DMA_Start_IT>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2210      	movs	r2, #16
 8004666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e01e      	b.n	80046bc <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004694:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	08004fef 	.word	0x08004fef
 80046c8:	08005059 	.word	0x08005059
 80046cc:	08005075 	.word	0x08005075

080046d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b5b0      	push	{r4, r5, r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	4313      	orrs	r3, r2
 800471a:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	4313      	orrs	r3, r2
 8004724:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4bb1      	ldr	r3, [pc, #708]	; (80049f4 <UART_SetConfig+0x2fc>)
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	69f9      	ldr	r1, [r7, #28]
 8004736:	430b      	orrs	r3, r1
 8004738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4aa7      	ldr	r2, [pc, #668]	; (80049f8 <UART_SetConfig+0x300>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	4313      	orrs	r3, r2
 8004768:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004774:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	69f9      	ldr	r1, [r7, #28]
 800477e:	430b      	orrs	r3, r1
 8004780:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	f023 010f 	bic.w	r1, r3, #15
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a97      	ldr	r2, [pc, #604]	; (80049fc <UART_SetConfig+0x304>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d121      	bne.n	80047e6 <UART_SetConfig+0xee>
 80047a2:	4b97      	ldr	r3, [pc, #604]	; (8004a00 <UART_SetConfig+0x308>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d817      	bhi.n	80047e0 <UART_SetConfig+0xe8>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0xc0>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047d5 	.word	0x080047d5
 80047c0:	080047cf 	.word	0x080047cf
 80047c4:	080047db 	.word	0x080047db
 80047c8:	2301      	movs	r3, #1
 80047ca:	76fb      	strb	r3, [r7, #27]
 80047cc:	e0e7      	b.n	800499e <UART_SetConfig+0x2a6>
 80047ce:	2302      	movs	r3, #2
 80047d0:	76fb      	strb	r3, [r7, #27]
 80047d2:	e0e4      	b.n	800499e <UART_SetConfig+0x2a6>
 80047d4:	2304      	movs	r3, #4
 80047d6:	76fb      	strb	r3, [r7, #27]
 80047d8:	e0e1      	b.n	800499e <UART_SetConfig+0x2a6>
 80047da:	2308      	movs	r3, #8
 80047dc:	76fb      	strb	r3, [r7, #27]
 80047de:	e0de      	b.n	800499e <UART_SetConfig+0x2a6>
 80047e0:	2310      	movs	r3, #16
 80047e2:	76fb      	strb	r3, [r7, #27]
 80047e4:	e0db      	b.n	800499e <UART_SetConfig+0x2a6>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a86      	ldr	r2, [pc, #536]	; (8004a04 <UART_SetConfig+0x30c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d132      	bne.n	8004856 <UART_SetConfig+0x15e>
 80047f0:	4b83      	ldr	r3, [pc, #524]	; (8004a00 <UART_SetConfig+0x308>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d828      	bhi.n	8004850 <UART_SetConfig+0x158>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x10c>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004839 	.word	0x08004839
 8004808:	08004851 	.word	0x08004851
 800480c:	08004851 	.word	0x08004851
 8004810:	08004851 	.word	0x08004851
 8004814:	08004845 	.word	0x08004845
 8004818:	08004851 	.word	0x08004851
 800481c:	08004851 	.word	0x08004851
 8004820:	08004851 	.word	0x08004851
 8004824:	0800483f 	.word	0x0800483f
 8004828:	08004851 	.word	0x08004851
 800482c:	08004851 	.word	0x08004851
 8004830:	08004851 	.word	0x08004851
 8004834:	0800484b 	.word	0x0800484b
 8004838:	2300      	movs	r3, #0
 800483a:	76fb      	strb	r3, [r7, #27]
 800483c:	e0af      	b.n	800499e <UART_SetConfig+0x2a6>
 800483e:	2302      	movs	r3, #2
 8004840:	76fb      	strb	r3, [r7, #27]
 8004842:	e0ac      	b.n	800499e <UART_SetConfig+0x2a6>
 8004844:	2304      	movs	r3, #4
 8004846:	76fb      	strb	r3, [r7, #27]
 8004848:	e0a9      	b.n	800499e <UART_SetConfig+0x2a6>
 800484a:	2308      	movs	r3, #8
 800484c:	76fb      	strb	r3, [r7, #27]
 800484e:	e0a6      	b.n	800499e <UART_SetConfig+0x2a6>
 8004850:	2310      	movs	r3, #16
 8004852:	76fb      	strb	r3, [r7, #27]
 8004854:	e0a3      	b.n	800499e <UART_SetConfig+0x2a6>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a6b      	ldr	r2, [pc, #428]	; (8004a08 <UART_SetConfig+0x310>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d120      	bne.n	80048a2 <UART_SetConfig+0x1aa>
 8004860:	4b67      	ldr	r3, [pc, #412]	; (8004a00 <UART_SetConfig+0x308>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800486a:	2b30      	cmp	r3, #48	; 0x30
 800486c:	d013      	beq.n	8004896 <UART_SetConfig+0x19e>
 800486e:	2b30      	cmp	r3, #48	; 0x30
 8004870:	d814      	bhi.n	800489c <UART_SetConfig+0x1a4>
 8004872:	2b20      	cmp	r3, #32
 8004874:	d009      	beq.n	800488a <UART_SetConfig+0x192>
 8004876:	2b20      	cmp	r3, #32
 8004878:	d810      	bhi.n	800489c <UART_SetConfig+0x1a4>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <UART_SetConfig+0x18c>
 800487e:	2b10      	cmp	r3, #16
 8004880:	d006      	beq.n	8004890 <UART_SetConfig+0x198>
 8004882:	e00b      	b.n	800489c <UART_SetConfig+0x1a4>
 8004884:	2300      	movs	r3, #0
 8004886:	76fb      	strb	r3, [r7, #27]
 8004888:	e089      	b.n	800499e <UART_SetConfig+0x2a6>
 800488a:	2302      	movs	r3, #2
 800488c:	76fb      	strb	r3, [r7, #27]
 800488e:	e086      	b.n	800499e <UART_SetConfig+0x2a6>
 8004890:	2304      	movs	r3, #4
 8004892:	76fb      	strb	r3, [r7, #27]
 8004894:	e083      	b.n	800499e <UART_SetConfig+0x2a6>
 8004896:	2308      	movs	r3, #8
 8004898:	76fb      	strb	r3, [r7, #27]
 800489a:	e080      	b.n	800499e <UART_SetConfig+0x2a6>
 800489c:	2310      	movs	r3, #16
 800489e:	76fb      	strb	r3, [r7, #27]
 80048a0:	e07d      	b.n	800499e <UART_SetConfig+0x2a6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a59      	ldr	r2, [pc, #356]	; (8004a0c <UART_SetConfig+0x314>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d120      	bne.n	80048ee <UART_SetConfig+0x1f6>
 80048ac:	4b54      	ldr	r3, [pc, #336]	; (8004a00 <UART_SetConfig+0x308>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048b6:	2bc0      	cmp	r3, #192	; 0xc0
 80048b8:	d013      	beq.n	80048e2 <UART_SetConfig+0x1ea>
 80048ba:	2bc0      	cmp	r3, #192	; 0xc0
 80048bc:	d814      	bhi.n	80048e8 <UART_SetConfig+0x1f0>
 80048be:	2b80      	cmp	r3, #128	; 0x80
 80048c0:	d009      	beq.n	80048d6 <UART_SetConfig+0x1de>
 80048c2:	2b80      	cmp	r3, #128	; 0x80
 80048c4:	d810      	bhi.n	80048e8 <UART_SetConfig+0x1f0>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <UART_SetConfig+0x1d8>
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d006      	beq.n	80048dc <UART_SetConfig+0x1e4>
 80048ce:	e00b      	b.n	80048e8 <UART_SetConfig+0x1f0>
 80048d0:	2300      	movs	r3, #0
 80048d2:	76fb      	strb	r3, [r7, #27]
 80048d4:	e063      	b.n	800499e <UART_SetConfig+0x2a6>
 80048d6:	2302      	movs	r3, #2
 80048d8:	76fb      	strb	r3, [r7, #27]
 80048da:	e060      	b.n	800499e <UART_SetConfig+0x2a6>
 80048dc:	2304      	movs	r3, #4
 80048de:	76fb      	strb	r3, [r7, #27]
 80048e0:	e05d      	b.n	800499e <UART_SetConfig+0x2a6>
 80048e2:	2308      	movs	r3, #8
 80048e4:	76fb      	strb	r3, [r7, #27]
 80048e6:	e05a      	b.n	800499e <UART_SetConfig+0x2a6>
 80048e8:	2310      	movs	r3, #16
 80048ea:	76fb      	strb	r3, [r7, #27]
 80048ec:	e057      	b.n	800499e <UART_SetConfig+0x2a6>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a47      	ldr	r2, [pc, #284]	; (8004a10 <UART_SetConfig+0x318>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d125      	bne.n	8004944 <UART_SetConfig+0x24c>
 80048f8:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <UART_SetConfig+0x308>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004906:	d017      	beq.n	8004938 <UART_SetConfig+0x240>
 8004908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800490c:	d817      	bhi.n	800493e <UART_SetConfig+0x246>
 800490e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004912:	d00b      	beq.n	800492c <UART_SetConfig+0x234>
 8004914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004918:	d811      	bhi.n	800493e <UART_SetConfig+0x246>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <UART_SetConfig+0x22e>
 800491e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004922:	d006      	beq.n	8004932 <UART_SetConfig+0x23a>
 8004924:	e00b      	b.n	800493e <UART_SetConfig+0x246>
 8004926:	2300      	movs	r3, #0
 8004928:	76fb      	strb	r3, [r7, #27]
 800492a:	e038      	b.n	800499e <UART_SetConfig+0x2a6>
 800492c:	2302      	movs	r3, #2
 800492e:	76fb      	strb	r3, [r7, #27]
 8004930:	e035      	b.n	800499e <UART_SetConfig+0x2a6>
 8004932:	2304      	movs	r3, #4
 8004934:	76fb      	strb	r3, [r7, #27]
 8004936:	e032      	b.n	800499e <UART_SetConfig+0x2a6>
 8004938:	2308      	movs	r3, #8
 800493a:	76fb      	strb	r3, [r7, #27]
 800493c:	e02f      	b.n	800499e <UART_SetConfig+0x2a6>
 800493e:	2310      	movs	r3, #16
 8004940:	76fb      	strb	r3, [r7, #27]
 8004942:	e02c      	b.n	800499e <UART_SetConfig+0x2a6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <UART_SetConfig+0x300>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d125      	bne.n	800499a <UART_SetConfig+0x2a2>
 800494e:	4b2c      	ldr	r3, [pc, #176]	; (8004a00 <UART_SetConfig+0x308>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004958:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800495c:	d017      	beq.n	800498e <UART_SetConfig+0x296>
 800495e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004962:	d817      	bhi.n	8004994 <UART_SetConfig+0x29c>
 8004964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004968:	d00b      	beq.n	8004982 <UART_SetConfig+0x28a>
 800496a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496e:	d811      	bhi.n	8004994 <UART_SetConfig+0x29c>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <UART_SetConfig+0x284>
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004978:	d006      	beq.n	8004988 <UART_SetConfig+0x290>
 800497a:	e00b      	b.n	8004994 <UART_SetConfig+0x29c>
 800497c:	2300      	movs	r3, #0
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	e00d      	b.n	800499e <UART_SetConfig+0x2a6>
 8004982:	2302      	movs	r3, #2
 8004984:	76fb      	strb	r3, [r7, #27]
 8004986:	e00a      	b.n	800499e <UART_SetConfig+0x2a6>
 8004988:	2304      	movs	r3, #4
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e007      	b.n	800499e <UART_SetConfig+0x2a6>
 800498e:	2308      	movs	r3, #8
 8004990:	76fb      	strb	r3, [r7, #27]
 8004992:	e004      	b.n	800499e <UART_SetConfig+0x2a6>
 8004994:	2310      	movs	r3, #16
 8004996:	76fb      	strb	r3, [r7, #27]
 8004998:	e001      	b.n	800499e <UART_SetConfig+0x2a6>
 800499a:	2310      	movs	r3, #16
 800499c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <UART_SetConfig+0x300>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	f040 809f 	bne.w	8004ae8 <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049aa:	7efb      	ldrb	r3, [r7, #27]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d837      	bhi.n	8004a20 <UART_SetConfig+0x328>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x2c0>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	08004a21 	.word	0x08004a21
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	080049eb 	.word	0x080049eb
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004a21 	.word	0x08004a21
 80049d8:	08004a19 	.word	0x08004a19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049dc:	f7fe fb5c 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 80049e0:	6178      	str	r0, [r7, #20]
        break;
 80049e2:	e022      	b.n	8004a2a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <UART_SetConfig+0x31c>)
 80049e6:	617b      	str	r3, [r7, #20]
        break;
 80049e8:	e01f      	b.n	8004a2a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe fabd 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80049ee:	6178      	str	r0, [r7, #20]
        break;
 80049f0:	e01b      	b.n	8004a2a <UART_SetConfig+0x332>
 80049f2:	bf00      	nop
 80049f4:	cfff69f3 	.word	0xcfff69f3
 80049f8:	40008000 	.word	0x40008000
 80049fc:	40013800 	.word	0x40013800
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40004400 	.word	0x40004400
 8004a08:	40004800 	.word	0x40004800
 8004a0c:	40004c00 	.word	0x40004c00
 8004a10:	40005000 	.word	0x40005000
 8004a14:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1c:	617b      	str	r3, [r7, #20]
        break;
 8004a1e:	e004      	b.n	8004a2a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	76bb      	strb	r3, [r7, #26]
        break;
 8004a28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 811b 	beq.w	8004c68 <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	4a96      	ldr	r2, [pc, #600]	; (8004c90 <UART_SetConfig+0x598>)
 8004a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a44:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d305      	bcc.n	8004a62 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d902      	bls.n	8004a68 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	76bb      	strb	r3, [r7, #26]
 8004a66:	e0ff      	b.n	8004c68 <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f04f 0100 	mov.w	r1, #0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	4a86      	ldr	r2, [pc, #536]	; (8004c90 <UART_SetConfig+0x598>)
 8004a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	f7fb fbbe 	bl	8000200 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	020b      	lsls	r3, r1, #8
 8004a96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a9a:	0202      	lsls	r2, r0, #8
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	6849      	ldr	r1, [r1, #4]
 8004aa0:	0849      	lsrs	r1, r1, #1
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	1814      	adds	r4, r2, r0
 8004aaa:	eb43 0501 	adc.w	r5, r3, r1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	4620      	mov	r0, r4
 8004aba:	4629      	mov	r1, r5
 8004abc:	f7fb fba0 	bl	8000200 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ace:	d308      	bcc.n	8004ae2 <UART_SetConfig+0x3ea>
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d204      	bcs.n	8004ae2 <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	60da      	str	r2, [r3, #12]
 8004ae0:	e0c2      	b.n	8004c68 <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	76bb      	strb	r3, [r7, #26]
 8004ae6:	e0bf      	b.n	8004c68 <UART_SetConfig+0x570>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af0:	d165      	bne.n	8004bbe <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 8004af2:	7efb      	ldrb	r3, [r7, #27]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d828      	bhi.n	8004b4a <UART_SetConfig+0x452>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x408>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	08004b4b 	.word	0x08004b4b
 8004b10:	08004b3b 	.word	0x08004b3b
 8004b14:	08004b4b 	.word	0x08004b4b
 8004b18:	08004b4b 	.word	0x08004b4b
 8004b1c:	08004b4b 	.word	0x08004b4b
 8004b20:	08004b43 	.word	0x08004b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe fab8 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8004b28:	6178      	str	r0, [r7, #20]
        break;
 8004b2a:	e013      	b.n	8004b54 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fe faca 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 8004b30:	6178      	str	r0, [r7, #20]
        break;
 8004b32:	e00f      	b.n	8004b54 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b34:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <UART_SetConfig+0x59c>)
 8004b36:	617b      	str	r3, [r7, #20]
        break;
 8004b38:	e00c      	b.n	8004b54 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fe fa15 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004b3e:	6178      	str	r0, [r7, #20]
        break;
 8004b40:	e008      	b.n	8004b54 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	617b      	str	r3, [r7, #20]
        break;
 8004b48:	e004      	b.n	8004b54 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	76bb      	strb	r3, [r7, #26]
        break;
 8004b52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8086 	beq.w	8004c68 <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	4a4b      	ldr	r2, [pc, #300]	; (8004c90 <UART_SetConfig+0x598>)
 8004b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b66:	461a      	mov	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b6e:	005a      	lsls	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	441a      	add	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b0f      	cmp	r3, #15
 8004b88:	d916      	bls.n	8004bb8 <UART_SetConfig+0x4c0>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b90:	d212      	bcs.n	8004bb8 <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f023 030f 	bic.w	r3, r3, #15
 8004b9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	89fa      	ldrh	r2, [r7, #14]
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	e057      	b.n	8004c68 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	76bb      	strb	r3, [r7, #26]
 8004bbc:	e054      	b.n	8004c68 <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bbe:	7efb      	ldrb	r3, [r7, #27]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d828      	bhi.n	8004c16 <UART_SetConfig+0x51e>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <UART_SetConfig+0x4d4>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe fa52 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	6178      	str	r0, [r7, #20]
        break;
 8004bf6:	e013      	b.n	8004c20 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe fa64 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	6178      	str	r0, [r7, #20]
        break;
 8004bfe:	e00f      	b.n	8004c20 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <UART_SetConfig+0x59c>)
 8004c02:	617b      	str	r3, [r7, #20]
        break;
 8004c04:	e00c      	b.n	8004c20 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe f9af 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004c0a:	6178      	str	r0, [r7, #20]
        break;
 8004c0c:	e008      	b.n	8004c20 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	617b      	str	r3, [r7, #20]
        break;
 8004c14:	e004      	b.n	8004c20 <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c1e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d020      	beq.n	8004c68 <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <UART_SetConfig+0x598>)
 8004c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c30:	461a      	mov	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	441a      	add	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b0f      	cmp	r3, #15
 8004c50:	d908      	bls.n	8004c64 <UART_SetConfig+0x56c>
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c58:	d204      	bcs.n	8004c64 <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	e001      	b.n	8004c68 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004c84:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	080088d0 	.word	0x080088d0
 8004c94:	00f42400 	.word	0x00f42400

08004c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d10a      	bne.n	8004dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dec:	f7fc fc10 	bl	8001610 <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d10e      	bne.n	8004e1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f82c 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e022      	b.n	8004e64 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d10e      	bne.n	8004e4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f816 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e00c      	b.n	8004e64 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	e062      	b.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d05e      	beq.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fc fbc3 	bl	8001610 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d11d      	bne.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eaa:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e045      	b.n	8004f64 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02e      	beq.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef4:	d126      	bne.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004efe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f0e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e00f      	b.n	8004f64 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d08d      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f82:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004f92:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fbe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d11f      	bne.n	800504a <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005020:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005040:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7fc fa6c 	bl	8001528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff fb32 	bl	80046d0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005088:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005090:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b80      	cmp	r3, #128	; 0x80
 800509e:	d109      	bne.n	80050b4 <UART_DMAError+0x40>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b21      	cmp	r3, #33	; 0x21
 80050a4:	d106      	bne.n	80050b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff ff5c 	bl	8004f6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d109      	bne.n	80050d6 <UART_DMAError+0x62>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b22      	cmp	r3, #34	; 0x22
 80050c6:	d106      	bne.n	80050d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80050d0:	6978      	ldr	r0, [r7, #20]
 80050d2:	f7ff ff69 	bl	8004fa8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f043 0210 	orr.w	r2, r3, #16
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f7ff fafc 	bl	80046e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ec:	bf00      	nop
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UARTEx_DisableFifoMode+0x16>
 8005106:	2302      	movs	r3, #2
 8005108:	e027      	b.n	800515a <HAL_UARTEx_DisableFifoMode+0x66>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2224      	movs	r2, #36	; 0x24
 8005116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005138:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800517a:	2302      	movs	r3, #2
 800517c:	e02d      	b.n	80051da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2224      	movs	r2, #36	; 0x24
 800518a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f850 	bl	8005260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e02d      	b.n	8005256 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2224      	movs	r2, #36	; 0x24
 8005206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f812 	bl	8005260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005268:	4a2f      	ldr	r2, [pc, #188]	; (8005328 <UARTEx_SetNbDataToProcess+0xc8>)
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005272:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005276:	4a2d      	ldr	r2, [pc, #180]	; (800532c <UARTEx_SetNbDataToProcess+0xcc>)
 8005278:	f107 030c 	add.w	r3, r7, #12
 800527c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005280:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005288:	2b00      	cmp	r3, #0
 800528a:	d108      	bne.n	800529e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800529c:	e03d      	b.n	800531a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800529e:	2308      	movs	r3, #8
 80052a0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052a2:	2308      	movs	r3, #8
 80052a4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	0e5b      	lsrs	r3, r3, #25
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	0f5b      	lsrs	r3, r3, #29
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80052c6:	7fbb      	ldrb	r3, [r7, #30]
 80052c8:	7f3a      	ldrb	r2, [r7, #28]
 80052ca:	f107 0120 	add.w	r1, r7, #32
 80052ce:	440a      	add	r2, r1
 80052d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	7f3a      	ldrb	r2, [r7, #28]
 80052da:	f107 0120 	add.w	r1, r7, #32
 80052de:	440a      	add	r2, r1
 80052e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80052e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80052f0:	7ffb      	ldrb	r3, [r7, #31]
 80052f2:	7f7a      	ldrb	r2, [r7, #29]
 80052f4:	f107 0120 	add.w	r1, r7, #32
 80052f8:	440a      	add	r2, r1
 80052fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80052fe:	fb02 f303 	mul.w	r3, r2, r3
 8005302:	7f7a      	ldrb	r2, [r7, #29]
 8005304:	f107 0120 	add.w	r1, r7, #32
 8005308:	440a      	add	r2, r1
 800530a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800530e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005312:	b29a      	uxth	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800531a:	bf00      	nop
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	08008860 	.word	0x08008860
 800532c:	08008868 	.word	0x08008868

08005330 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005330:	b084      	sub	sp, #16
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	f107 001c 	add.w	r0, r7, #28
 800533e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	d122      	bne.n	800538e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800535c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d105      	bne.n	8005382 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa30 	bl	80057e8 <USB_CoreReset>
 8005388:	4603      	mov	r3, r0
 800538a:	73fb      	strb	r3, [r7, #15]
 800538c:	e01a      	b.n	80053c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa24 	bl	80057e8 <USB_CoreReset>
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
 80053b6:	e005      	b.n	80053c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d0:	b004      	add	sp, #16
 80053d2:	4770      	bx	lr

080053d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f023 0201 	bic.w	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d106      	bne.n	8005422 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	e00b      	b.n	800543a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	e001      	b.n	800543a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e003      	b.n	8005442 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800543a:	2032      	movs	r0, #50	; 0x32
 800543c:	f7fc f8f4 	bl	8001628 <HAL_Delay>

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800544c:	b084      	sub	sp, #16
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800545a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	e009      	b.n	8005480 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	3340      	adds	r3, #64	; 0x40
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	2200      	movs	r2, #0
 8005478:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	3301      	adds	r3, #1
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b0e      	cmp	r3, #14
 8005484:	d9f2      	bls.n	800546c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11c      	bne.n	80054c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e005      	b.n	80054d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054d8:	461a      	mov	r2, r3
 80054da:	2300      	movs	r3, #0
 80054dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e4:	4619      	mov	r1, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	461a      	mov	r2, r3
 80054ee:	680b      	ldr	r3, [r1, #0]
 80054f0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054f2:	2103      	movs	r1, #3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f93d 	bl	8005774 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054fa:	2110      	movs	r1, #16
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8f1 	bl	80056e4 <USB_FlushTxFifo>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f90f 	bl	8005730 <USB_FlushRxFifo>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	461a      	mov	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	461a      	mov	r2, r3
 800553c:	2300      	movs	r3, #0
 800553e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e043      	b.n	80055ce <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555c:	d118      	bne.n	8005590 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	461a      	mov	r2, r3
 8005572:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e013      	b.n	80055a2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	461a      	mov	r2, r3
 8005588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e008      	b.n	80055a2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	2300      	movs	r3, #0
 80055a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ae:	461a      	mov	r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	461a      	mov	r2, r3
 80055c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	3301      	adds	r3, #1
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3b7      	bcc.n	8005546 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	e043      	b.n	8005664 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f2:	d118      	bne.n	8005626 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	461a      	mov	r2, r3
 8005608:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	e013      	b.n	8005638 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	461a      	mov	r2, r3
 800561e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	e008      	b.n	8005638 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	2300      	movs	r3, #0
 8005636:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	461a      	mov	r2, r3
 8005646:	2300      	movs	r3, #0
 8005648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	461a      	mov	r2, r3
 8005658:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800565c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3301      	adds	r3, #1
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	429a      	cmp	r2, r3
 800566a:	d3b7      	bcc.n	80055dc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800568c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f043 0210 	orr.w	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <USB_DevInit+0x294>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f043 0208 	orr.w	r2, r3, #8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d107      	bne.n	80056ce <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c6:	f043 0304 	orr.w	r3, r3, #4
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056da:	b004      	add	sp, #16
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	803c3800 	.word	0x803c3800

080056e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	019b      	lsls	r3, r3, #6
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4a09      	ldr	r2, [pc, #36]	; (800572c <USB_FlushTxFifo+0x48>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e006      	b.n	800571e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b20      	cmp	r3, #32
 800571a:	d0f0      	beq.n	80056fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	00030d40 	.word	0x00030d40

08005730 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2210      	movs	r2, #16
 8005740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4a09      	ldr	r2, [pc, #36]	; (8005770 <USB_FlushRxFifo+0x40>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d901      	bls.n	8005754 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e006      	b.n	8005762 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b10      	cmp	r3, #16
 800575e:	d0f0      	beq.n	8005742 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	00030d40 	.word	0x00030d40

08005774 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005794:	4313      	orrs	r3, r2
 8005796:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057c0:	f023 0303 	bic.w	r3, r3, #3
 80057c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d4:	f043 0302 	orr.w	r3, r3, #2
 80057d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <USB_CoreReset+0x64>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e01b      	b.n	800583e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	daf2      	bge.n	80057f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <USB_CoreReset+0x64>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e006      	b.n	800583e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d0f0      	beq.n	800581e <USB_CoreReset+0x36>

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	00030d40 	.word	0x00030d40

08005850 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005866:	f3ef 8305 	mrs	r3, IPSR
 800586a:	60bb      	str	r3, [r7, #8]
  return(result);
 800586c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005872:	f3ef 8310 	mrs	r3, PRIMASK
 8005876:	607b      	str	r3, [r7, #4]
  return(result);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800587e:	f3ef 8311 	mrs	r3, BASEPRI
 8005882:	603b      	str	r3, [r7, #0]
  return(result);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <osKernelInitialize+0x3a>
 800588a:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <osKernelInitialize+0x64>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d103      	bne.n	800589a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005892:	f06f 0305 	mvn.w	r3, #5
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e00c      	b.n	80058b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <osKernelInitialize+0x64>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d105      	bne.n	80058ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058a2:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <osKernelInitialize+0x64>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e002      	b.n	80058b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
 80058b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058b4:	68fb      	ldr	r3, [r7, #12]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000134 	.word	0x20000134

080058c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ce:	f3ef 8305 	mrs	r3, IPSR
 80058d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10f      	bne.n	80058fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058da:	f3ef 8310 	mrs	r3, PRIMASK
 80058de:	607b      	str	r3, [r7, #4]
  return(result);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d105      	bne.n	80058f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058e6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ea:	603b      	str	r3, [r7, #0]
  return(result);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <osKernelStart+0x3a>
 80058f2:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <osKernelStart+0x68>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d103      	bne.n	8005902 <osKernelStart+0x3a>
    stat = osErrorISR;
 80058fa:	f06f 0305 	mvn.w	r3, #5
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	e010      	b.n	8005924 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <osKernelStart+0x68>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d109      	bne.n	800591e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800590a:	f7ff ffa1 	bl	8005850 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <osKernelStart+0x68>)
 8005910:	2202      	movs	r2, #2
 8005912:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005914:	f001 f97e 	bl	8006c14 <vTaskStartScheduler>
      stat = osOK;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e002      	b.n	8005924 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005924:	68fb      	ldr	r3, [r7, #12]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000134 	.word	0x20000134

08005934 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b090      	sub	sp, #64	; 0x40
 8005938:	af04      	add	r7, sp, #16
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005944:	f3ef 8305 	mrs	r3, IPSR
 8005948:	61fb      	str	r3, [r7, #28]
  return(result);
 800594a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 8090 	bne.w	8005a72 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005952:	f3ef 8310 	mrs	r3, PRIMASK
 8005956:	61bb      	str	r3, [r7, #24]
  return(result);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800595e:	f3ef 8311 	mrs	r3, BASEPRI
 8005962:	617b      	str	r3, [r7, #20]
  return(result);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <osThreadNew+0x3e>
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <osThreadNew+0x148>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d07f      	beq.n	8005a72 <osThreadNew+0x13e>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d07c      	beq.n	8005a72 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8005978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800597e:	2318      	movs	r3, #24
 8005980:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d045      	beq.n	8005a1e <osThreadNew+0xea>
      if (attr->name != NULL) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <osThreadNew+0x6c>
        name = attr->name;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <osThreadNew+0x92>
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	2b38      	cmp	r3, #56	; 0x38
 80059b8:	d805      	bhi.n	80059c6 <osThreadNew+0x92>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <osThreadNew+0x96>
        return (NULL);
 80059c6:	2300      	movs	r3, #0
 80059c8:	e054      	b.n	8005a74 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	089b      	lsrs	r3, r3, #2
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <osThreadNew+0xcc>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b5b      	cmp	r3, #91	; 0x5b
 80059e8:	d90a      	bls.n	8005a00 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <osThreadNew+0xcc>
        mem = 1;
 80059fa:	2301      	movs	r3, #1
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	e010      	b.n	8005a22 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10c      	bne.n	8005a22 <osThreadNew+0xee>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d108      	bne.n	8005a22 <osThreadNew+0xee>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <osThreadNew+0xee>
          mem = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	623b      	str	r3, [r7, #32]
 8005a1c:	e001      	b.n	8005a22 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d110      	bne.n	8005a4a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a30:	9202      	str	r2, [sp, #8]
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fe3a 	bl	80066b8 <xTaskCreateStatic>
 8005a44:	4603      	mov	r3, r0
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e013      	b.n	8005a72 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d110      	bne.n	8005a72 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f107 0310 	add.w	r3, r7, #16
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fe85 	bl	8006772 <xTaskCreate>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d001      	beq.n	8005a72 <osThreadNew+0x13e>
          hTask = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a72:	693b      	ldr	r3, [r7, #16]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3730      	adds	r7, #48	; 0x30
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000134 	.word	0x20000134

08005a80 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8005a86:	f001 fd0d 	bl	80074a4 <xTaskGetCurrentTaskHandle>
 8005a8a:	6078      	str	r0, [r7, #4]

  return (id);
 8005a8c:	687b      	ldr	r3, [r7, #4]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa4:	f3ef 8305 	mrs	r3, IPSR
 8005aa8:	613b      	str	r3, [r7, #16]
  return(result);
 8005aaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10f      	bne.n	8005ad0 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d105      	bne.n	8005ac8 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005abc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <osThreadTerminate+0x40>
 8005ac8:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <osThreadTerminate+0x7c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d103      	bne.n	8005ad8 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8005ad0:	f06f 0305 	mvn.w	r3, #5
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e017      	b.n	8005b08 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8005ade:	f06f 0303 	mvn.w	r3, #3
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e010      	b.n	8005b08 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8005ae6:	69b8      	ldr	r0, [r7, #24]
 8005ae8:	f001 f82e 	bl	8006b48 <eTaskGetState>
 8005aec:	4603      	mov	r3, r0
 8005aee:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d005      	beq.n	8005b02 <osThreadTerminate+0x6a>
      stat = osOK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8005afa:	69b8      	ldr	r0, [r7, #24]
 8005afc:	f000 ff7e 	bl	80069fc <vTaskDelete>
 8005b00:	e002      	b.n	8005b08 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8005b02:	f06f 0302 	mvn.w	r3, #2
 8005b06:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8005b08:	69fb      	ldr	r3, [r7, #28]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3720      	adds	r7, #32
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000134 	.word	0x20000134

08005b18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a07      	ldr	r2, [pc, #28]	; (8005b44 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4a06      	ldr	r2, [pc, #24]	; (8005b48 <vApplicationGetIdleTaskMemory+0x30>)
 8005b2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	20000138 	.word	0x20000138
 8005b48:	20000194 	.word	0x20000194

08005b4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4a06      	ldr	r2, [pc, #24]	; (8005b7c <vApplicationGetTimerTaskMemory+0x30>)
 8005b62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b6a:	601a      	str	r2, [r3, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20001194 	.word	0x20001194
 8005b7c:	200011f0 	.word	0x200011f0

08005b80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f103 0208 	add.w	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295
 8005b98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f103 0208 	add.w	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f103 0208 	add.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d103      	bne.n	8005c42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e00c      	b.n	8005c5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3308      	adds	r3, #8
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e002      	b.n	8005c50 <vListInsert+0x2e>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d2f6      	bcs.n	8005c4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6892      	ldr	r2, [r2, #8]
 8005caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6852      	ldr	r2, [r2, #4]
 8005cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d103      	bne.n	8005cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1e5a      	subs	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d12:	f002 f92f 	bl	8007f74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	3b01      	subs	r3, #1
 8005d44:	68f9      	ldr	r1, [r7, #12]
 8005d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	22ff      	movs	r2, #255	; 0xff
 8005d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	22ff      	movs	r2, #255	; 0xff
 8005d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d114      	bne.n	8005d92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3310      	adds	r3, #16
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 f9d7 	bl	8007128 <xTaskRemoveFromEventList>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d012      	beq.n	8005da6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <xQueueGenericReset+0xcc>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	e009      	b.n	8005da6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3310      	adds	r3, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fef2 	bl	8005b80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff feed 	bl	8005b80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005da6:	f002 f915 	bl	8007fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005daa:	2301      	movs	r3, #1
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	; 0x38
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <xQueueGenericCreateStatic+0x52>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <xQueueGenericCreateStatic+0x56>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <xQueueGenericCreateStatic+0x58>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	623b      	str	r3, [r7, #32]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <xQueueGenericCreateStatic+0x7e>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <xQueueGenericCreateStatic+0x82>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <xQueueGenericCreateStatic+0x84>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61fb      	str	r3, [r7, #28]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e56:	2350      	movs	r3, #80	; 0x50
 8005e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b50      	cmp	r3, #80	; 0x50
 8005e5e:	d00a      	beq.n	8005e76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	61bb      	str	r3, [r7, #24]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f805 	bl	8005ea8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3730      	adds	r7, #48	; 0x30
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	69b8      	ldr	r0, [r7, #24]
 8005eda:	f7ff ff05 	bl	8005ce8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	; 0x38
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005efe:	2300      	movs	r3, #0
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xQueueGenericSend+0x32>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <xQueueGenericSend+0x40>
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <xQueueGenericSend+0x44>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <xQueueGenericSend+0x46>
 8005f34:	2300      	movs	r3, #0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <xQueueGenericSend+0x60>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d103      	bne.n	8005f5e <xQueueGenericSend+0x6e>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <xQueueGenericSend+0x72>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <xQueueGenericSend+0x74>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <xQueueGenericSend+0x8e>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	623b      	str	r3, [r7, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f7e:	f001 faa1 	bl	80074c4 <xTaskGetSchedulerState>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d102      	bne.n	8005f8e <xQueueGenericSend+0x9e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <xQueueGenericSend+0xa2>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <xQueueGenericSend+0xa4>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <xQueueGenericSend+0xbe>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	61fb      	str	r3, [r7, #28]
}
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fae:	f001 ffe1 	bl	8007f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <xQueueGenericSend+0xd4>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d129      	bne.n	8006018 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fca:	f000 fa07 	bl	80063dc <prvCopyDataToQueue>
 8005fce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	3324      	adds	r3, #36	; 0x24
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 f8a3 	bl	8007128 <xTaskRemoveFromEventList>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d013      	beq.n	8006010 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fe8:	4b3f      	ldr	r3, [pc, #252]	; (80060e8 <xQueueGenericSend+0x1f8>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	e00a      	b.n	8006010 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <xQueueGenericSend+0x1f8>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006010:	f001 ffe0 	bl	8007fd4 <vPortExitCritical>
				return pdPASS;
 8006014:	2301      	movs	r3, #1
 8006016:	e063      	b.n	80060e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800601e:	f001 ffd9 	bl	8007fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006022:	2300      	movs	r3, #0
 8006024:	e05c      	b.n	80060e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	4618      	mov	r0, r3
 8006032:	f001 f8dd 	bl	80071f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006036:	2301      	movs	r3, #1
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800603a:	f001 ffcb 	bl	8007fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800603e:	f000 fe4f 	bl	8006ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006042:	f001 ff97 	bl	8007f74 <vPortEnterCritical>
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800604c:	b25b      	sxtb	r3, r3
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006052:	d103      	bne.n	800605c <xQueueGenericSend+0x16c>
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006062:	b25b      	sxtb	r3, r3
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d103      	bne.n	8006072 <xQueueGenericSend+0x182>
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006072:	f001 ffaf 	bl	8007fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006076:	1d3a      	adds	r2, r7, #4
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f8cc 	bl	800721c <xTaskCheckForTimeOut>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d124      	bne.n	80060d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800608a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800608c:	f000 fa9e 	bl	80065cc <prvIsQueueFull>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d018      	beq.n	80060c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	3310      	adds	r3, #16
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fff2 	bl	8007088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a6:	f000 fa29 	bl	80064fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060aa:	f000 fe27 	bl	8006cfc <xTaskResumeAll>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f47f af7c 	bne.w	8005fae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <xQueueGenericSend+0x1f8>)
 80060b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	e772      	b.n	8005fae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ca:	f000 fa17 	bl	80064fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ce:	f000 fe15 	bl	8006cfc <xTaskResumeAll>
 80060d2:	e76c      	b.n	8005fae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d6:	f000 fa11 	bl	80064fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060da:	f000 fe0f 	bl	8006cfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3738      	adds	r7, #56	; 0x38
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08e      	sub	sp, #56	; 0x38
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d103      	bne.n	8006128 <xQueueGenericSendFromISR+0x3c>
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <xQueueGenericSendFromISR+0x40>
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <xQueueGenericSendFromISR+0x42>
 800612c:	2300      	movs	r3, #0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	623b      	str	r3, [r7, #32]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d103      	bne.n	8006156 <xQueueGenericSendFromISR+0x6a>
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <xQueueGenericSendFromISR+0x6e>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <xQueueGenericSendFromISR+0x70>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	61fb      	str	r3, [r7, #28]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006176:	f001 ffdf 	bl	8008138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800617a:	f3ef 8211 	mrs	r2, BASEPRI
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61ba      	str	r2, [r7, #24]
 8006190:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006192:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <xQueueGenericSendFromISR+0xbc>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d12c      	bne.n	8006202 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061b8:	f000 f910 	bl	80063dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d112      	bne.n	80061ec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d016      	beq.n	80061fc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	3324      	adds	r3, #36	; 0x24
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 ffa8 	bl	8007128 <xTaskRemoveFromEventList>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e007      	b.n	80061fc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061f0:	3301      	adds	r3, #1
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	b25a      	sxtb	r2, r3
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061fc:	2301      	movs	r3, #1
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006200:	e001      	b.n	8006206 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006202:	2300      	movs	r3, #0
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006210:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006214:	4618      	mov	r0, r3
 8006216:	3738      	adds	r7, #56	; 0x38
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	; 0x30
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006228:	2300      	movs	r3, #0
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <xQueueReceive+0x30>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	623b      	str	r3, [r7, #32]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d103      	bne.n	800625a <xQueueReceive+0x3e>
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <xQueueReceive+0x42>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <xQueueReceive+0x44>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xQueueReceive+0x5e>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	61fb      	str	r3, [r7, #28]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800627a:	f001 f923 	bl	80074c4 <xTaskGetSchedulerState>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <xQueueReceive+0x6e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <xQueueReceive+0x72>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <xQueueReceive+0x74>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueReceive+0x8e>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	61bb      	str	r3, [r7, #24]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062aa:	f001 fe63 	bl	8007f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01f      	beq.n	80062fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062be:	f000 f8f7 	bl	80064b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	1e5a      	subs	r2, r3, #1
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00f      	beq.n	80062f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	3310      	adds	r3, #16
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 ff26 	bl	8007128 <xTaskRemoveFromEventList>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062e2:	4b3d      	ldr	r3, [pc, #244]	; (80063d8 <xQueueReceive+0x1bc>)
 80062e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062f2:	f001 fe6f 	bl	8007fd4 <vPortExitCritical>
				return pdPASS;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e069      	b.n	80063ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006300:	f001 fe68 	bl	8007fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006304:	2300      	movs	r3, #0
 8006306:	e062      	b.n	80063ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800630e:	f107 0310 	add.w	r3, r7, #16
 8006312:	4618      	mov	r0, r3
 8006314:	f000 ff6c 	bl	80071f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800631c:	f001 fe5a 	bl	8007fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006320:	f000 fcde 	bl	8006ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006324:	f001 fe26 	bl	8007f74 <vPortEnterCritical>
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800632e:	b25b      	sxtb	r3, r3
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d103      	bne.n	800633e <xQueueReceive+0x122>
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006344:	b25b      	sxtb	r3, r3
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d103      	bne.n	8006354 <xQueueReceive+0x138>
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006354:	f001 fe3e 	bl	8007fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006358:	1d3a      	adds	r2, r7, #4
 800635a:	f107 0310 	add.w	r3, r7, #16
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f000 ff5b 	bl	800721c <xTaskCheckForTimeOut>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d123      	bne.n	80063b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800636c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636e:	f000 f917 	bl	80065a0 <prvIsQueueEmpty>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d017      	beq.n	80063a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	3324      	adds	r3, #36	; 0x24
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fe81 	bl	8007088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006388:	f000 f8b8 	bl	80064fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800638c:	f000 fcb6 	bl	8006cfc <xTaskResumeAll>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d189      	bne.n	80062aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <xQueueReceive+0x1bc>)
 8006398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	e780      	b.n	80062aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063aa:	f000 f8a7 	bl	80064fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ae:	f000 fca5 	bl	8006cfc <xTaskResumeAll>
 80063b2:	e77a      	b.n	80062aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b6:	f000 f8a1 	bl	80064fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ba:	f000 fc9f 	bl	8006cfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c0:	f000 f8ee 	bl	80065a0 <prvIsQueueEmpty>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f43f af6f 	beq.w	80062aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3730      	adds	r7, #48	; 0x30
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10d      	bne.n	8006416 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d14d      	bne.n	800649e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f87a 	bl	8007500 <xTaskPriorityDisinherit>
 800640c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	e043      	b.n	800649e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d119      	bne.n	8006450 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6858      	ldr	r0, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	461a      	mov	r2, r3
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	f002 f8da 	bl	80085e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	441a      	add	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	d32b      	bcc.n	800649e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	605a      	str	r2, [r3, #4]
 800644e:	e026      	b.n	800649e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68d8      	ldr	r0, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006458:	461a      	mov	r2, r3
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	f002 f8c0 	bl	80085e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	425b      	negs	r3, r3
 800646a:	441a      	add	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d207      	bcs.n	800648c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	425b      	negs	r3, r3
 8006486:	441a      	add	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d105      	bne.n	800649e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3b01      	subs	r3, #1
 800649c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064a6:	697b      	ldr	r3, [r7, #20]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d018      	beq.n	80064f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	441a      	add	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d303      	bcc.n	80064e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	461a      	mov	r2, r3
 80064ee:	6838      	ldr	r0, [r7, #0]
 80064f0:	f002 f876 	bl	80085e0 <memcpy>
	}
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006504:	f001 fd36 	bl	8007f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800650e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006510:	e011      	b.n	8006536 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3324      	adds	r3, #36	; 0x24
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fe02 	bl	8007128 <xTaskRemoveFromEventList>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800652a:	f000 fed9 	bl	80072e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	3b01      	subs	r3, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	dce9      	bgt.n	8006512 <prvUnlockQueue+0x16>
 800653e:	e000      	b.n	8006542 <prvUnlockQueue+0x46>
					break;
 8006540:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800654a:	f001 fd43 	bl	8007fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800654e:	f001 fd11 	bl	8007f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006558:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800655a:	e011      	b.n	8006580 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d012      	beq.n	800658a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3310      	adds	r3, #16
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fddd 	bl	8007128 <xTaskRemoveFromEventList>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006574:	f000 feb4 	bl	80072e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	3b01      	subs	r3, #1
 800657c:	b2db      	uxtb	r3, r3
 800657e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006584:	2b00      	cmp	r3, #0
 8006586:	dce9      	bgt.n	800655c <prvUnlockQueue+0x60>
 8006588:	e000      	b.n	800658c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800658a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	22ff      	movs	r2, #255	; 0xff
 8006590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006594:	f001 fd1e 	bl	8007fd4 <vPortExitCritical>
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065a8:	f001 fce4 	bl	8007f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065b4:	2301      	movs	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e001      	b.n	80065be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065be:	f001 fd09 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 80065c2:	68fb      	ldr	r3, [r7, #12]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065d4:	f001 fcce 	bl	8007f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d102      	bne.n	80065ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e001      	b.n	80065ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ee:	f001 fcf1 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e014      	b.n	8006636 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800660c:	4a0f      	ldr	r2, [pc, #60]	; (800664c <vQueueAddToRegistry+0x50>)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006618:	490c      	ldr	r1, [pc, #48]	; (800664c <vQueueAddToRegistry+0x50>)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006622:	4a0a      	ldr	r2, [pc, #40]	; (800664c <vQueueAddToRegistry+0x50>)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4413      	add	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800662e:	e006      	b.n	800663e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b07      	cmp	r3, #7
 800663a:	d9e7      	bls.n	800660c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20002e34 	.word	0x20002e34

08006650 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006660:	f001 fc88 	bl	8007f74 <vPortEnterCritical>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800666a:	b25b      	sxtb	r3, r3
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d103      	bne.n	800667a <vQueueWaitForMessageRestricted+0x2a>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006680:	b25b      	sxtb	r3, r3
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d103      	bne.n	8006690 <vQueueWaitForMessageRestricted+0x40>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006690:	f001 fca0 	bl	8007fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	3324      	adds	r3, #36	; 0x24
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fd13 	bl	80070d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066aa:	6978      	ldr	r0, [r7, #20]
 80066ac:	f7ff ff26 	bl	80064fc <prvUnlockQueue>
	}
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08e      	sub	sp, #56	; 0x38
 80066bc:	af04      	add	r7, sp, #16
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	623b      	str	r3, [r7, #32]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <xTaskCreateStatic+0x46>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	61fb      	str	r3, [r7, #28]
}
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066fe:	235c      	movs	r3, #92	; 0x5c
 8006700:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b5c      	cmp	r3, #92	; 0x5c
 8006706:	d00a      	beq.n	800671e <xTaskCreateStatic+0x66>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	61bb      	str	r3, [r7, #24]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800671e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01e      	beq.n	8006764 <xTaskCreateStatic+0xac>
 8006726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01b      	beq.n	8006764 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006734:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	2202      	movs	r2, #2
 800673a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800673e:	2300      	movs	r3, #0
 8006740:	9303      	str	r3, [sp, #12]
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	9302      	str	r3, [sp, #8]
 8006746:	f107 0314 	add.w	r3, r7, #20
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f850 	bl	80067fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800675c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800675e:	f000 f8dd 	bl	800691c <prvAddNewTaskToReadyList>
 8006762:	e001      	b.n	8006768 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006768:	697b      	ldr	r3, [r7, #20]
	}
 800676a:	4618      	mov	r0, r3
 800676c:	3728      	adds	r7, #40	; 0x28
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006772:	b580      	push	{r7, lr}
 8006774:	b08c      	sub	sp, #48	; 0x30
 8006776:	af04      	add	r7, sp, #16
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	603b      	str	r3, [r7, #0]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4618      	mov	r0, r3
 8006788:	f001 fd16 	bl	80081b8 <pvPortMalloc>
 800678c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00e      	beq.n	80067b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006794:	205c      	movs	r0, #92	; 0x5c
 8006796:	f001 fd0f 	bl	80081b8 <pvPortMalloc>
 800679a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
 80067a8:	e005      	b.n	80067b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067aa:	6978      	ldr	r0, [r7, #20]
 80067ac:	f001 fdc8 	bl	8008340 <vPortFree>
 80067b0:	e001      	b.n	80067b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d017      	beq.n	80067ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067c4:	88fa      	ldrh	r2, [r7, #6]
 80067c6:	2300      	movs	r3, #0
 80067c8:	9303      	str	r3, [sp, #12]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	9302      	str	r3, [sp, #8]
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f80e 	bl	80067fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067e0:	69f8      	ldr	r0, [r7, #28]
 80067e2:	f000 f89b 	bl	800691c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067e6:	2301      	movs	r3, #1
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	e002      	b.n	80067f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067ec:	f04f 33ff 	mov.w	r3, #4294967295
 80067f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067f2:	69bb      	ldr	r3, [r7, #24]
	}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	461a      	mov	r2, r3
 8006814:	21a5      	movs	r1, #165	; 0xa5
 8006816:	f001 fef1 	bl	80085fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006824:	3b01      	subs	r3, #1
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <prvInitialiseNewTask+0x58>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	617b      	str	r3, [r7, #20]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01f      	beq.n	800689a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	e012      	b.n	8006886 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	7819      	ldrb	r1, [r3, #0]
 8006868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	3334      	adds	r3, #52	; 0x34
 8006870:	460a      	mov	r2, r1
 8006872:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d006      	beq.n	800688e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	3301      	adds	r3, #1
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	2b0f      	cmp	r3, #15
 800688a:	d9e9      	bls.n	8006860 <prvInitialiseNewTask+0x64>
 800688c:	e000      	b.n	8006890 <prvInitialiseNewTask+0x94>
			{
				break;
 800688e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006898:	e003      	b.n	80068a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	2b37      	cmp	r3, #55	; 0x37
 80068a6:	d901      	bls.n	80068ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068a8:	2337      	movs	r3, #55	; 0x37
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	2200      	movs	r2, #0
 80068bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	3304      	adds	r3, #4
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff f97c 	bl	8005bc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	3318      	adds	r3, #24
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff f977 	bl	8005bc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	2200      	movs	r2, #0
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	68f9      	ldr	r1, [r7, #12]
 80068fa:	69b8      	ldr	r0, [r7, #24]
 80068fc:	f001 fa10 	bl	8007d20 <pxPortInitialiseStack>
 8006900:	4602      	mov	r2, r0
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006912:	bf00      	nop
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006924:	f001 fb26 	bl	8007f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006928:	4b2d      	ldr	r3, [pc, #180]	; (80069e0 <prvAddNewTaskToReadyList+0xc4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <prvAddNewTaskToReadyList+0xc4>)
 8006930:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006932:	4b2c      	ldr	r3, [pc, #176]	; (80069e4 <prvAddNewTaskToReadyList+0xc8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <prvAddNewTaskToReadyList+0xc8>)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <prvAddNewTaskToReadyList+0xc4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d110      	bne.n	800696a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006948:	f000 fcee 	bl	8007328 <prvInitialiseTaskLists>
 800694c:	e00d      	b.n	800696a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800694e:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <prvAddNewTaskToReadyList+0xcc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006956:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <prvAddNewTaskToReadyList+0xc8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	429a      	cmp	r2, r3
 8006962:	d802      	bhi.n	800696a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006964:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <prvAddNewTaskToReadyList+0xc8>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800696a:	4b20      	ldr	r3, [pc, #128]	; (80069ec <prvAddNewTaskToReadyList+0xd0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3301      	adds	r3, #1
 8006970:	4a1e      	ldr	r2, [pc, #120]	; (80069ec <prvAddNewTaskToReadyList+0xd0>)
 8006972:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006974:	4b1d      	ldr	r3, [pc, #116]	; (80069ec <prvAddNewTaskToReadyList+0xd0>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006980:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <prvAddNewTaskToReadyList+0xd4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d903      	bls.n	8006990 <prvAddNewTaskToReadyList+0x74>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <prvAddNewTaskToReadyList+0xd4>)
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <prvAddNewTaskToReadyList+0xd8>)
 800699e:	441a      	add	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f7ff f917 	bl	8005bda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069ac:	f001 fb12 	bl	8007fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <prvAddNewTaskToReadyList+0xcc>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00e      	beq.n	80069d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <prvAddNewTaskToReadyList+0xc8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d207      	bcs.n	80069d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069c6:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <prvAddNewTaskToReadyList+0xdc>)
 80069c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20001ac4 	.word	0x20001ac4
 80069e4:	200015f0 	.word	0x200015f0
 80069e8:	20001ad0 	.word	0x20001ad0
 80069ec:	20001ae0 	.word	0x20001ae0
 80069f0:	20001acc 	.word	0x20001acc
 80069f4:	200015f4 	.word	0x200015f4
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006a04:	f001 fab6 	bl	8007f74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <vTaskDelete+0x18>
 8006a0e:	4b2c      	ldr	r3, [pc, #176]	; (8006ac0 <vTaskDelete+0xc4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	e000      	b.n	8006a16 <vTaskDelete+0x1a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff f939 	bl	8005c94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3318      	adds	r3, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff f930 	bl	8005c94 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006a34:	4b23      	ldr	r3, [pc, #140]	; (8006ac4 <vTaskDelete+0xc8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a22      	ldr	r2, [pc, #136]	; (8006ac4 <vTaskDelete+0xc8>)
 8006a3c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006a3e:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <vTaskDelete+0xc4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d10b      	bne.n	8006a60 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	481e      	ldr	r0, [pc, #120]	; (8006ac8 <vTaskDelete+0xcc>)
 8006a50:	f7ff f8c3 	bl	8005bda <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006a54:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <vTaskDelete+0xd0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <vTaskDelete+0xd0>)
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e009      	b.n	8006a74 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006a60:	4b1b      	ldr	r3, [pc, #108]	; (8006ad0 <vTaskDelete+0xd4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	4a1a      	ldr	r2, [pc, #104]	; (8006ad0 <vTaskDelete+0xd4>)
 8006a68:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fcca 	bl	8007404 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006a70:	f000 fcf8 	bl	8007464 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006a74:	f001 faae 	bl	8007fd4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006a78:	4b16      	ldr	r3, [pc, #88]	; (8006ad4 <vTaskDelete+0xd8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01b      	beq.n	8006ab8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8006a80:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <vTaskDelete+0xc4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d116      	bne.n	8006ab8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006a8a:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <vTaskDelete+0xdc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <vTaskDelete+0xac>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	60bb      	str	r3, [r7, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <vTaskDelete+0xe0>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	200015f0 	.word	0x200015f0
 8006ac4:	20001ae0 	.word	0x20001ae0
 8006ac8:	20001a98 	.word	0x20001a98
 8006acc:	20001aac 	.word	0x20001aac
 8006ad0:	20001ac4 	.word	0x20001ac4
 8006ad4:	20001ad0 	.word	0x20001ad0
 8006ad8:	20001aec 	.word	0x20001aec
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d017      	beq.n	8006b22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006af2:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <vTaskDelay+0x60>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <vTaskDelay+0x30>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	60bb      	str	r3, [r7, #8]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b10:	f000 f8e6 	bl	8006ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b14:	2100      	movs	r1, #0
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fd60 	bl	80075dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b1c:	f000 f8ee 	bl	8006cfc <xTaskResumeAll>
 8006b20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d107      	bne.n	8006b38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b28:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <vTaskDelay+0x64>)
 8006b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20001aec 	.word	0x20001aec
 8006b44:	e000ed04 	.word	0xe000ed04

08006b48 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <eTaskGetState+0x28>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	60bb      	str	r3, [r7, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006b70:	4b23      	ldr	r3, [pc, #140]	; (8006c00 <eTaskGetState+0xb8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d102      	bne.n	8006b80 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e03a      	b.n	8006bf6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8006b80:	f001 f9f8 	bl	8007f74 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006b8a:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <eTaskGetState+0xbc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006b90:	4b1d      	ldr	r3, [pc, #116]	; (8006c08 <eTaskGetState+0xc0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006b96:	f001 fa1d 	bl	8007fd4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d003      	beq.n	8006baa <eTaskGetState+0x62>
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d102      	bne.n	8006bb0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006baa:	2302      	movs	r3, #2
 8006bac:	77fb      	strb	r3, [r7, #31]
 8006bae:	e022      	b.n	8006bf6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <eTaskGetState+0xc4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d112      	bne.n	8006bde <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d102      	bne.n	8006bd2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e011      	b.n	8006bf6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e00e      	b.n	8006bf6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e00b      	b.n	8006bf6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4a0b      	ldr	r2, [pc, #44]	; (8006c10 <eTaskGetState+0xc8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d002      	beq.n	8006bec <eTaskGetState+0xa4>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006bec:	2304      	movs	r3, #4
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e001      	b.n	8006bf6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006bf6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	200015f0 	.word	0x200015f0
 8006c04:	20001a7c 	.word	0x20001a7c
 8006c08:	20001a80 	.word	0x20001a80
 8006c0c:	20001ab0 	.word	0x20001ab0
 8006c10:	20001a98 	.word	0x20001a98

08006c14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	; 0x28
 8006c18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c22:	463a      	mov	r2, r7
 8006c24:	1d39      	adds	r1, r7, #4
 8006c26:	f107 0308 	add.w	r3, r7, #8
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe ff74 	bl	8005b18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	9202      	str	r2, [sp, #8]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	460a      	mov	r2, r1
 8006c42:	4921      	ldr	r1, [pc, #132]	; (8006cc8 <vTaskStartScheduler+0xb4>)
 8006c44:	4821      	ldr	r0, [pc, #132]	; (8006ccc <vTaskStartScheduler+0xb8>)
 8006c46:	f7ff fd37 	bl	80066b8 <xTaskCreateStatic>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	4a20      	ldr	r2, [pc, #128]	; (8006cd0 <vTaskStartScheduler+0xbc>)
 8006c4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c50:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <vTaskStartScheduler+0xbc>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e001      	b.n	8006c62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d102      	bne.n	8006c6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c68:	f000 fd0c 	bl	8007684 <xTimerCreateTimerTask>
 8006c6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d116      	bne.n	8006ca2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	613b      	str	r3, [r7, #16]
}
 8006c86:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c88:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <vTaskStartScheduler+0xc0>)
 8006c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <vTaskStartScheduler+0xc4>)
 8006c92:	2201      	movs	r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c96:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <vTaskStartScheduler+0xc8>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c9c:	f001 f8c8 	bl	8007e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ca0:	e00e      	b.n	8006cc0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d10a      	bne.n	8006cc0 <vTaskStartScheduler+0xac>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60fb      	str	r3, [r7, #12]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vTaskStartScheduler+0xaa>
}
 8006cc0:	bf00      	nop
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	08008870 	.word	0x08008870
 8006ccc:	080072f9 	.word	0x080072f9
 8006cd0:	20001ae8 	.word	0x20001ae8
 8006cd4:	20001ae4 	.word	0x20001ae4
 8006cd8:	20001ad0 	.word	0x20001ad0
 8006cdc:	20001ac8 	.word	0x20001ac8

08006ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ce4:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <vTaskSuspendAll+0x18>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	4a03      	ldr	r2, [pc, #12]	; (8006cf8 <vTaskSuspendAll+0x18>)
 8006cec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006cee:	bf00      	nop
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	20001aec 	.word	0x20001aec

08006cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d0a:	4b42      	ldr	r3, [pc, #264]	; (8006e14 <xTaskResumeAll+0x118>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	603b      	str	r3, [r7, #0]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d28:	f001 f924 	bl	8007f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d2c:	4b39      	ldr	r3, [pc, #228]	; (8006e14 <xTaskResumeAll+0x118>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	4a38      	ldr	r2, [pc, #224]	; (8006e14 <xTaskResumeAll+0x118>)
 8006d34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <xTaskResumeAll+0x118>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d162      	bne.n	8006e04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d3e:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <xTaskResumeAll+0x11c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d05e      	beq.n	8006e04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d46:	e02f      	b.n	8006da8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d48:	4b34      	ldr	r3, [pc, #208]	; (8006e1c <xTaskResumeAll+0x120>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3318      	adds	r3, #24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe ff9d 	bl	8005c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe ff98 	bl	8005c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4b2d      	ldr	r3, [pc, #180]	; (8006e20 <xTaskResumeAll+0x124>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d903      	bls.n	8006d78 <xTaskResumeAll+0x7c>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <xTaskResumeAll+0x124>)
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a27      	ldr	r2, [pc, #156]	; (8006e24 <xTaskResumeAll+0x128>)
 8006d86:	441a      	add	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fe ff23 	bl	8005bda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d98:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <xTaskResumeAll+0x12c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d302      	bcc.n	8006da8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006da2:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <xTaskResumeAll+0x130>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006da8:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <xTaskResumeAll+0x120>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1cb      	bne.n	8006d48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006db6:	f000 fb55 	bl	8007464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dba:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <xTaskResumeAll+0x134>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d010      	beq.n	8006de8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dc6:	f000 f847 	bl	8006e58 <xTaskIncrementTick>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006dd0:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <xTaskResumeAll+0x130>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f1      	bne.n	8006dc6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006de2:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <xTaskResumeAll+0x134>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006de8:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <xTaskResumeAll+0x130>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006df4:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <xTaskResumeAll+0x138>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e04:	f001 f8e6 	bl	8007fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8006e08:	68bb      	ldr	r3, [r7, #8]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20001aec 	.word	0x20001aec
 8006e18:	20001ac4 	.word	0x20001ac4
 8006e1c:	20001a84 	.word	0x20001a84
 8006e20:	20001acc 	.word	0x20001acc
 8006e24:	200015f4 	.word	0x200015f4
 8006e28:	200015f0 	.word	0x200015f0
 8006e2c:	20001ad8 	.word	0x20001ad8
 8006e30:	20001ad4 	.word	0x20001ad4
 8006e34:	e000ed04 	.word	0xe000ed04

08006e38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <xTaskGetTickCount+0x1c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e44:	687b      	ldr	r3, [r7, #4]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20001ac8 	.word	0x20001ac8

08006e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e62:	4b4f      	ldr	r3, [pc, #316]	; (8006fa0 <xTaskIncrementTick+0x148>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f040 8089 	bne.w	8006f7e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e6c:	4b4d      	ldr	r3, [pc, #308]	; (8006fa4 <xTaskIncrementTick+0x14c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e74:	4a4b      	ldr	r2, [pc, #300]	; (8006fa4 <xTaskIncrementTick+0x14c>)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d120      	bne.n	8006ec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e80:	4b49      	ldr	r3, [pc, #292]	; (8006fa8 <xTaskIncrementTick+0x150>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	603b      	str	r3, [r7, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <xTaskIncrementTick+0x46>
 8006ea0:	4b41      	ldr	r3, [pc, #260]	; (8006fa8 <xTaskIncrementTick+0x150>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	4b41      	ldr	r3, [pc, #260]	; (8006fac <xTaskIncrementTick+0x154>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a3f      	ldr	r2, [pc, #252]	; (8006fa8 <xTaskIncrementTick+0x150>)
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	4a3f      	ldr	r2, [pc, #252]	; (8006fac <xTaskIncrementTick+0x154>)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	4b3e      	ldr	r3, [pc, #248]	; (8006fb0 <xTaskIncrementTick+0x158>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	4a3d      	ldr	r2, [pc, #244]	; (8006fb0 <xTaskIncrementTick+0x158>)
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	f000 fad1 	bl	8007464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ec2:	4b3c      	ldr	r3, [pc, #240]	; (8006fb4 <xTaskIncrementTick+0x15c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d349      	bcc.n	8006f60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ecc:	4b36      	ldr	r3, [pc, #216]	; (8006fa8 <xTaskIncrementTick+0x150>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d104      	bne.n	8006ee0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed6:	4b37      	ldr	r3, [pc, #220]	; (8006fb4 <xTaskIncrementTick+0x15c>)
 8006ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8006edc:	601a      	str	r2, [r3, #0]
					break;
 8006ede:	e03f      	b.n	8006f60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee0:	4b31      	ldr	r3, [pc, #196]	; (8006fa8 <xTaskIncrementTick+0x150>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d203      	bcs.n	8006f00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ef8:	4a2e      	ldr	r2, [pc, #184]	; (8006fb4 <xTaskIncrementTick+0x15c>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006efe:	e02f      	b.n	8006f60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fec5 	bl	8005c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d004      	beq.n	8006f1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	3318      	adds	r3, #24
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe febc 	bl	8005c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <xTaskIncrementTick+0x160>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d903      	bls.n	8006f30 <xTaskIncrementTick+0xd8>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4a22      	ldr	r2, [pc, #136]	; (8006fb8 <xTaskIncrementTick+0x160>)
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	; (8006fbc <xTaskIncrementTick+0x164>)
 8006f3e:	441a      	add	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fe fe47 	bl	8005bda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f50:	4b1b      	ldr	r3, [pc, #108]	; (8006fc0 <xTaskIncrementTick+0x168>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d3b8      	bcc.n	8006ecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f5e:	e7b5      	b.n	8006ecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f60:	4b17      	ldr	r3, [pc, #92]	; (8006fc0 <xTaskIncrementTick+0x168>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f66:	4915      	ldr	r1, [pc, #84]	; (8006fbc <xTaskIncrementTick+0x164>)
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d907      	bls.n	8006f88 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e004      	b.n	8006f88 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f7e:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <xTaskIncrementTick+0x16c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	4a0f      	ldr	r2, [pc, #60]	; (8006fc4 <xTaskIncrementTick+0x16c>)
 8006f86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f88:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <xTaskIncrementTick+0x170>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f94:	697b      	ldr	r3, [r7, #20]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20001aec 	.word	0x20001aec
 8006fa4:	20001ac8 	.word	0x20001ac8
 8006fa8:	20001a7c 	.word	0x20001a7c
 8006fac:	20001a80 	.word	0x20001a80
 8006fb0:	20001adc 	.word	0x20001adc
 8006fb4:	20001ae4 	.word	0x20001ae4
 8006fb8:	20001acc 	.word	0x20001acc
 8006fbc:	200015f4 	.word	0x200015f4
 8006fc0:	200015f0 	.word	0x200015f0
 8006fc4:	20001ad4 	.word	0x20001ad4
 8006fc8:	20001ad8 	.word	0x20001ad8

08006fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fd2:	4b28      	ldr	r3, [pc, #160]	; (8007074 <vTaskSwitchContext+0xa8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fda:	4b27      	ldr	r3, [pc, #156]	; (8007078 <vTaskSwitchContext+0xac>)
 8006fdc:	2201      	movs	r2, #1
 8006fde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fe0:	e041      	b.n	8007066 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006fe2:	4b25      	ldr	r3, [pc, #148]	; (8007078 <vTaskSwitchContext+0xac>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe8:	4b24      	ldr	r3, [pc, #144]	; (800707c <vTaskSwitchContext+0xb0>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e010      	b.n	8007012 <vTaskSwitchContext+0x46>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <vTaskSwitchContext+0x40>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	607b      	str	r3, [r7, #4]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <vTaskSwitchContext+0x3e>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3b01      	subs	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	491b      	ldr	r1, [pc, #108]	; (8007080 <vTaskSwitchContext+0xb4>)
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0e4      	beq.n	8006ff0 <vTaskSwitchContext+0x24>
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4a13      	ldr	r2, [pc, #76]	; (8007080 <vTaskSwitchContext+0xb4>)
 8007032:	4413      	add	r3, r2
 8007034:	60bb      	str	r3, [r7, #8]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	605a      	str	r2, [r3, #4]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	3308      	adds	r3, #8
 8007048:	429a      	cmp	r2, r3
 800704a:	d104      	bne.n	8007056 <vTaskSwitchContext+0x8a>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	605a      	str	r2, [r3, #4]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	4a09      	ldr	r2, [pc, #36]	; (8007084 <vTaskSwitchContext+0xb8>)
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	4a06      	ldr	r2, [pc, #24]	; (800707c <vTaskSwitchContext+0xb0>)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6013      	str	r3, [r2, #0]
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20001aec 	.word	0x20001aec
 8007078:	20001ad8 	.word	0x20001ad8
 800707c:	20001acc 	.word	0x20001acc
 8007080:	200015f4 	.word	0x200015f4
 8007084:	200015f0 	.word	0x200015f0

08007088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	60fb      	str	r3, [r7, #12]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <vTaskPlaceOnEventList+0x44>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3318      	adds	r3, #24
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fe fdb3 	bl	8005c22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070bc:	2101      	movs	r1, #1
 80070be:	6838      	ldr	r0, [r7, #0]
 80070c0:	f000 fa8c 	bl	80075dc <prvAddCurrentTaskToDelayedList>
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	200015f0 	.word	0x200015f0

080070d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	617b      	str	r3, [r7, #20]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <vTaskPlaceOnEventListRestricted+0x54>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3318      	adds	r3, #24
 80070fe:	4619      	mov	r1, r3
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7fe fd6a 	bl	8005bda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800710c:	f04f 33ff 	mov.w	r3, #4294967295
 8007110:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	68b8      	ldr	r0, [r7, #8]
 8007116:	f000 fa61 	bl	80075dc <prvAddCurrentTaskToDelayedList>
	}
 800711a:	bf00      	nop
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200015f0 	.word	0x200015f0

08007128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60fb      	str	r3, [r7, #12]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3318      	adds	r3, #24
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fd9b 	bl	8005c94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715e:	4b1e      	ldr	r3, [pc, #120]	; (80071d8 <xTaskRemoveFromEventList+0xb0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d11d      	bne.n	80071a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3304      	adds	r3, #4
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fd92 	bl	8005c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007174:	4b19      	ldr	r3, [pc, #100]	; (80071dc <xTaskRemoveFromEventList+0xb4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d903      	bls.n	8007184 <xTaskRemoveFromEventList+0x5c>
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	4a16      	ldr	r2, [pc, #88]	; (80071dc <xTaskRemoveFromEventList+0xb4>)
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <xTaskRemoveFromEventList+0xb8>)
 8007192:	441a      	add	r2, r3
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	3304      	adds	r3, #4
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f7fe fd1d 	bl	8005bda <vListInsertEnd>
 80071a0:	e005      	b.n	80071ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	3318      	adds	r3, #24
 80071a6:	4619      	mov	r1, r3
 80071a8:	480e      	ldr	r0, [pc, #56]	; (80071e4 <xTaskRemoveFromEventList+0xbc>)
 80071aa:	f7fe fd16 	bl	8005bda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <xTaskRemoveFromEventList+0xc0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d905      	bls.n	80071c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071c0:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <xTaskRemoveFromEventList+0xc4>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	e001      	b.n	80071cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071cc:	697b      	ldr	r3, [r7, #20]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20001aec 	.word	0x20001aec
 80071dc:	20001acc 	.word	0x20001acc
 80071e0:	200015f4 	.word	0x200015f4
 80071e4:	20001a84 	.word	0x20001a84
 80071e8:	200015f0 	.word	0x200015f0
 80071ec:	20001ad8 	.word	0x20001ad8

080071f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071f8:	4b06      	ldr	r3, [pc, #24]	; (8007214 <vTaskInternalSetTimeOutState+0x24>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <vTaskInternalSetTimeOutState+0x28>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	605a      	str	r2, [r3, #4]
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	20001adc 	.word	0x20001adc
 8007218:	20001ac8 	.word	0x20001ac8

0800721c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	613b      	str	r3, [r7, #16]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10a      	bne.n	800725e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60fb      	str	r3, [r7, #12]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800725e:	f000 fe89 	bl	8007f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007262:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <xTaskCheckForTimeOut+0xbc>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d102      	bne.n	8007282 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	e023      	b.n	80072ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <xTaskCheckForTimeOut+0xc0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d007      	beq.n	800729e <xTaskCheckForTimeOut+0x82>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	429a      	cmp	r2, r3
 8007296:	d302      	bcc.n	800729e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	e015      	b.n	80072ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d20b      	bcs.n	80072c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff ff9b 	bl	80071f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
 80072be:	e004      	b.n	80072ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072ca:	f000 fe83 	bl	8007fd4 <vPortExitCritical>

	return xReturn;
 80072ce:	69fb      	ldr	r3, [r7, #28]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20001ac8 	.word	0x20001ac8
 80072dc:	20001adc 	.word	0x20001adc

080072e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072e4:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <vTaskMissedYield+0x14>)
 80072e6:	2201      	movs	r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
}
 80072ea:	bf00      	nop
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	20001ad8 	.word	0x20001ad8

080072f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007300:	f000 f852 	bl	80073a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <prvIdleTask+0x28>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d9f9      	bls.n	8007300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <prvIdleTask+0x2c>)
 800730e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800731c:	e7f0      	b.n	8007300 <prvIdleTask+0x8>
 800731e:	bf00      	nop
 8007320:	200015f4 	.word	0x200015f4
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	e00c      	b.n	800734e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4a12      	ldr	r2, [pc, #72]	; (8007388 <prvInitialiseTaskLists+0x60>)
 8007340:	4413      	add	r3, r2
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fc1c 	bl	8005b80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3301      	adds	r3, #1
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b37      	cmp	r3, #55	; 0x37
 8007352:	d9ef      	bls.n	8007334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007354:	480d      	ldr	r0, [pc, #52]	; (800738c <prvInitialiseTaskLists+0x64>)
 8007356:	f7fe fc13 	bl	8005b80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800735a:	480d      	ldr	r0, [pc, #52]	; (8007390 <prvInitialiseTaskLists+0x68>)
 800735c:	f7fe fc10 	bl	8005b80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007360:	480c      	ldr	r0, [pc, #48]	; (8007394 <prvInitialiseTaskLists+0x6c>)
 8007362:	f7fe fc0d 	bl	8005b80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007366:	480c      	ldr	r0, [pc, #48]	; (8007398 <prvInitialiseTaskLists+0x70>)
 8007368:	f7fe fc0a 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800736c:	480b      	ldr	r0, [pc, #44]	; (800739c <prvInitialiseTaskLists+0x74>)
 800736e:	f7fe fc07 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007372:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <prvInitialiseTaskLists+0x78>)
 8007374:	4a05      	ldr	r2, [pc, #20]	; (800738c <prvInitialiseTaskLists+0x64>)
 8007376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <prvInitialiseTaskLists+0x7c>)
 800737a:	4a05      	ldr	r2, [pc, #20]	; (8007390 <prvInitialiseTaskLists+0x68>)
 800737c:	601a      	str	r2, [r3, #0]
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200015f4 	.word	0x200015f4
 800738c:	20001a54 	.word	0x20001a54
 8007390:	20001a68 	.word	0x20001a68
 8007394:	20001a84 	.word	0x20001a84
 8007398:	20001a98 	.word	0x20001a98
 800739c:	20001ab0 	.word	0x20001ab0
 80073a0:	20001a7c 	.word	0x20001a7c
 80073a4:	20001a80 	.word	0x20001a80

080073a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ae:	e019      	b.n	80073e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073b0:	f000 fde0 	bl	8007f74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b4:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <prvCheckTasksWaitingTermination+0x50>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fc67 	bl	8005c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073c6:	4b0d      	ldr	r3, [pc, #52]	; (80073fc <prvCheckTasksWaitingTermination+0x54>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	4a0b      	ldr	r2, [pc, #44]	; (80073fc <prvCheckTasksWaitingTermination+0x54>)
 80073ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <prvCheckTasksWaitingTermination+0x58>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	4a0a      	ldr	r2, [pc, #40]	; (8007400 <prvCheckTasksWaitingTermination+0x58>)
 80073d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073da:	f000 fdfb 	bl	8007fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f810 	bl	8007404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <prvCheckTasksWaitingTermination+0x58>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e1      	bne.n	80073b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20001a98 	.word	0x20001a98
 80073fc:	20001ac4 	.word	0x20001ac4
 8007400:	20001aac 	.word	0x20001aac

08007404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007412:	2b00      	cmp	r3, #0
 8007414:	d108      	bne.n	8007428 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741a:	4618      	mov	r0, r3
 800741c:	f000 ff90 	bl	8008340 <vPortFree>
				vPortFree( pxTCB );
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 ff8d 	bl	8008340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007426:	e018      	b.n	800745a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800742e:	2b01      	cmp	r3, #1
 8007430:	d103      	bne.n	800743a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 ff84 	bl	8008340 <vPortFree>
	}
 8007438:	e00f      	b.n	800745a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007440:	2b02      	cmp	r3, #2
 8007442:	d00a      	beq.n	800745a <prvDeleteTCB+0x56>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	60fb      	str	r3, [r7, #12]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <prvDeleteTCB+0x54>
	}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <prvResetNextTaskUnblockTime+0x38>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007474:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007476:	f04f 32ff 	mov.w	r2, #4294967295
 800747a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800747c:	e008      	b.n	8007490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <prvResetNextTaskUnblockTime+0x38>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4a04      	ldr	r2, [pc, #16]	; (80074a0 <prvResetNextTaskUnblockTime+0x3c>)
 800748e:	6013      	str	r3, [r2, #0]
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20001a7c 	.word	0x20001a7c
 80074a0:	20001ae4 	.word	0x20001ae4

080074a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <xTaskGetCurrentTaskHandle+0x1c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 80074b0:	687b      	ldr	r3, [r7, #4]
	}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	200015f0 	.word	0x200015f0

080074c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <xTaskGetSchedulerState+0x34>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074d2:	2301      	movs	r3, #1
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	e008      	b.n	80074ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d8:	4b08      	ldr	r3, [pc, #32]	; (80074fc <xTaskGetSchedulerState+0x38>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074e0:	2302      	movs	r3, #2
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	e001      	b.n	80074ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074ea:	687b      	ldr	r3, [r7, #4]
	}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	20001ad0 	.word	0x20001ad0
 80074fc:	20001aec 	.word	0x20001aec

08007500 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d056      	beq.n	80075c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007516:	4b2e      	ldr	r3, [pc, #184]	; (80075d0 <xTaskPriorityDisinherit+0xd0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	429a      	cmp	r2, r3
 800751e:	d00a      	beq.n	8007536 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60fb      	str	r3, [r7, #12]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60bb      	str	r3, [r7, #8]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007566:	429a      	cmp	r2, r3
 8007568:	d02c      	beq.n	80075c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	2b00      	cmp	r3, #0
 8007570:	d128      	bne.n	80075c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	3304      	adds	r3, #4
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fb8c 	bl	8005c94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007594:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <xTaskPriorityDisinherit+0xd4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d903      	bls.n	80075a4 <xTaskPriorityDisinherit+0xa4>
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	4a0c      	ldr	r2, [pc, #48]	; (80075d4 <xTaskPriorityDisinherit+0xd4>)
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <xTaskPriorityDisinherit+0xd8>)
 80075b2:	441a      	add	r2, r3
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fe fb0d 	bl	8005bda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075c4:	697b      	ldr	r3, [r7, #20]
	}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200015f0 	.word	0x200015f0
 80075d4:	20001acc 	.word	0x20001acc
 80075d8:	200015f4 	.word	0x200015f4

080075dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075e6:	4b21      	ldr	r3, [pc, #132]	; (800766c <prvAddCurrentTaskToDelayedList+0x90>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ec:	4b20      	ldr	r3, [pc, #128]	; (8007670 <prvAddCurrentTaskToDelayedList+0x94>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fb4e 	bl	8005c94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d10a      	bne.n	8007616 <prvAddCurrentTaskToDelayedList+0x3a>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007606:	4b1a      	ldr	r3, [pc, #104]	; (8007670 <prvAddCurrentTaskToDelayedList+0x94>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3304      	adds	r3, #4
 800760c:	4619      	mov	r1, r3
 800760e:	4819      	ldr	r0, [pc, #100]	; (8007674 <prvAddCurrentTaskToDelayedList+0x98>)
 8007610:	f7fe fae3 	bl	8005bda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007614:	e026      	b.n	8007664 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4413      	add	r3, r2
 800761c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800761e:	4b14      	ldr	r3, [pc, #80]	; (8007670 <prvAddCurrentTaskToDelayedList+0x94>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	429a      	cmp	r2, r3
 800762c:	d209      	bcs.n	8007642 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800762e:	4b12      	ldr	r3, [pc, #72]	; (8007678 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <prvAddCurrentTaskToDelayedList+0x94>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3304      	adds	r3, #4
 8007638:	4619      	mov	r1, r3
 800763a:	4610      	mov	r0, r2
 800763c:	f7fe faf1 	bl	8005c22 <vListInsert>
}
 8007640:	e010      	b.n	8007664 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <prvAddCurrentTaskToDelayedList+0x94>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3304      	adds	r3, #4
 800764c:	4619      	mov	r1, r3
 800764e:	4610      	mov	r0, r2
 8007650:	f7fe fae7 	bl	8005c22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007654:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	429a      	cmp	r2, r3
 800765c:	d202      	bcs.n	8007664 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800765e:	4a08      	ldr	r2, [pc, #32]	; (8007680 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6013      	str	r3, [r2, #0]
}
 8007664:	bf00      	nop
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20001ac8 	.word	0x20001ac8
 8007670:	200015f0 	.word	0x200015f0
 8007674:	20001ab0 	.word	0x20001ab0
 8007678:	20001a80 	.word	0x20001a80
 800767c:	20001a7c 	.word	0x20001a7c
 8007680:	20001ae4 	.word	0x20001ae4

08007684 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08a      	sub	sp, #40	; 0x28
 8007688:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800768e:	f000 fb07 	bl	8007ca0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007692:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <xTimerCreateTimerTask+0x80>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d021      	beq.n	80076de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076a2:	1d3a      	adds	r2, r7, #4
 80076a4:	f107 0108 	add.w	r1, r7, #8
 80076a8:	f107 030c 	add.w	r3, r7, #12
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fe fa4d 	bl	8005b4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	9202      	str	r2, [sp, #8]
 80076ba:	9301      	str	r3, [sp, #4]
 80076bc:	2302      	movs	r3, #2
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	2300      	movs	r3, #0
 80076c2:	460a      	mov	r2, r1
 80076c4:	4910      	ldr	r1, [pc, #64]	; (8007708 <xTimerCreateTimerTask+0x84>)
 80076c6:	4811      	ldr	r0, [pc, #68]	; (800770c <xTimerCreateTimerTask+0x88>)
 80076c8:	f7fe fff6 	bl	80066b8 <xTaskCreateStatic>
 80076cc:	4603      	mov	r3, r0
 80076ce:	4a10      	ldr	r2, [pc, #64]	; (8007710 <xTimerCreateTimerTask+0x8c>)
 80076d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076d2:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <xTimerCreateTimerTask+0x8c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076da:	2301      	movs	r3, #1
 80076dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10a      	bne.n	80076fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	613b      	str	r3, [r7, #16]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076fa:	697b      	ldr	r3, [r7, #20]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20001b20 	.word	0x20001b20
 8007708:	08008878 	.word	0x08008878
 800770c:	08007849 	.word	0x08007849
 8007710:	20001b24 	.word	0x20001b24

08007714 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007722:	2300      	movs	r3, #0
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <xTimerGenericCommand+0x2e>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	623b      	str	r3, [r7, #32]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007742:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <xTimerGenericCommand+0x98>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d02a      	beq.n	80077a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b05      	cmp	r3, #5
 800775a:	dc18      	bgt.n	800778e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800775c:	f7ff feb2 	bl	80074c4 <xTaskGetSchedulerState>
 8007760:	4603      	mov	r3, r0
 8007762:	2b02      	cmp	r3, #2
 8007764:	d109      	bne.n	800777a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007766:	4b11      	ldr	r3, [pc, #68]	; (80077ac <xTimerGenericCommand+0x98>)
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f107 0110 	add.w	r1, r7, #16
 800776e:	2300      	movs	r3, #0
 8007770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007772:	f7fe fbbd 	bl	8005ef0 <xQueueGenericSend>
 8007776:	6278      	str	r0, [r7, #36]	; 0x24
 8007778:	e012      	b.n	80077a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800777a:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <xTimerGenericCommand+0x98>)
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	f107 0110 	add.w	r1, r7, #16
 8007782:	2300      	movs	r3, #0
 8007784:	2200      	movs	r2, #0
 8007786:	f7fe fbb3 	bl	8005ef0 <xQueueGenericSend>
 800778a:	6278      	str	r0, [r7, #36]	; 0x24
 800778c:	e008      	b.n	80077a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800778e:	4b07      	ldr	r3, [pc, #28]	; (80077ac <xTimerGenericCommand+0x98>)
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	f107 0110 	add.w	r1, r7, #16
 8007796:	2300      	movs	r3, #0
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	f7fe fca7 	bl	80060ec <xQueueGenericSendFromISR>
 800779e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3728      	adds	r7, #40	; 0x28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20001b20 	.word	0x20001b20

080077b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ba:	4b22      	ldr	r3, [pc, #136]	; (8007844 <prvProcessExpiredTimer+0x94>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fa63 	bl	8005c94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d022      	beq.n	8007822 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	699a      	ldr	r2, [r3, #24]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	18d1      	adds	r1, r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	6978      	ldr	r0, [r7, #20]
 80077ea:	f000 f8d1 	bl	8007990 <prvInsertTimerInActiveList>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01f      	beq.n	8007834 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077f4:	2300      	movs	r3, #0
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	2300      	movs	r3, #0
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	2100      	movs	r1, #0
 80077fe:	6978      	ldr	r0, [r7, #20]
 8007800:	f7ff ff88 	bl	8007714 <xTimerGenericCommand>
 8007804:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d113      	bne.n	8007834 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60fb      	str	r3, [r7, #12]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007828:	f023 0301 	bic.w	r3, r3, #1
 800782c:	b2da      	uxtb	r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	6978      	ldr	r0, [r7, #20]
 800783a:	4798      	blx	r3
}
 800783c:	bf00      	nop
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20001b18 	.word	0x20001b18

08007848 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007850:	f107 0308 	add.w	r3, r7, #8
 8007854:	4618      	mov	r0, r3
 8007856:	f000 f857 	bl	8007908 <prvGetNextExpireTime>
 800785a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4619      	mov	r1, r3
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f803 	bl	800786c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007866:	f000 f8d5 	bl	8007a14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800786a:	e7f1      	b.n	8007850 <prvTimerTask+0x8>

0800786c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007876:	f7ff fa33 	bl	8006ce0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800787a:	f107 0308 	add.w	r3, r7, #8
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f866 	bl	8007950 <prvSampleTimeNow>
 8007884:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d130      	bne.n	80078ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <prvProcessTimerOrBlockTask+0x3c>
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	429a      	cmp	r2, r3
 8007898:	d806      	bhi.n	80078a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800789a:	f7ff fa2f 	bl	8006cfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff ff85 	bl	80077b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078a6:	e024      	b.n	80078f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <prvProcessTimerOrBlockTask+0x90>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <prvProcessTimerOrBlockTask+0x50>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <prvProcessTimerOrBlockTask+0x52>
 80078bc:	2300      	movs	r3, #0
 80078be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078c0:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <prvProcessTimerOrBlockTask+0x94>)
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	f7fe febf 	bl	8006650 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078d2:	f7ff fa13 	bl	8006cfc <xTaskResumeAll>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <prvProcessTimerOrBlockTask+0x98>)
 80078de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
}
 80078ec:	e001      	b.n	80078f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078ee:	f7ff fa05 	bl	8006cfc <xTaskResumeAll>
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20001b1c 	.word	0x20001b1c
 8007900:	20001b20 	.word	0x20001b20
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <prvGetNextExpireTime+0x44>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <prvGetNextExpireTime+0x16>
 800791a:	2201      	movs	r2, #1
 800791c:	e000      	b.n	8007920 <prvGetNextExpireTime+0x18>
 800791e:	2200      	movs	r2, #0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d105      	bne.n	8007938 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800792c:	4b07      	ldr	r3, [pc, #28]	; (800794c <prvGetNextExpireTime+0x44>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	e001      	b.n	800793c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800793c:	68fb      	ldr	r3, [r7, #12]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20001b18 	.word	0x20001b18

08007950 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007958:	f7ff fa6e 	bl	8006e38 <xTaskGetTickCount>
 800795c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800795e:	4b0b      	ldr	r3, [pc, #44]	; (800798c <prvSampleTimeNow+0x3c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	429a      	cmp	r2, r3
 8007966:	d205      	bcs.n	8007974 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007968:	f000 f936 	bl	8007bd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e002      	b.n	800797a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800797a:	4a04      	ldr	r2, [pc, #16]	; (800798c <prvSampleTimeNow+0x3c>)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20001b28 	.word	0x20001b28

08007990 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d812      	bhi.n	80079dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	1ad2      	subs	r2, r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e01b      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079ca:	4b10      	ldr	r3, [pc, #64]	; (8007a0c <prvInsertTimerInActiveList+0x7c>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f7fe f924 	bl	8005c22 <vListInsert>
 80079da:	e012      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d206      	bcs.n	80079f2 <prvInsertTimerInActiveList+0x62>
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e007      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <prvInsertTimerInActiveList+0x80>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7fe f910 	bl	8005c22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a02:	697b      	ldr	r3, [r7, #20]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20001b1c 	.word	0x20001b1c
 8007a10:	20001b18 	.word	0x20001b18

08007a14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08e      	sub	sp, #56	; 0x38
 8007a18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a1a:	e0ca      	b.n	8007bb2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	da18      	bge.n	8007a54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	3304      	adds	r3, #4
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	61fb      	str	r3, [r7, #28]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4a:	6850      	ldr	r0, [r2, #4]
 8007a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4e:	6892      	ldr	r2, [r2, #8]
 8007a50:	4611      	mov	r1, r2
 8007a52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f2c0 80aa 	blt.w	8007bb0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe f911 	bl	8005c94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a72:	463b      	mov	r3, r7
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff ff6b 	bl	8007950 <prvSampleTimeNow>
 8007a7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b09      	cmp	r3, #9
 8007a80:	f200 8097 	bhi.w	8007bb2 <prvProcessReceivedCommands+0x19e>
 8007a84:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <prvProcessReceivedCommands+0x78>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007b29 	.word	0x08007b29
 8007a9c:	08007b3d 	.word	0x08007b3d
 8007aa0:	08007b87 	.word	0x08007b87
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ab5 	.word	0x08007ab5
 8007aac:	08007b29 	.word	0x08007b29
 8007ab0:	08007b3d 	.word	0x08007b3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	18d1      	adds	r1, r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ad4:	f7ff ff5c 	bl	8007990 <prvInsertTimerInActiveList>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d069      	beq.n	8007bb2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ae4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d05e      	beq.n	8007bb2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	441a      	add	r2, r3
 8007afc:	2300      	movs	r3, #0
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	2300      	movs	r3, #0
 8007b02:	2100      	movs	r1, #0
 8007b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b06:	f7ff fe05 	bl	8007714 <xTimerGenericCommand>
 8007b0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d14f      	bne.n	8007bb2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	61bb      	str	r3, [r7, #24]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b3a:	e03a      	b.n	8007bb2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	617b      	str	r3, [r7, #20]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	18d1      	adds	r1, r2, r3
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b80:	f7ff ff06 	bl	8007990 <prvInsertTimerInActiveList>
					break;
 8007b84:	e015      	b.n	8007bb2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d103      	bne.n	8007b9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b96:	f000 fbd3 	bl	8008340 <vPortFree>
 8007b9a:	e00a      	b.n	8007bb2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bae:	e000      	b.n	8007bb2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007bb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bb2:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <prvProcessReceivedCommands+0x1c0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	1d39      	adds	r1, r7, #4
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fb2e 	bl	800621c <xQueueReceive>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f47f af2a 	bne.w	8007a1c <prvProcessReceivedCommands+0x8>
	}
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	3730      	adds	r7, #48	; 0x30
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20001b20 	.word	0x20001b20

08007bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bde:	e048      	b.n	8007c72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be0:	4b2d      	ldr	r3, [pc, #180]	; (8007c98 <prvSwitchTimerLists+0xc0>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bea:	4b2b      	ldr	r3, [pc, #172]	; (8007c98 <prvSwitchTimerLists+0xc0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe f84b 	bl	8005c94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d02e      	beq.n	8007c72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d90e      	bls.n	8007c44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c32:	4b19      	ldr	r3, [pc, #100]	; (8007c98 <prvSwitchTimerLists+0xc0>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7fd fff0 	bl	8005c22 <vListInsert>
 8007c42:	e016      	b.n	8007c72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c44:	2300      	movs	r3, #0
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff fd60 	bl	8007714 <xTimerGenericCommand>
 8007c54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	603b      	str	r3, [r7, #0]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <prvSwitchTimerLists+0xc0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1b1      	bne.n	8007be0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <prvSwitchTimerLists+0xc0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c82:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <prvSwitchTimerLists+0xc4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <prvSwitchTimerLists+0xc0>)
 8007c88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c8a:	4a04      	ldr	r2, [pc, #16]	; (8007c9c <prvSwitchTimerLists+0xc4>)
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	6013      	str	r3, [r2, #0]
}
 8007c90:	bf00      	nop
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20001b18 	.word	0x20001b18
 8007c9c:	20001b1c 	.word	0x20001b1c

08007ca0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ca6:	f000 f965 	bl	8007f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <prvCheckForValidListAndQueue+0x60>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d120      	bne.n	8007cf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cb2:	4814      	ldr	r0, [pc, #80]	; (8007d04 <prvCheckForValidListAndQueue+0x64>)
 8007cb4:	f7fd ff64 	bl	8005b80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cb8:	4813      	ldr	r0, [pc, #76]	; (8007d08 <prvCheckForValidListAndQueue+0x68>)
 8007cba:	f7fd ff61 	bl	8005b80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <prvCheckForValidListAndQueue+0x6c>)
 8007cc0:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <prvCheckForValidListAndQueue+0x64>)
 8007cc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cc4:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <prvCheckForValidListAndQueue+0x70>)
 8007cc6:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <prvCheckForValidListAndQueue+0x68>)
 8007cc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cca:	2300      	movs	r3, #0
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <prvCheckForValidListAndQueue+0x74>)
 8007cd0:	4a11      	ldr	r2, [pc, #68]	; (8007d18 <prvCheckForValidListAndQueue+0x78>)
 8007cd2:	2110      	movs	r1, #16
 8007cd4:	200a      	movs	r0, #10
 8007cd6:	f7fe f86f 	bl	8005db8 <xQueueGenericCreateStatic>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4a08      	ldr	r2, [pc, #32]	; (8007d00 <prvCheckForValidListAndQueue+0x60>)
 8007cde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <prvCheckForValidListAndQueue+0x60>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <prvCheckForValidListAndQueue+0x60>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	490b      	ldr	r1, [pc, #44]	; (8007d1c <prvCheckForValidListAndQueue+0x7c>)
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fc84 	bl	80065fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cf4:	f000 f96e 	bl	8007fd4 <vPortExitCritical>
}
 8007cf8:	bf00      	nop
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20001b20 	.word	0x20001b20
 8007d04:	20001af0 	.word	0x20001af0
 8007d08:	20001b04 	.word	0x20001b04
 8007d0c:	20001b18 	.word	0x20001b18
 8007d10:	20001b1c 	.word	0x20001b1c
 8007d14:	20001bcc 	.word	0x20001bcc
 8007d18:	20001b2c 	.word	0x20001b2c
 8007d1c:	08008880 	.word	0x08008880

08007d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3b04      	subs	r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f023 0201 	bic.w	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3b04      	subs	r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d50:	4a0c      	ldr	r2, [pc, #48]	; (8007d84 <pxPortInitialiseStack+0x64>)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3b14      	subs	r3, #20
 8007d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3b04      	subs	r3, #4
 8007d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f06f 0202 	mvn.w	r2, #2
 8007d6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3b20      	subs	r3, #32
 8007d74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d76:	68fb      	ldr	r3, [r7, #12]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	08007d89 	.word	0x08007d89

08007d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <prvTaskExitError+0x54>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9a:	d00a      	beq.n	8007db2 <prvTaskExitError+0x2a>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60fb      	str	r3, [r7, #12]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <prvTaskExitError+0x28>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	60bb      	str	r3, [r7, #8]
}
 8007dc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dc6:	bf00      	nop
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0fc      	beq.n	8007dc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	2000000c 	.word	0x2000000c

08007de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <pxCurrentTCBConst2>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	6808      	ldr	r0, [r1, #0]
 8007de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	f380 8809 	msr	PSP, r0
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	4770      	bx	lr
 8007dfc:	f3af 8000 	nop.w

08007e00 <pxCurrentTCBConst2>:
 8007e00:	200015f0 	.word	0x200015f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e08:	4808      	ldr	r0, [pc, #32]	; (8007e2c <prvPortStartFirstTask+0x24>)
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f380 8808 	msr	MSP, r0
 8007e12:	f04f 0000 	mov.w	r0, #0
 8007e16:	f380 8814 	msr	CONTROL, r0
 8007e1a:	b662      	cpsie	i
 8007e1c:	b661      	cpsie	f
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	df00      	svc	0
 8007e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e2a:	bf00      	nop
 8007e2c:	e000ed08 	.word	0xe000ed08

08007e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e36:	4b46      	ldr	r3, [pc, #280]	; (8007f50 <xPortStartScheduler+0x120>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a46      	ldr	r2, [pc, #280]	; (8007f54 <xPortStartScheduler+0x124>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d10a      	bne.n	8007e56 <xPortStartScheduler+0x26>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	613b      	str	r3, [r7, #16]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e56:	4b3e      	ldr	r3, [pc, #248]	; (8007f50 <xPortStartScheduler+0x120>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a3f      	ldr	r2, [pc, #252]	; (8007f58 <xPortStartScheduler+0x128>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d10a      	bne.n	8007e76 <xPortStartScheduler+0x46>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	60fb      	str	r3, [r7, #12]
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e76:	4b39      	ldr	r3, [pc, #228]	; (8007f5c <xPortStartScheduler+0x12c>)
 8007e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	22ff      	movs	r2, #255	; 0xff
 8007e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <xPortStartScheduler+0x130>)
 8007e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e9e:	4b31      	ldr	r3, [pc, #196]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ea4:	e009      	b.n	8007eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ea6:	4b2f      	ldr	r3, [pc, #188]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	4a2d      	ldr	r2, [pc, #180]	; (8007f64 <xPortStartScheduler+0x134>)
 8007eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b80      	cmp	r3, #128	; 0x80
 8007ec4:	d0ef      	beq.n	8007ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ec6:	4b27      	ldr	r3, [pc, #156]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1c3 0307 	rsb	r3, r3, #7
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d00a      	beq.n	8007ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	60bb      	str	r3, [r7, #8]
}
 8007ee4:	bf00      	nop
 8007ee6:	e7fe      	b.n	8007ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ee8:	4b1e      	ldr	r3, [pc, #120]	; (8007f64 <xPortStartScheduler+0x134>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	4a1d      	ldr	r2, [pc, #116]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ef2:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <xPortStartScheduler+0x134>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007efa:	4a1a      	ldr	r2, [pc, #104]	; (8007f64 <xPortStartScheduler+0x134>)
 8007efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f06:	4b18      	ldr	r3, [pc, #96]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a14      	ldr	r2, [pc, #80]	; (8007f68 <xPortStartScheduler+0x138>)
 8007f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f1e:	f000 f8dd 	bl	80080dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f22:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <xPortStartScheduler+0x13c>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f28:	f000 f8fc 	bl	8008124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f2c:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <xPortStartScheduler+0x140>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0f      	ldr	r2, [pc, #60]	; (8007f70 <xPortStartScheduler+0x140>)
 8007f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f38:	f7ff ff66 	bl	8007e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f3c:	f7ff f846 	bl	8006fcc <vTaskSwitchContext>
	prvTaskExitError();
 8007f40:	f7ff ff22 	bl	8007d88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	e000ed00 	.word	0xe000ed00
 8007f54:	410fc271 	.word	0x410fc271
 8007f58:	410fc270 	.word	0x410fc270
 8007f5c:	e000e400 	.word	0xe000e400
 8007f60:	20001c1c 	.word	0x20001c1c
 8007f64:	20001c20 	.word	0x20001c20
 8007f68:	e000ed20 	.word	0xe000ed20
 8007f6c:	2000000c 	.word	0x2000000c
 8007f70:	e000ef34 	.word	0xe000ef34

08007f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	607b      	str	r3, [r7, #4]
}
 8007f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <vPortEnterCritical+0x58>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3301      	adds	r3, #1
 8007f94:	4a0d      	ldr	r2, [pc, #52]	; (8007fcc <vPortEnterCritical+0x58>)
 8007f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f98:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <vPortEnterCritical+0x58>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d10f      	bne.n	8007fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <vPortEnterCritical+0x5c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	603b      	str	r3, [r7, #0]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <vPortEnterCritical+0x4a>
	}
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	2000000c 	.word	0x2000000c
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fda:	4b12      	ldr	r3, [pc, #72]	; (8008024 <vPortExitCritical+0x50>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <vPortExitCritical+0x24>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	607b      	str	r3, [r7, #4]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <vPortExitCritical+0x50>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	4a09      	ldr	r2, [pc, #36]	; (8008024 <vPortExitCritical+0x50>)
 8008000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008002:	4b08      	ldr	r3, [pc, #32]	; (8008024 <vPortExitCritical+0x50>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <vPortExitCritical+0x42>
 800800a:	2300      	movs	r3, #0
 800800c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	f383 8811 	msr	BASEPRI, r3
}
 8008014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	2000000c 	.word	0x2000000c
	...

08008030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008030:	f3ef 8009 	mrs	r0, PSP
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4b15      	ldr	r3, [pc, #84]	; (8008090 <pxCurrentTCBConst>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f01e 0f10 	tst.w	lr, #16
 8008040:	bf08      	it	eq
 8008042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	6010      	str	r0, [r2, #0]
 800804c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008054:	f380 8811 	msr	BASEPRI, r0
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f7fe ffb4 	bl	8006fcc <vTaskSwitchContext>
 8008064:	f04f 0000 	mov.w	r0, #0
 8008068:	f380 8811 	msr	BASEPRI, r0
 800806c:	bc09      	pop	{r0, r3}
 800806e:	6819      	ldr	r1, [r3, #0]
 8008070:	6808      	ldr	r0, [r1, #0]
 8008072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008076:	f01e 0f10 	tst.w	lr, #16
 800807a:	bf08      	it	eq
 800807c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008080:	f380 8809 	msr	PSP, r0
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	f3af 8000 	nop.w

08008090 <pxCurrentTCBConst>:
 8008090:	200015f0 	.word	0x200015f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop

08008098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	607b      	str	r3, [r7, #4]
}
 80080b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080b2:	f7fe fed1 	bl	8006e58 <xTaskIncrementTick>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080bc:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <SysTick_Handler+0x40>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	2300      	movs	r3, #0
 80080c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	f383 8811 	msr	BASEPRI, r3
}
 80080ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	e000ed04 	.word	0xe000ed04

080080dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <vPortSetupTimerInterrupt+0x34>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <vPortSetupTimerInterrupt+0x38>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080ec:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <vPortSetupTimerInterrupt+0x3c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a0a      	ldr	r2, [pc, #40]	; (800811c <vPortSetupTimerInterrupt+0x40>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	099b      	lsrs	r3, r3, #6
 80080f8:	4a09      	ldr	r2, [pc, #36]	; (8008120 <vPortSetupTimerInterrupt+0x44>)
 80080fa:	3b01      	subs	r3, #1
 80080fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080fe:	4b04      	ldr	r3, [pc, #16]	; (8008110 <vPortSetupTimerInterrupt+0x34>)
 8008100:	2207      	movs	r2, #7
 8008102:	601a      	str	r2, [r3, #0]
}
 8008104:	bf00      	nop
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	e000e010 	.word	0xe000e010
 8008114:	e000e018 	.word	0xe000e018
 8008118:	20000000 	.word	0x20000000
 800811c:	10624dd3 	.word	0x10624dd3
 8008120:	e000e014 	.word	0xe000e014

08008124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008134 <vPortEnableVFP+0x10>
 8008128:	6801      	ldr	r1, [r0, #0]
 800812a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800812e:	6001      	str	r1, [r0, #0]
 8008130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008132:	bf00      	nop
 8008134:	e000ed88 	.word	0xe000ed88

08008138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800813e:	f3ef 8305 	mrs	r3, IPSR
 8008142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b0f      	cmp	r3, #15
 8008148:	d914      	bls.n	8008174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <vPortValidateInterruptPriority+0x70>)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4413      	add	r3, r2
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008154:	4b15      	ldr	r3, [pc, #84]	; (80081ac <vPortValidateInterruptPriority+0x74>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	7afa      	ldrb	r2, [r7, #11]
 800815a:	429a      	cmp	r2, r3
 800815c:	d20a      	bcs.n	8008174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <vPortValidateInterruptPriority+0x78>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <vPortValidateInterruptPriority+0x7c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d90a      	bls.n	800819a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	603b      	str	r3, [r7, #0]
}
 8008196:	bf00      	nop
 8008198:	e7fe      	b.n	8008198 <vPortValidateInterruptPriority+0x60>
	}
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	e000e3f0 	.word	0xe000e3f0
 80081ac:	20001c1c 	.word	0x20001c1c
 80081b0:	e000ed0c 	.word	0xe000ed0c
 80081b4:	20001c20 	.word	0x20001c20

080081b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081c4:	f7fe fd8c 	bl	8006ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081c8:	4b58      	ldr	r3, [pc, #352]	; (800832c <pvPortMalloc+0x174>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081d0:	f000 f910 	bl	80083f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081d4:	4b56      	ldr	r3, [pc, #344]	; (8008330 <pvPortMalloc+0x178>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4013      	ands	r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f040 808e 	bne.w	80082fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01d      	beq.n	8008224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081e8:	2208      	movs	r2, #8
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4413      	add	r3, r2
 80081ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d014      	beq.n	8008224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f023 0307 	bic.w	r3, r3, #7
 8008200:	3308      	adds	r3, #8
 8008202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <pvPortMalloc+0x6c>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	617b      	str	r3, [r7, #20]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d069      	beq.n	80082fe <pvPortMalloc+0x146>
 800822a:	4b42      	ldr	r3, [pc, #264]	; (8008334 <pvPortMalloc+0x17c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d864      	bhi.n	80082fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008234:	4b40      	ldr	r3, [pc, #256]	; (8008338 <pvPortMalloc+0x180>)
 8008236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008238:	4b3f      	ldr	r3, [pc, #252]	; (8008338 <pvPortMalloc+0x180>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800823e:	e004      	b.n	800824a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	429a      	cmp	r2, r3
 8008252:	d903      	bls.n	800825c <pvPortMalloc+0xa4>
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1f1      	bne.n	8008240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800825c:	4b33      	ldr	r3, [pc, #204]	; (800832c <pvPortMalloc+0x174>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008262:	429a      	cmp	r2, r3
 8008264:	d04b      	beq.n	80082fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2208      	movs	r2, #8
 800826c:	4413      	add	r3, r2
 800826e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	2308      	movs	r3, #8
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	429a      	cmp	r2, r3
 8008286:	d91f      	bls.n	80082c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <pvPortMalloc+0xf8>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	613b      	str	r3, [r7, #16]
}
 80082ac:	bf00      	nop
 80082ae:	e7fe      	b.n	80082ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	1ad2      	subs	r2, r2, r3
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082c2:	69b8      	ldr	r0, [r7, #24]
 80082c4:	f000 f8f8 	bl	80084b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082c8:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <pvPortMalloc+0x17c>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	4a18      	ldr	r2, [pc, #96]	; (8008334 <pvPortMalloc+0x17c>)
 80082d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082d6:	4b17      	ldr	r3, [pc, #92]	; (8008334 <pvPortMalloc+0x17c>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b18      	ldr	r3, [pc, #96]	; (800833c <pvPortMalloc+0x184>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d203      	bcs.n	80082ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082e2:	4b14      	ldr	r3, [pc, #80]	; (8008334 <pvPortMalloc+0x17c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a15      	ldr	r2, [pc, #84]	; (800833c <pvPortMalloc+0x184>)
 80082e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <pvPortMalloc+0x178>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	431a      	orrs	r2, r3
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082fe:	f7fe fcfd 	bl	8006cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <pvPortMalloc+0x16a>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60fb      	str	r3, [r7, #12]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <pvPortMalloc+0x168>
	return pvReturn;
 8008322:	69fb      	ldr	r3, [r7, #28]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3728      	adds	r7, #40	; 0x28
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	200027e4 	.word	0x200027e4
 8008330:	200027f0 	.word	0x200027f0
 8008334:	200027e8 	.word	0x200027e8
 8008338:	200027dc 	.word	0x200027dc
 800833c:	200027ec 	.word	0x200027ec

08008340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d048      	beq.n	80083e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008352:	2308      	movs	r3, #8
 8008354:	425b      	negs	r3, r3
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	4b21      	ldr	r3, [pc, #132]	; (80083ec <vPortFree+0xac>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <vPortFree+0x44>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	60fb      	str	r3, [r7, #12]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <vPortFree+0x62>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60bb      	str	r3, [r7, #8]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	4b11      	ldr	r3, [pc, #68]	; (80083ec <vPortFree+0xac>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d019      	beq.n	80083e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d115      	bne.n	80083e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <vPortFree+0xac>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	401a      	ands	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083c8:	f7fe fc8a 	bl	8006ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <vPortFree+0xb0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4413      	add	r3, r2
 80083d6:	4a06      	ldr	r2, [pc, #24]	; (80083f0 <vPortFree+0xb0>)
 80083d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083da:	6938      	ldr	r0, [r7, #16]
 80083dc:	f000 f86c 	bl	80084b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80083e0:	f7fe fc8c 	bl	8006cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083e4:	bf00      	nop
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	200027f0 	.word	0x200027f0
 80083f0:	200027e8 	.word	0x200027e8

080083f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80083fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008400:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <prvHeapInit+0xac>)
 8008402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00c      	beq.n	8008428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3307      	adds	r3, #7
 8008412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0307 	bic.w	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	4a1f      	ldr	r2, [pc, #124]	; (80084a0 <prvHeapInit+0xac>)
 8008424:	4413      	add	r3, r2
 8008426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800842c:	4a1d      	ldr	r2, [pc, #116]	; (80084a4 <prvHeapInit+0xb0>)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008432:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <prvHeapInit+0xb0>)
 8008434:	2200      	movs	r2, #0
 8008436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4413      	add	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008440:	2208      	movs	r2, #8
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4a15      	ldr	r2, [pc, #84]	; (80084a8 <prvHeapInit+0xb4>)
 8008454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <prvHeapInit+0xb4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2200      	movs	r2, #0
 800845c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800845e:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <prvHeapInit+0xb4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008474:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <prvHeapInit+0xb4>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4a0a      	ldr	r2, [pc, #40]	; (80084ac <prvHeapInit+0xb8>)
 8008482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <prvHeapInit+0xbc>)
 800848a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800848c:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <prvHeapInit+0xc0>)
 800848e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20001c24 	.word	0x20001c24
 80084a4:	200027dc 	.word	0x200027dc
 80084a8:	200027e4 	.word	0x200027e4
 80084ac:	200027ec 	.word	0x200027ec
 80084b0:	200027e8 	.word	0x200027e8
 80084b4:	200027f0 	.word	0x200027f0

080084b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <prvInsertBlockIntoFreeList+0xac>)
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e002      	b.n	80084cc <prvInsertBlockIntoFreeList+0x14>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d8f7      	bhi.n	80084c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d108      	bne.n	80084fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	441a      	add	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	441a      	add	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d118      	bne.n	8008540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <prvInsertBlockIntoFreeList+0xb0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d00d      	beq.n	8008536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	441a      	add	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e008      	b.n	8008548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008536:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <prvInsertBlockIntoFreeList+0xb0>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e003      	b.n	8008548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d002      	beq.n	8008556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	200027dc 	.word	0x200027dc
 8008568:	200027e4 	.word	0x200027e4

0800856c <__errno>:
 800856c:	4b01      	ldr	r3, [pc, #4]	; (8008574 <__errno+0x8>)
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000010 	.word	0x20000010

08008578 <__libc_init_array>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	4d0d      	ldr	r5, [pc, #52]	; (80085b0 <__libc_init_array+0x38>)
 800857c:	4c0d      	ldr	r4, [pc, #52]	; (80085b4 <__libc_init_array+0x3c>)
 800857e:	1b64      	subs	r4, r4, r5
 8008580:	10a4      	asrs	r4, r4, #2
 8008582:	2600      	movs	r6, #0
 8008584:	42a6      	cmp	r6, r4
 8008586:	d109      	bne.n	800859c <__libc_init_array+0x24>
 8008588:	4d0b      	ldr	r5, [pc, #44]	; (80085b8 <__libc_init_array+0x40>)
 800858a:	4c0c      	ldr	r4, [pc, #48]	; (80085bc <__libc_init_array+0x44>)
 800858c:	f000 f906 	bl	800879c <_init>
 8008590:	1b64      	subs	r4, r4, r5
 8008592:	10a4      	asrs	r4, r4, #2
 8008594:	2600      	movs	r6, #0
 8008596:	42a6      	cmp	r6, r4
 8008598:	d105      	bne.n	80085a6 <__libc_init_array+0x2e>
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a0:	4798      	blx	r3
 80085a2:	3601      	adds	r6, #1
 80085a4:	e7ee      	b.n	8008584 <__libc_init_array+0xc>
 80085a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085aa:	4798      	blx	r3
 80085ac:	3601      	adds	r6, #1
 80085ae:	e7f2      	b.n	8008596 <__libc_init_array+0x1e>
 80085b0:	080088f0 	.word	0x080088f0
 80085b4:	080088f0 	.word	0x080088f0
 80085b8:	080088f0 	.word	0x080088f0
 80085bc:	080088f4 	.word	0x080088f4

080085c0 <malloc>:
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <malloc+0xc>)
 80085c2:	4601      	mov	r1, r0
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	f000 b871 	b.w	80086ac <_malloc_r>
 80085ca:	bf00      	nop
 80085cc:	20000010 	.word	0x20000010

080085d0 <free>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <free+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f000 b819 	b.w	800860c <_free_r>
 80085da:	bf00      	nop
 80085dc:	20000010 	.word	0x20000010

080085e0 <memcpy>:
 80085e0:	440a      	add	r2, r1
 80085e2:	4291      	cmp	r1, r2
 80085e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085e8:	d100      	bne.n	80085ec <memcpy+0xc>
 80085ea:	4770      	bx	lr
 80085ec:	b510      	push	{r4, lr}
 80085ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085f6:	4291      	cmp	r1, r2
 80085f8:	d1f9      	bne.n	80085ee <memcpy+0xe>
 80085fa:	bd10      	pop	{r4, pc}

080085fc <memset>:
 80085fc:	4402      	add	r2, r0
 80085fe:	4603      	mov	r3, r0
 8008600:	4293      	cmp	r3, r2
 8008602:	d100      	bne.n	8008606 <memset+0xa>
 8008604:	4770      	bx	lr
 8008606:	f803 1b01 	strb.w	r1, [r3], #1
 800860a:	e7f9      	b.n	8008600 <memset+0x4>

0800860c <_free_r>:
 800860c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800860e:	2900      	cmp	r1, #0
 8008610:	d048      	beq.n	80086a4 <_free_r+0x98>
 8008612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008616:	9001      	str	r0, [sp, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f1a1 0404 	sub.w	r4, r1, #4
 800861e:	bfb8      	it	lt
 8008620:	18e4      	addlt	r4, r4, r3
 8008622:	f000 f8ad 	bl	8008780 <__malloc_lock>
 8008626:	4a20      	ldr	r2, [pc, #128]	; (80086a8 <_free_r+0x9c>)
 8008628:	9801      	ldr	r0, [sp, #4]
 800862a:	6813      	ldr	r3, [r2, #0]
 800862c:	4615      	mov	r5, r2
 800862e:	b933      	cbnz	r3, 800863e <_free_r+0x32>
 8008630:	6063      	str	r3, [r4, #4]
 8008632:	6014      	str	r4, [r2, #0]
 8008634:	b003      	add	sp, #12
 8008636:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800863a:	f000 b8a7 	b.w	800878c <__malloc_unlock>
 800863e:	42a3      	cmp	r3, r4
 8008640:	d90b      	bls.n	800865a <_free_r+0x4e>
 8008642:	6821      	ldr	r1, [r4, #0]
 8008644:	1862      	adds	r2, r4, r1
 8008646:	4293      	cmp	r3, r2
 8008648:	bf04      	itt	eq
 800864a:	681a      	ldreq	r2, [r3, #0]
 800864c:	685b      	ldreq	r3, [r3, #4]
 800864e:	6063      	str	r3, [r4, #4]
 8008650:	bf04      	itt	eq
 8008652:	1852      	addeq	r2, r2, r1
 8008654:	6022      	streq	r2, [r4, #0]
 8008656:	602c      	str	r4, [r5, #0]
 8008658:	e7ec      	b.n	8008634 <_free_r+0x28>
 800865a:	461a      	mov	r2, r3
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b10b      	cbz	r3, 8008664 <_free_r+0x58>
 8008660:	42a3      	cmp	r3, r4
 8008662:	d9fa      	bls.n	800865a <_free_r+0x4e>
 8008664:	6811      	ldr	r1, [r2, #0]
 8008666:	1855      	adds	r5, r2, r1
 8008668:	42a5      	cmp	r5, r4
 800866a:	d10b      	bne.n	8008684 <_free_r+0x78>
 800866c:	6824      	ldr	r4, [r4, #0]
 800866e:	4421      	add	r1, r4
 8008670:	1854      	adds	r4, r2, r1
 8008672:	42a3      	cmp	r3, r4
 8008674:	6011      	str	r1, [r2, #0]
 8008676:	d1dd      	bne.n	8008634 <_free_r+0x28>
 8008678:	681c      	ldr	r4, [r3, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	6053      	str	r3, [r2, #4]
 800867e:	4421      	add	r1, r4
 8008680:	6011      	str	r1, [r2, #0]
 8008682:	e7d7      	b.n	8008634 <_free_r+0x28>
 8008684:	d902      	bls.n	800868c <_free_r+0x80>
 8008686:	230c      	movs	r3, #12
 8008688:	6003      	str	r3, [r0, #0]
 800868a:	e7d3      	b.n	8008634 <_free_r+0x28>
 800868c:	6825      	ldr	r5, [r4, #0]
 800868e:	1961      	adds	r1, r4, r5
 8008690:	428b      	cmp	r3, r1
 8008692:	bf04      	itt	eq
 8008694:	6819      	ldreq	r1, [r3, #0]
 8008696:	685b      	ldreq	r3, [r3, #4]
 8008698:	6063      	str	r3, [r4, #4]
 800869a:	bf04      	itt	eq
 800869c:	1949      	addeq	r1, r1, r5
 800869e:	6021      	streq	r1, [r4, #0]
 80086a0:	6054      	str	r4, [r2, #4]
 80086a2:	e7c7      	b.n	8008634 <_free_r+0x28>
 80086a4:	b003      	add	sp, #12
 80086a6:	bd30      	pop	{r4, r5, pc}
 80086a8:	200027f4 	.word	0x200027f4

080086ac <_malloc_r>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	1ccd      	adds	r5, r1, #3
 80086b0:	f025 0503 	bic.w	r5, r5, #3
 80086b4:	3508      	adds	r5, #8
 80086b6:	2d0c      	cmp	r5, #12
 80086b8:	bf38      	it	cc
 80086ba:	250c      	movcc	r5, #12
 80086bc:	2d00      	cmp	r5, #0
 80086be:	4606      	mov	r6, r0
 80086c0:	db01      	blt.n	80086c6 <_malloc_r+0x1a>
 80086c2:	42a9      	cmp	r1, r5
 80086c4:	d903      	bls.n	80086ce <_malloc_r+0x22>
 80086c6:	230c      	movs	r3, #12
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	2000      	movs	r0, #0
 80086cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ce:	f000 f857 	bl	8008780 <__malloc_lock>
 80086d2:	4921      	ldr	r1, [pc, #132]	; (8008758 <_malloc_r+0xac>)
 80086d4:	680a      	ldr	r2, [r1, #0]
 80086d6:	4614      	mov	r4, r2
 80086d8:	b99c      	cbnz	r4, 8008702 <_malloc_r+0x56>
 80086da:	4f20      	ldr	r7, [pc, #128]	; (800875c <_malloc_r+0xb0>)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	b923      	cbnz	r3, 80086ea <_malloc_r+0x3e>
 80086e0:	4621      	mov	r1, r4
 80086e2:	4630      	mov	r0, r6
 80086e4:	f000 f83c 	bl	8008760 <_sbrk_r>
 80086e8:	6038      	str	r0, [r7, #0]
 80086ea:	4629      	mov	r1, r5
 80086ec:	4630      	mov	r0, r6
 80086ee:	f000 f837 	bl	8008760 <_sbrk_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d123      	bne.n	800873e <_malloc_r+0x92>
 80086f6:	230c      	movs	r3, #12
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f846 	bl	800878c <__malloc_unlock>
 8008700:	e7e3      	b.n	80086ca <_malloc_r+0x1e>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	1b5b      	subs	r3, r3, r5
 8008706:	d417      	bmi.n	8008738 <_malloc_r+0x8c>
 8008708:	2b0b      	cmp	r3, #11
 800870a:	d903      	bls.n	8008714 <_malloc_r+0x68>
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	441c      	add	r4, r3
 8008710:	6025      	str	r5, [r4, #0]
 8008712:	e004      	b.n	800871e <_malloc_r+0x72>
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	42a2      	cmp	r2, r4
 8008718:	bf0c      	ite	eq
 800871a:	600b      	streq	r3, [r1, #0]
 800871c:	6053      	strne	r3, [r2, #4]
 800871e:	4630      	mov	r0, r6
 8008720:	f000 f834 	bl	800878c <__malloc_unlock>
 8008724:	f104 000b 	add.w	r0, r4, #11
 8008728:	1d23      	adds	r3, r4, #4
 800872a:	f020 0007 	bic.w	r0, r0, #7
 800872e:	1ac2      	subs	r2, r0, r3
 8008730:	d0cc      	beq.n	80086cc <_malloc_r+0x20>
 8008732:	1a1b      	subs	r3, r3, r0
 8008734:	50a3      	str	r3, [r4, r2]
 8008736:	e7c9      	b.n	80086cc <_malloc_r+0x20>
 8008738:	4622      	mov	r2, r4
 800873a:	6864      	ldr	r4, [r4, #4]
 800873c:	e7cc      	b.n	80086d8 <_malloc_r+0x2c>
 800873e:	1cc4      	adds	r4, r0, #3
 8008740:	f024 0403 	bic.w	r4, r4, #3
 8008744:	42a0      	cmp	r0, r4
 8008746:	d0e3      	beq.n	8008710 <_malloc_r+0x64>
 8008748:	1a21      	subs	r1, r4, r0
 800874a:	4630      	mov	r0, r6
 800874c:	f000 f808 	bl	8008760 <_sbrk_r>
 8008750:	3001      	adds	r0, #1
 8008752:	d1dd      	bne.n	8008710 <_malloc_r+0x64>
 8008754:	e7cf      	b.n	80086f6 <_malloc_r+0x4a>
 8008756:	bf00      	nop
 8008758:	200027f4 	.word	0x200027f4
 800875c:	200027f8 	.word	0x200027f8

08008760 <_sbrk_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d06      	ldr	r5, [pc, #24]	; (800877c <_sbrk_r+0x1c>)
 8008764:	2300      	movs	r3, #0
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	602b      	str	r3, [r5, #0]
 800876c:	f7f8 f8e6 	bl	800093c <_sbrk>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_sbrk_r+0x1a>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_sbrk_r+0x1a>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	20002e74 	.word	0x20002e74

08008780 <__malloc_lock>:
 8008780:	4801      	ldr	r0, [pc, #4]	; (8008788 <__malloc_lock+0x8>)
 8008782:	f000 b809 	b.w	8008798 <__retarget_lock_acquire_recursive>
 8008786:	bf00      	nop
 8008788:	20002e7c 	.word	0x20002e7c

0800878c <__malloc_unlock>:
 800878c:	4801      	ldr	r0, [pc, #4]	; (8008794 <__malloc_unlock+0x8>)
 800878e:	f000 b804 	b.w	800879a <__retarget_lock_release_recursive>
 8008792:	bf00      	nop
 8008794:	20002e7c 	.word	0x20002e7c

08008798 <__retarget_lock_acquire_recursive>:
 8008798:	4770      	bx	lr

0800879a <__retarget_lock_release_recursive>:
 800879a:	4770      	bx	lr

0800879c <_init>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	bf00      	nop
 80087a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a2:	bc08      	pop	{r3}
 80087a4:	469e      	mov	lr, r3
 80087a6:	4770      	bx	lr

080087a8 <_fini>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr
