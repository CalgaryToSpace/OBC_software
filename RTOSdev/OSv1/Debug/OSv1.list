
OSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b4  080085b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085bc  080085bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085bc  080085bc  000185bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085c0  080085c0  000185c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080085c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c918  20000074  08008638  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c98c  08008638  0002c98c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac30  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e6c  00000000  00000000  0004acd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  0004fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002ebd5  00000000  00000000  000518e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000226ab  00000000  00000000  000804b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001184a7  00000000  00000000  000a2b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001bb007  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b90  00000000  00000000  001bb060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007efc  00000000  00000000  001bcbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800845c 	.word	0x0800845c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800845c 	.word	0x0800845c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 ffd1 	bl	80014a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 fd12 	bl	8000f28 <SystemClock_Config>
  startUart();
 8000504:	f000 fcf6 	bl	8000ef4 <startUart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f005 f920 	bl	800574c <osKernelInitialize>

  /* Create the thread(s) */


  /* USER CODE BEGIN RTOS_THREADS */
  head = NULL;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <main+0x30>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
  startThread(mainThread, osPriorityHigh, "Main", 8*128);
 8000512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <main+0x34>)
 8000518:	2128      	movs	r1, #40	; 0x28
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <main+0x38>)
 800051c:	f000 fb06 	bl	8000b2c <startThread>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
   osKernelStart();
 8000520:	f005 f948 	bl	80057b4 <osKernelStart>
  //char* taskName = "Test 1";
  //startTask(functionName, 10, taskName, 4*128);
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x2c>
 8000526:	bf00      	nop
 8000528:	2000c304 	.word	0x2000c304
 800052c:	08008474 	.word	0x08008474
 8000530:	08000dc5 	.word	0x08000dc5

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_MspInit+0x4c>)
 8000548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800054a:	4a10      	ldr	r2, [pc, #64]	; (800058c <HAL_MspInit+0x4c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6613      	str	r3, [r2, #96]	; 0x60
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_MspInit+0x4c>)
 8000554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_MspInit+0x4c>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <HAL_MspInit+0x4c>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_MspInit+0x4c>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	210f      	movs	r1, #15
 800057a:	f06f 0001 	mvn.w	r0, #1
 800057e:	f001 f8a5 	bl	80016cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a44      	ldr	r2, [pc, #272]	; (80006c0 <HAL_UART_MspInit+0x130>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d154      	bne.n	800065c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80005b2:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80005b6:	4a43      	ldr	r2, [pc, #268]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80005be:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
 80005c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a3d      	ldr	r2, [pc, #244]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <HAL_UART_MspInit+0x134>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80005e2:	f001 fed5 	bl	8002390 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80005e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80005f8:	2308      	movs	r3, #8
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4831      	ldr	r0, [pc, #196]	; (80006c8 <HAL_UART_MspInit+0x138>)
 8000604:	f001 fafe 	bl	8001c04 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000608:	4b30      	ldr	r3, [pc, #192]	; (80006cc <HAL_UART_MspInit+0x13c>)
 800060a:	4a31      	ldr	r2, [pc, #196]	; (80006d0 <HAL_UART_MspInit+0x140>)
 800060c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000610:	2222      	movs	r2, #34	; 0x22
 8000612:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000614:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <HAL_UART_MspInit+0x13c>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000620:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <HAL_UART_MspInit+0x13c>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <HAL_UART_MspInit+0x13c>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800063e:	4823      	ldr	r0, [pc, #140]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000640:	f001 f86e 	bl	8001720 <HAL_DMA_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800064a:	f7ff ff73 	bl	8000534 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000652:	679a      	str	r2, [r3, #120]	; 0x78
 8000654:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <HAL_UART_MspInit+0x13c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800065a:	e02d      	b.n	80006b8 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <HAL_UART_MspInit+0x144>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d128      	bne.n	80006b8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_UART_MspInit+0x134>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <HAL_UART_MspInit+0x134>)
 800066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000670:	6593      	str	r3, [r2, #88]	; 0x58
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_UART_MspInit+0x134>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_UART_MspInit+0x134>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <HAL_UART_MspInit+0x134>)
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_UART_MspInit+0x134>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800069a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006a8:	2307      	movs	r3, #7
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <HAL_UART_MspInit+0x148>)
 80006b4:	f001 faa6 	bl	8001c04 <HAL_GPIO_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3730      	adds	r7, #48	; 0x30
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40008000 	.word	0x40008000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48001800 	.word	0x48001800
 80006cc:	2000c874 	.word	0x2000c874
 80006d0:	40020008 	.word	0x40020008
 80006d4:	40004800 	.word	0x40004800
 80006d8:	48000c00 	.word	0x48000c00

080006dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a17      	ldr	r2, [pc, #92]	; (8000758 <HAL_SPI_MspInit+0x7c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d128      	bne.n	8000750 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_SPI_MspInit+0x80>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <HAL_SPI_MspInit+0x80>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000708:	6613      	str	r3, [r2, #96]	; 0x60
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_SPI_MspInit+0x80>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_SPI_MspInit+0x80>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <HAL_SPI_MspInit+0x80>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_SPI_MspInit+0x80>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800072e:	23e0      	movs	r3, #224	; 0xe0
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800073e:	2305      	movs	r3, #5
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f001 fa5a 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40013000 	.word	0x40013000
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000780:	d154      	bne.n	800082c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800079a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007ac:	230a      	movs	r3, #10
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 fa23 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f001 fa15 	bl	8001c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 80007e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d114      	bne.n	8000828 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000816:	f001 fdab 	bl	8002370 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <HAL_PCD_MspInit+0xd4>)
 8000820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000824:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000826:	e001      	b.n	800082c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000828:	f001 fda2 	bl	8002370 <HAL_PWREx_EnableVddUSB>
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	201d      	movs	r0, #29
 800084e:	f000 ff3d 	bl	80016cc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000852:	201d      	movs	r0, #29
 8000854:	f000 ff56 	bl	8001704 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_InitTick+0xa0>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <HAL_InitTick+0xa0>)
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	6593      	str	r3, [r2, #88]	; 0x58
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_InitTick+0xa0>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000870:	f107 0210 	add.w	r2, r7, #16
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fbae 	bl	8002fdc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000880:	f002 fb80 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8000884:	4603      	mov	r3, r0
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <HAL_InitTick+0xa4>)
 800088e:	fba2 2303 	umull	r2, r3, r2, r3
 8000892:	0c9b      	lsrs	r3, r3, #18
 8000894:	3b01      	subs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_InitTick+0xa8>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <HAL_InitTick+0xac>)
 800089c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_InitTick+0xa8>)
 80008a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_InitTick+0xa8>)
 80008a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008aa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_InitTick+0xa8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_InitTick+0xa8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <HAL_InitTick+0xa8>)
 80008ba:	f003 fa3e 	bl	8003d3a <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d104      	bne.n	80008ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <HAL_InitTick+0xa8>)
 80008c6:	f003 fa99 	bl	8003dfc <HAL_TIM_Base_Start_IT>
 80008ca:	4603      	mov	r3, r0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3730      	adds	r7, #48	; 0x30
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	431bde83 	.word	0x431bde83
 80008e0:	2000c308 	.word	0x2000c308
 80008e4:	40000400 	.word	0x40000400

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Channel1_IRQHandler+0x10>)
 800091a:	f001 f824 	bl	8001966 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000c874 	.word	0x2000c874

08000928 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM3_IRQHandler+0x10>)
 800092e:	f003 fad5 	bl	8003edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000c308 	.word	0x2000c308

0800093c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <_sbrk+0x5c>)
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <_sbrk+0x60>)
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <_sbrk+0x64>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <_sbrk+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800096c:	f007 fc5e 	bl	800822c <__errno>
 8000970:	4603      	mov	r3, r0
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	e009      	b.n	8000990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_sbrk+0x64>)
 800098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200a0000 	.word	0x200a0000
 800099c:	00000400 	.word	0x00000400
 80009a0:	20000090 	.word	0x20000090
 80009a4:	2000c990 	.word	0x2000c990

080009a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <SystemInit+0x64>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <SystemInit+0x64>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <SystemInit+0x68>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a13      	ldr	r2, [pc, #76]	; (8000a10 <SystemInit+0x68>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <SystemInit+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <SystemInit+0x68>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <SystemInit+0x68>)
 80009d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <SystemInit+0x68>)
 80009e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <SystemInit+0x68>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <SystemInit+0x68>)
 80009ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <SystemInit+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SystemInit+0x64>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	40021000 	.word	0x40021000

08000a14 <addChildNodeToParent>:
#include "uart.h"
#include <stdio.h>



void addChildNodeToParent(struct threadNode* parentNode, struct threadNode* child){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	if(parentNode == NULL)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d04a      	beq.n	8000aba <addChildNodeToParent+0xa6>
		return;
	if(parentNode->children == NULL){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d10e      	bne.n	8000a4a <addChildNodeToParent+0x36>
		parentNode->children = (struct threadNode**) malloc(sizeof(struct threadNode*));
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f007 fc27 	bl	8008280 <malloc>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	609a      	str	r2, [r3, #8]
		parentNode->childCount = 1;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
		parentNode->children[0] = child;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e038      	b.n	8000abc <addChildNodeToParent+0xa8>
	}
	else{
		parentNode->childCount += 1;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60da      	str	r2, [r3, #12]
		struct threadNode** temp = parentNode->children;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	60bb      	str	r3, [r7, #8]
		parentNode->children = (struct threadNode**) malloc(sizeof(struct threadNode*) * parentNode->childCount);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f007 fc0d 	bl	8008280 <malloc>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < parentNode->childCount - 1; i++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	e00d      	b.n	8000a90 <addChildNodeToParent+0x7c>
			parentNode->children[i] = temp[i];
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	441a      	add	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6899      	ldr	r1, [r3, #8]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	440b      	add	r3, r1
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < parentNode->childCount - 1; i++){
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbeb      	blt.n	8000a74 <addChildNodeToParent+0x60>
		}
		parentNode->children[parentNode->childCount - 1] = child;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	601a      	str	r2, [r3, #0]
		free(temp);
 8000ab2:	68b8      	ldr	r0, [r7, #8]
 8000ab4:	f007 fbec 	bl	8008290 <free>
 8000ab8:	e000      	b.n	8000abc <addChildNodeToParent+0xa8>
		return;
 8000aba:	bf00      	nop
	}
}
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <initializeThreadNode>:

void checkMainModuleNodesStatus(){

}

void initializeThreadNode(struct threadNode* parent, osThreadId_t handle, struct threadInfo* theInfo){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	struct threadNode* theNode = (struct threadNode*)malloc(sizeof(struct threadNode));
 8000ad0:	201c      	movs	r0, #28
 8000ad2:	f007 fbd5 	bl	8008280 <malloc>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	617b      	str	r3, [r7, #20]
	theNode->parent = parent;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	601a      	str	r2, [r3, #0]
	theNode->handle = handle;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	605a      	str	r2, [r3, #4]
	theNode->children = NULL;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
	theNode->childCount = 0;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
	theNode->threadState = theInfo->threadState;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	611a      	str	r2, [r3, #16]
	theNode->threadPriority = theInfo->threadPriority;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	615a      	str	r2, [r3, #20]
	theNode->threadName = theInfo->threadName;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	619a      	str	r2, [r3, #24]
	if(parent == NULL)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d103      	bne.n	8000b18 <initializeThreadNode+0x54>
			head = theNode;
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <initializeThreadNode+0x64>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	6013      	str	r3, [r2, #0]
	else
		addChildNodeToParent(parent, theNode);

}
 8000b16:	e003      	b.n	8000b20 <initializeThreadNode+0x5c>
		addChildNodeToParent(parent, theNode);
 8000b18:	6979      	ldr	r1, [r7, #20]
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ff7a 	bl	8000a14 <addChildNodeToParent>
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000c304 	.word	0x2000c304

08000b2c <startThread>:
// Function that puts thread information into a struct of type threadInfo, starts
// the thread, and returns the struct. Requires a function pointer to the function
// the new thread will run, the priority to set the new thread to, the name of the
// new thread, and the stack size of the new thread.

void startThread(void (*funPtr), int tp, char* tn, int stackSize){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b092      	sub	sp, #72	; 0x48
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
	struct threadInfo info;
	info.threadPriority = tp;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	info.threadName = tn;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	643b      	str	r3, [r7, #64]	; 0x40
	osThreadAttr_t threadAttributes = {
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2224      	movs	r2, #36	; 0x24
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f007 fbb6 	bl	80082bc <memset>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = tn,
			.priority = (osPriority_t) tp,
			.stack_size = stackSize
	};
	osThreadId_t threadHandle;
	threadHandle = osThreadNew(funPtr, NULL, &threadAttributes);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f107 0214 	add.w	r2, r7, #20
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f004 fe5b 	bl	8005820 <osThreadNew>
 8000b6a:	6478      	str	r0, [r7, #68]	; 0x44
	if(head == NULL){
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <startThread+0x84>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d109      	bne.n	8000b88 <startThread+0x5c>
		initializeThreadNode(NULL, osThreadGetId(), &info);
 8000b74:	f004 fefa 	bl	800596c <osThreadGetId>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ff9f 	bl	8000ac4 <initializeThreadNode>
	}
	else{
		initializeThreadNode(findNode(osThreadGetId()), threadHandle, &info);
		findNode(threadHandle);
	}
	return;
 8000b86:	e00f      	b.n	8000ba8 <startThread+0x7c>
		initializeThreadNode(findNode(osThreadGetId()), threadHandle, &info);
 8000b88:	f004 fef0 	bl	800596c <osThreadGetId>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f88a 	bl	8000ca8 <findNode>
 8000b94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b98:	461a      	mov	r2, r3
 8000b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b9c:	f7ff ff92 	bl	8000ac4 <initializeThreadNode>
		findNode(threadHandle);
 8000ba0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000ba2:	f000 f881 	bl	8000ca8 <findNode>
	return;
 8000ba6:	bf00      	nop
}
 8000ba8:	3748      	adds	r7, #72	; 0x48
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000c304 	.word	0x2000c304

08000bb4 <newTreeQueue>:
		sendUartMessage("\r", 1);
		sendUartMessage("I am Main", 9);
	}
}

struct treeQueue* newTreeQueue(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	struct treeQueue *queue = (struct treeQueue*) malloc(sizeof(struct treeQueue));
 8000bba:	2014      	movs	r0, #20
 8000bbc:	f007 fb60 	bl	8008280 <malloc>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	607b      	str	r3, [r7, #4]
	queue->maxSize = 100;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2264      	movs	r2, #100	; 0x64
 8000bc8:	601a      	str	r2, [r3, #0]
	queue->items = (struct threadNode**)malloc(sizeof(struct threadNode*) * 100);
 8000bca:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000bce:	f007 fb57 	bl	8008280 <malloc>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	611a      	str	r2, [r3, #16]
	queue->itemCount = 0;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
	queue->readIndex = 0;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
	queue->writeIndex = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
	return queue;
 8000bec:	687b      	ldr	r3, [r7, #4]
};
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <enqueue>:

void enqueue(struct treeQueue* queue, struct threadNode* toAdd){
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
	if(queue->itemCount == queue->maxSize){
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d01d      	beq.n	8000c48 <enqueue+0x52>

		return;
	}
	queue->items[queue->writeIndex] = toAdd;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691a      	ldr	r2, [r3, #16]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	601a      	str	r2, [r3, #0]
	queue->writeIndex++;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60da      	str	r2, [r3, #12]
	queue->itemCount++;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	605a      	str	r2, [r3, #4]
	queue->writeIndex = queue->writeIndex % queue->maxSize;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c3c:	fb02 f201 	mul.w	r2, r2, r1
 8000c40:	1a9a      	subs	r2, r3, r2
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60da      	str	r2, [r3, #12]
	return;
 8000c46:	e000      	b.n	8000c4a <enqueue+0x54>
		return;
 8000c48:	bf00      	nop
}
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <dequeue>:

struct threadNode* dequeue(struct treeQueue* queue){
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if(queue->itemCount == 0){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <dequeue+0x14>

		return NULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	e018      	b.n	8000c9a <dequeue+0x46>
	}
	struct threadNode* temp = queue->items[queue->readIndex];
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691a      	ldr	r2, [r3, #16]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60fb      	str	r3, [r7, #12]
	queue->readIndex++;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	609a      	str	r2, [r3, #8]
	queue->readIndex = queue->readIndex % queue->maxSize;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c8e:	fb02 f201 	mul.w	r2, r2, r1
 8000c92:	1a9a      	subs	r2, r3, r2
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	609a      	str	r2, [r3, #8]
	return temp;
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <findNode>:

struct threadNode* findNode(osThreadId_t handle){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if(handle == NULL){
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <findNode+0x12>
			return NULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e037      	b.n	8000d2a <findNode+0x82>
		}
	if(head->handle == handle){
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <findNode+0x8c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d102      	bne.n	8000ccc <findNode+0x24>
		return head;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <findNode+0x8c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	e02e      	b.n	8000d2a <findNode+0x82>
	}
	struct treeQueue* theQueue = newTreeQueue();
 8000ccc:	f7ff ff72 	bl	8000bb4 <newTreeQueue>
 8000cd0:	6138      	str	r0, [r7, #16]
	enqueue(theQueue, head);
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <findNode+0x8c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6938      	ldr	r0, [r7, #16]
 8000cda:	f7ff ff8c 	bl	8000bf6 <enqueue>
	struct threadNode* currentNode;
	while(theQueue->itemCount != 0){
 8000cde:	e01f      	b.n	8000d20 <findNode+0x78>
		currentNode = dequeue(theQueue);
 8000ce0:	6938      	ldr	r0, [r7, #16]
 8000ce2:	f7ff ffb7 	bl	8000c54 <dequeue>
 8000ce6:	60f8      	str	r0, [r7, #12]
		if(currentNode->handle == handle){
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d101      	bne.n	8000cf6 <findNode+0x4e>
			return currentNode;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	e019      	b.n	8000d2a <findNode+0x82>
		}
		else{
			for(int i = 0; i < currentNode->childCount; i++){
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e00c      	b.n	8000d16 <findNode+0x6e>
				enqueue(theQueue, currentNode->children[i]);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6938      	ldr	r0, [r7, #16]
 8000d0c:	f7ff ff73 	bl	8000bf6 <enqueue>
			for(int i = 0; i < currentNode->childCount; i++){
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbed      	blt.n	8000cfc <findNode+0x54>
	while(theQueue->itemCount != 0){
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1db      	bne.n	8000ce0 <findNode+0x38>
			}
		}
	}
	return NULL;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000c304 	.word	0x2000c304

08000d38 <printAllThreadInfo>:

int verifyAllAlive(){

}

void printAllThreadInfo(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
	sendUartMessage("\n", 1);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	481d      	ldr	r0, [pc, #116]	; (8000db8 <printAllThreadInfo+0x80>)
 8000d42:	f000 fb71 	bl	8001428 <sendUartMessage>
	sendUartMessage("\r", 1);
 8000d46:	2101      	movs	r1, #1
 8000d48:	481c      	ldr	r0, [pc, #112]	; (8000dbc <printAllThreadInfo+0x84>)
 8000d4a:	f000 fb6d 	bl	8001428 <sendUartMessage>
	sendUartMessage("I am the: ", 10);
 8000d4e:	210a      	movs	r1, #10
 8000d50:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <printAllThreadInfo+0x88>)
 8000d52:	f000 fb69 	bl	8001428 <sendUartMessage>
	struct threadNode* current = findNode(osThreadGetId());
 8000d56:	f004 fe09 	bl	800596c <osThreadGetId>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ffa3 	bl	8000ca8 <findNode>
 8000d62:	6038      	str	r0, [r7, #0]
	sendUartMessage(current->threadName, 4);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fb5c 	bl	8001428 <sendUartMessage>
	for(int i = 0; i < current->childCount; i++){
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	e015      	b.n	8000da2 <printAllThreadInfo+0x6a>
		sendUartMessage("\n", 1);
 8000d76:	2101      	movs	r1, #1
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <printAllThreadInfo+0x80>)
 8000d7a:	f000 fb55 	bl	8001428 <sendUartMessage>
		sendUartMessage("\r", 1);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	480e      	ldr	r0, [pc, #56]	; (8000dbc <printAllThreadInfo+0x84>)
 8000d82:	f000 fb51 	bl	8001428 <sendUartMessage>
		sendUartMessage(current->children[i]->threadName, 3);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	2103      	movs	r1, #3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fb46 	bl	8001428 <sendUartMessage>
	for(int i = 0; i < current->childCount; i++){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbe4      	blt.n	8000d76 <printAllThreadInfo+0x3e>
	}
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	0800847c 	.word	0x0800847c
 8000dbc:	08008480 	.word	0x08008480
 8000dc0:	080084f4 	.word	0x080084f4

08000dc4 <mainThread>:
//UART_HandleTypeDef huart3;
//DMA_HandleTypeDef hdma_lpuart1_rx;
//SPI_HandleTypeDef hspi1;
//PCD_HandleTypeDef hpcd_USB_OTG_FS;

void mainThread(void *argument){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	startThread(test1, osPriorityLow, "One", 4*64);
 8000dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <mainThread+0x3c>)
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <mainThread+0x40>)
 8000dd6:	f7ff fea9 	bl	8000b2c <startThread>
	for(;;){
		//vTaskDelay(pdMS_TO_TICKS(1000));
		sendUartMessage("zro", 3);
 8000dda:	2103      	movs	r1, #3
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <mainThread+0x44>)
 8000dde:	f000 fb23 	bl	8001428 <sendUartMessage>
		printAllThreadInfo();
 8000de2:	f7ff ffa9 	bl	8000d38 <printAllThreadInfo>
		sendUartMessage("\n", 1);
 8000de6:	2101      	movs	r1, #1
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <mainThread+0x48>)
 8000dea:	f000 fb1d 	bl	8001428 <sendUartMessage>
		sendUartMessage("\r", 1);
 8000dee:	2101      	movs	r1, #1
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <mainThread+0x4c>)
 8000df2:	f000 fb19 	bl	8001428 <sendUartMessage>
		vTaskDelay(pdMS_TO_TICKS(50));
 8000df6:	2032      	movs	r0, #50	; 0x32
 8000df8:	f005 fd36 	bl	8006868 <vTaskDelay>
		sendUartMessage("zro", 3);
 8000dfc:	e7ed      	b.n	8000dda <mainThread+0x16>
 8000dfe:	bf00      	nop
 8000e00:	08008500 	.word	0x08008500
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08008504 	.word	0x08008504
 8000e0c:	08008508 	.word	0x08008508
 8000e10:	0800850c 	.word	0x0800850c

08000e14 <test1>:
	}
}

//Test function
void test1(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  startThread(test2, osPriorityLow, "Two", 4*64);
 8000e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e20:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <test1+0x64>)
 8000e22:	2108      	movs	r1, #8
 8000e24:	4815      	ldr	r0, [pc, #84]	; (8000e7c <test1+0x68>)
 8000e26:	f7ff fe81 	bl	8000b2c <startThread>
  //vTaskDelay(pdMS_TO_TICKS(2000));
  sendUartMessage("Uno", 3);
 8000e2a:	2103      	movs	r1, #3
 8000e2c:	4814      	ldr	r0, [pc, #80]	; (8000e80 <test1+0x6c>)
 8000e2e:	f000 fafb 	bl	8001428 <sendUartMessage>
  printAllThreadInfo();
 8000e32:	f7ff ff81 	bl	8000d38 <printAllThreadInfo>
  sendUartMessage("\n", 1);
 8000e36:	2101      	movs	r1, #1
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <test1+0x70>)
 8000e3a:	f000 faf5 	bl	8001428 <sendUartMessage>
  sendUartMessage("\r", 1);
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <test1+0x74>)
 8000e42:	f000 faf1 	bl	8001428 <sendUartMessage>
  for(;;)
  {
	sendUartMessage("\n", 1);
 8000e46:	2101      	movs	r1, #1
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <test1+0x70>)
 8000e4a:	f000 faed 	bl	8001428 <sendUartMessage>
	sendUartMessage("\r", 1);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <test1+0x74>)
 8000e52:	f000 fae9 	bl	8001428 <sendUartMessage>
	sendUartMessage("111111", 6);
 8000e56:	2106      	movs	r1, #6
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <test1+0x78>)
 8000e5a:	f000 fae5 	bl	8001428 <sendUartMessage>
	sendUartMessage("\n", 1);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4808      	ldr	r0, [pc, #32]	; (8000e84 <test1+0x70>)
 8000e62:	f000 fae1 	bl	8001428 <sendUartMessage>
	sendUartMessage("\r", 1);
 8000e66:	2101      	movs	r1, #1
 8000e68:	4807      	ldr	r0, [pc, #28]	; (8000e88 <test1+0x74>)
 8000e6a:	f000 fadd 	bl	8001428 <sendUartMessage>
    vTaskDelay(pdMS_TO_TICKS(50));
 8000e6e:	2032      	movs	r0, #50	; 0x32
 8000e70:	f005 fcfa 	bl	8006868 <vTaskDelay>
	sendUartMessage("\n", 1);
 8000e74:	e7e7      	b.n	8000e46 <test1+0x32>
 8000e76:	bf00      	nop
 8000e78:	08008510 	.word	0x08008510
 8000e7c:	08000e91 	.word	0x08000e91
 8000e80:	08008514 	.word	0x08008514
 8000e84:	08008508 	.word	0x08008508
 8000e88:	0800850c 	.word	0x0800850c
 8000e8c:	08008518 	.word	0x08008518

08000e90 <test2>:
  }
}

//Test function
void test2(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	//startThread(test3, osPriorityHigh, "fre", 4*64);
	//vTaskDelay(pdMS_TO_TICKS(3000));
	sendUartMessage("duo", 3);
 8000e98:	2103      	movs	r1, #3
 8000e9a:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <test2+0x54>)
 8000e9c:	f000 fac4 	bl	8001428 <sendUartMessage>
	printAllThreadInfo();
 8000ea0:	f7ff ff4a 	bl	8000d38 <printAllThreadInfo>
	sendUartMessage("\n", 1);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <test2+0x58>)
 8000ea8:	f000 fabe 	bl	8001428 <sendUartMessage>
	sendUartMessage("\r", 1);
 8000eac:	2101      	movs	r1, #1
 8000eae:	480f      	ldr	r0, [pc, #60]	; (8000eec <test2+0x5c>)
 8000eb0:	f000 faba 	bl	8001428 <sendUartMessage>
	for(;;)
	{
		sendUartMessage("\n", 1);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <test2+0x58>)
 8000eb8:	f000 fab6 	bl	8001428 <sendUartMessage>
		sendUartMessage("\r", 1);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <test2+0x5c>)
 8000ec0:	f000 fab2 	bl	8001428 <sendUartMessage>
		sendUartMessage("222222", 6);
 8000ec4:	2106      	movs	r1, #6
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <test2+0x60>)
 8000ec8:	f000 faae 	bl	8001428 <sendUartMessage>
		sendUartMessage("\n", 1);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <test2+0x58>)
 8000ed0:	f000 faaa 	bl	8001428 <sendUartMessage>
		sendUartMessage("\r", 1);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <test2+0x5c>)
 8000ed8:	f000 faa6 	bl	8001428 <sendUartMessage>
		vTaskDelay(pdMS_TO_TICKS(50));
 8000edc:	2032      	movs	r0, #50	; 0x32
 8000ede:	f005 fcc3 	bl	8006868 <vTaskDelay>
		sendUartMessage("\n", 1);
 8000ee2:	e7e7      	b.n	8000eb4 <test2+0x24>
 8000ee4:	08008520 	.word	0x08008520
 8000ee8:	08008508 	.word	0x08008508
 8000eec:	0800850c 	.word	0x0800850c
 8000ef0:	08008524 	.word	0x08008524

08000ef4 <startUart>:
uint8_t UART1_txBuffer[160] = {0};
uint8_t UART1_rxBuffer[160] = {0};


// Function containing calls to all necessary UART initialization functions
void startUart(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000ef8:	f000 f9be 	bl	8001278 <MX_GPIO_Init>
	MX_DMA_Init();
 8000efc:	f000 f992 	bl	8001224 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 8000f00:	f000 f890 	bl	8001024 <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init();
 8000f04:	f000 f8da 	bl	80010bc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000f08:	f000 f962 	bl	80011d0 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000f0c:	f000 f922 	bl	8001154 <MX_SPI1_Init>
	HAL_UART_Receive_DMA(&hlpuart1, UART1_rxBuffer, 160);
 8000f10:	22a0      	movs	r2, #160	; 0xa0
 8000f12:	4903      	ldr	r1, [pc, #12]	; (8000f20 <startUart+0x2c>)
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <startUart+0x30>)
 8000f16:	f003 fac9 	bl	80044ac <HAL_UART_Receive_DMA>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000094 	.word	0x20000094
 8000f24:	2000c7e8 	.word	0x2000c7e8

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b0bc      	sub	sp, #240	; 0xf0
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f32:	2244      	movs	r2, #68	; 0x44
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f007 f9c0 	bl	80082bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2294      	movs	r2, #148	; 0x94
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f007 f9b2 	bl	80082bc <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f001 f965 	bl	8002228 <HAL_PWREx_ControlVoltageScaling>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000f64:	f7ff fae6 	bl	8000534 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f68:	2322      	movs	r3, #34	; 0x22
 8000f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7c:	2340      	movs	r3, #64	; 0x40
 8000f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000f94:	231e      	movs	r3, #30
 8000f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 f9fd 	bl	80023b0 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fbc:	f7ff faba 	bl	8000534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fe08 	bl	8002bfc <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000ff2:	f7ff fa9f 	bl	8000534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8000ff6:	f242 0324 	movw	r3, #8228	; 0x2024
 8000ffa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001004:	2300      	movs	r3, #0
 8001006:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4618      	mov	r0, r3
 800100c:	f002 f8da 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001016:	f7ff fa8d 	bl	8000534 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	37f0      	adds	r7, #240	; 0xf0
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <MX_LPUART1_UART_Init+0x94>)
 800102c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001030:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001034:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800106c:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 800106e:	f003 f935 	bl	80042dc <HAL_UART_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001078:	f7ff fa5c 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001080:	f003 ffe7 	bl	8005052 <HAL_UARTEx_SetTxFifoThreshold>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800108a:	f7ff fa53 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108e:	2100      	movs	r1, #0
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 8001092:	f004 f81c 	bl	80050ce <HAL_UARTEx_SetRxFifoThreshold>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800109c:	f7ff fa4a 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_LPUART1_UART_Init+0x90>)
 80010a2:	f003 ff9d 	bl	8004fe0 <HAL_UARTEx_DisableFifoMode>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f7ff fa42 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000c7e8 	.word	0x2000c7e8
 80010b8:	40008000 	.word	0x40008000

080010bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <MX_USART3_UART_Init+0x94>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001106:	f003 f8e9 	bl	80042dc <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001110:	f7ff fa10 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001118:	f003 ff9b 	bl	8005052 <HAL_UARTEx_SetTxFifoThreshold>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001122:	f7ff fa07 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <MX_USART3_UART_Init+0x90>)
 800112a:	f003 ffd0 	bl	80050ce <HAL_UARTEx_SetRxFifoThreshold>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001134:	f7ff f9fe 	bl	8000534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_USART3_UART_Init+0x90>)
 800113a:	f003 ff51 	bl	8004fe0 <HAL_UARTEx_DisableFifoMode>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001144:	f7ff f9f6 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000c354 	.word	0x2000c354
 8001150:	40004800 	.word	0x40004800

08001154 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_SPI1_Init+0x74>)
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <MX_SPI1_Init+0x78>)
 800115c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_SPI1_Init+0x74>)
 8001160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_SPI1_Init+0x74>)
 800116e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001172:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_SPI1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_SPI1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_SPI1_Init+0x74>)
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_SPI1_Init+0x74>)
 800118a:	2208      	movs	r2, #8
 800118c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_SPI1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_SPI1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_SPI1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_SPI1_Init+0x74>)
 80011a2:	2207      	movs	r2, #7
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_SPI1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_SPI1_Init+0x74>)
 80011ae:	2208      	movs	r2, #8
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_SPI1_Init+0x74>)
 80011b4:	f002 fd1e 	bl	8003bf4 <HAL_SPI_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011be:	f7ff f9b9 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000c8d4 	.word	0x2000c8d4
 80011cc:	40013000 	.word	0x40013000

080011d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011de:	2206      	movs	r2, #6
 80011e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001208:	2201      	movs	r2, #1
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800120e:	f000 fea3 	bl	8001f58 <HAL_PCD_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001218:	f7ff f98c 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000c3e0 	.word	0x2000c3e0

08001224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_DMA_Init+0x50>)
 800122c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <MX_DMA_Init+0x50>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6493      	str	r3, [r2, #72]	; 0x48
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_DMA_Init+0x50>)
 8001238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_DMA_Init+0x50>)
 8001244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <MX_DMA_Init+0x50>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6493      	str	r3, [r2, #72]	; 0x48
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_DMA_Init+0x50>)
 8001250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2105      	movs	r1, #5
 800125e:	200b      	movs	r0, #11
 8001260:	f000 fa34 	bl	80016cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001264:	200b      	movs	r0, #11
 8001266:	f000 fa4d 	bl	8001704 <HAL_NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <MX_GPIO_Init+0x160>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a51      	ldr	r2, [pc, #324]	; (80013d8 <MX_GPIO_Init+0x160>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b4f      	ldr	r3, [pc, #316]	; (80013d8 <MX_GPIO_Init+0x160>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a3f      	ldr	r2, [pc, #252]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a39      	ldr	r2, [pc, #228]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <MX_GPIO_Init+0x160>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <MX_GPIO_Init+0x160>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <MX_GPIO_Init+0x160>)
 800130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <MX_GPIO_Init+0x160>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800131e:	f001 f837 	bl	8002390 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001328:	482c      	ldr	r0, [pc, #176]	; (80013dc <MX_GPIO_Init+0x164>)
 800132a:	f000 fdfd 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001334:	482a      	ldr	r0, [pc, #168]	; (80013e0 <MX_GPIO_Init+0x168>)
 8001336:	f000 fdf7 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	4829      	ldr	r0, [pc, #164]	; (80013e4 <MX_GPIO_Init+0x16c>)
 8001340:	f000 fdf2 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <MX_GPIO_Init+0x170>)
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4824      	ldr	r0, [pc, #144]	; (80013ec <MX_GPIO_Init+0x174>)
 800135a:	f000 fc53 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800135e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4819      	ldr	r0, [pc, #100]	; (80013dc <MX_GPIO_Init+0x164>)
 8001378:	f000 fc44 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800137c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4812      	ldr	r0, [pc, #72]	; (80013e0 <MX_GPIO_Init+0x168>)
 8001396:	f000 fc35 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800139a:	2320      	movs	r3, #32
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_GPIO_Init+0x16c>)
 80013b2:	f000 fc27 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013b6:	2340      	movs	r3, #64	; 0x40
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <MX_GPIO_Init+0x16c>)
 80013ca:	f000 fc1b 	bl	8001c04 <HAL_GPIO_Init>

}
 80013ce:	bf00      	nop
 80013d0:	3730      	adds	r7, #48	; 0x30
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000400 	.word	0x48000400
 80013e0:	48000c00 	.word	0x48000c00
 80013e4:	48001800 	.word	0x48001800
 80013e8:	10110000 	.word	0x10110000
 80013ec:	48000800 	.word	0x48000800

080013f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001402:	f000 f867 	bl	80014d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40000400 	.word	0x40000400

08001414 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <sendUartMessage>:

// Function that takes in a char pointer with a UART message to transmit and
// the length of said message
void sendUartMessage(char* message, int length){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)message, length, HAL_MAX_DELAY);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b29a      	uxth	r2, r3
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <sendUartMessage+0x24>)
 800143e:	f002 ff9d 	bl	800437c <HAL_UART_Transmit>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000c7e8 	.word	0x2000c7e8

08001450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001488 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff faa8 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001458:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800145a:	e003      	b.n	8001464 <LoopCopyDataInit>

0800145c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800145e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001460:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001462:	3104      	adds	r1, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001468:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800146a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800146c:	d3f6      	bcc.n	800145c <CopyDataInit>
	ldr	r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001470:	e002      	b.n	8001478 <LoopFillZerobss>

08001472 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001472:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001474:	f842 3b04 	str.w	r3, [r2], #4

08001478 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <LoopForever+0x16>)
	cmp	r2, r3
 800147a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800147c:	d3f9      	bcc.n	8001472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f006 fedb 	bl	8008238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001482:	f7ff f839 	bl	80004f8 <main>

08001486 <LoopForever>:

LoopForever:
    b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001488:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800148c:	080085c4 	.word	0x080085c4
	ldr	r0, =_sdata
 8001490:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001494:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001498:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800149c:	2000c98c 	.word	0x2000c98c

080014a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_IRQHandler>

080014a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f902 	bl	80016b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff f9c0 	bl	8000838 <HAL_InitTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	e001      	b.n	80014c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c4:	f7ff f83c 	bl	8000540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008
 80014f8:	2000c938 	.word	0x2000c938

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000c938 	.word	0x2000c938

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff4c 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016de:	f7ff ff61 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7ff ffb1 	bl	8001650 <NVIC_EncodePriority>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff80 	bl	80015fc <__NVIC_SetPriority>
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff54 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e08d      	b.n	800184e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b47      	ldr	r3, [pc, #284]	; (8001858 <HAL_DMA_Init+0x138>)
 800173a:	429a      	cmp	r2, r3
 800173c:	d80f      	bhi.n	800175e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	4b45      	ldr	r3, [pc, #276]	; (800185c <HAL_DMA_Init+0x13c>)
 8001746:	4413      	add	r3, r2
 8001748:	4a45      	ldr	r2, [pc, #276]	; (8001860 <HAL_DMA_Init+0x140>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	009a      	lsls	r2, r3, #2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a42      	ldr	r2, [pc, #264]	; (8001864 <HAL_DMA_Init+0x144>)
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
 800175c:	e00e      	b.n	800177c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_DMA_Init+0x148>)
 8001766:	4413      	add	r3, r2
 8001768:	4a3d      	ldr	r2, [pc, #244]	; (8001860 <HAL_DMA_Init+0x140>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	009a      	lsls	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a3c      	ldr	r2, [pc, #240]	; (800186c <HAL_DMA_Init+0x14c>)
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f9b6 	bl	8001b40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017dc:	d102      	bne.n	80017e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017f8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d010      	beq.n	8001824 <HAL_DMA_Init+0x104>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b04      	cmp	r3, #4
 8001808:	d80c      	bhi.n	8001824 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f9d6 	bl	8001bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	e008      	b.n	8001836 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40020407 	.word	0x40020407
 800185c:	bffdfff8 	.word	0xbffdfff8
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	40020000 	.word	0x40020000
 8001868:	bffdfbf8 	.word	0xbffdfbf8
 800186c:	40020400 	.word	0x40020400

08001870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_DMA_Start_IT+0x20>
 800188c:	2302      	movs	r3, #2
 800188e:	e066      	b.n	800195e <HAL_DMA_Start_IT+0xee>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d155      	bne.n	8001950 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f8fb 	bl	8001ac4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 020e 	orr.w	r2, r2, #14
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e00f      	b.n	8001908 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0204 	bic.w	r2, r2, #4
 80018f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 020a 	orr.w	r2, r2, #10
 8001906:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001924:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800193c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e005      	b.n	800195c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001958:	2302      	movs	r3, #2
 800195a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800195c:	7dfb      	ldrb	r3, [r7, #23]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f003 031c 	and.w	r3, r3, #28
 8001986:	2204      	movs	r2, #4
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d026      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x7a>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d021      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d107      	bne.n	80019ba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0204 	bic.w	r2, r2, #4
 80019b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f003 021c 	and.w	r2, r3, #28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	2104      	movs	r1, #4
 80019c8:	fa01 f202 	lsl.w	r2, r1, r2
 80019cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d071      	beq.n	8001aba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80019de:	e06c      	b.n	8001aba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f003 031c 	and.w	r3, r3, #28
 80019e8:	2202      	movs	r2, #2
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d02e      	beq.n	8001a52 <HAL_DMA_IRQHandler+0xec>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d029      	beq.n	8001a52 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10b      	bne.n	8001a24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 020a 	bic.w	r2, r2, #10
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 021c 	and.w	r2, r3, #28
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2102      	movs	r1, #2
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d038      	beq.n	8001aba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a50:	e033      	b.n	8001aba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f003 031c 	and.w	r3, r3, #28
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d02a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x156>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d025      	beq.n	8001abc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 020e 	bic.w	r2, r2, #14
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f003 021c 	and.w	r2, r3, #28
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
}
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ada:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001aec:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f003 021c 	and.w	r2, r3, #28
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f202 	lsl.w	r2, r1, r2
 8001b00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d108      	bne.n	8001b24 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b22:	e007      	b.n	8001b34 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	60da      	str	r2, [r3, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d80a      	bhi.n	8001b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6493      	str	r3, [r2, #72]	; 0x48
 8001b68:	e007      	b.n	8001b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	009a      	lsls	r2, r3, #2
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b74:	4413      	add	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3b08      	subs	r3, #8
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2201      	movs	r2, #1
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40020407 	.word	0x40020407
 8001bb0:	4002081c 	.word	0x4002081c
 8001bb4:	cccccccd 	.word	0xcccccccd
 8001bb8:	40020880 	.word	0x40020880

08001bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bde:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2201      	movs	r2, #1
 8001bea:	409a      	lsls	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	1000823f 	.word	0x1000823f
 8001c00:	40020940 	.word	0x40020940

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e166      	b.n	8001ee2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8158 	beq.w	8001edc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d00b      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c40:	2b11      	cmp	r3, #17
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0xea>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b12      	cmp	r3, #18
 8001cec:	d123      	bne.n	8001d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0203 	and.w	r2, r3, #3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80b2 	beq.w	8001edc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	4b61      	ldr	r3, [pc, #388]	; (8001f00 <HAL_GPIO_Init+0x2fc>)
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	4a60      	ldr	r2, [pc, #384]	; (8001f00 <HAL_GPIO_Init+0x2fc>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6613      	str	r3, [r2, #96]	; 0x60
 8001d84:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <HAL_GPIO_Init+0x2fc>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d90:	4a5c      	ldr	r2, [pc, #368]	; (8001f04 <HAL_GPIO_Init+0x300>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dba:	d02b      	beq.n	8001e14 <HAL_GPIO_Init+0x210>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_GPIO_Init+0x304>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d025      	beq.n	8001e10 <HAL_GPIO_Init+0x20c>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a51      	ldr	r2, [pc, #324]	; (8001f0c <HAL_GPIO_Init+0x308>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d01f      	beq.n	8001e0c <HAL_GPIO_Init+0x208>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a50      	ldr	r2, [pc, #320]	; (8001f10 <HAL_GPIO_Init+0x30c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d019      	beq.n	8001e08 <HAL_GPIO_Init+0x204>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_GPIO_Init+0x200>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4e      	ldr	r2, [pc, #312]	; (8001f18 <HAL_GPIO_Init+0x314>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00d      	beq.n	8001e00 <HAL_GPIO_Init+0x1fc>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a4d      	ldr	r2, [pc, #308]	; (8001f1c <HAL_GPIO_Init+0x318>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <HAL_GPIO_Init+0x1f8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_GPIO_Init+0x31c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_GPIO_Init+0x1f4>
 8001df4:	2307      	movs	r3, #7
 8001df6:	e00e      	b.n	8001e16 <HAL_GPIO_Init+0x212>
 8001df8:	2308      	movs	r3, #8
 8001dfa:	e00c      	b.n	8001e16 <HAL_GPIO_Init+0x212>
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	e00a      	b.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e00:	2305      	movs	r3, #5
 8001e02:	e008      	b.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e006      	b.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e004      	b.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e14:	2300      	movs	r3, #0
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	f002 0203 	and.w	r2, r2, #3
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	4093      	lsls	r3, r2
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e26:	4937      	ldr	r1, [pc, #220]	; (8001f04 <HAL_GPIO_Init+0x300>)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e34:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e58:	4a32      	ldr	r2, [pc, #200]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e5e:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e82:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eac:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed6:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f47f ae91 	bne.w	8001c14 <HAL_GPIO_Init+0x10>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	48000800 	.word	0x48000800
 8001f10:	48000c00 	.word	0x48000c00
 8001f14:	48001000 	.word	0x48001000
 8001f18:	48001400 	.word	0x48001400
 8001f1c:	48001800 	.word	0x48001800
 8001f20:	48001c00 	.word	0x48001c00
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	b08f      	sub	sp, #60	; 0x3c
 8001f5c:	af0a      	add	r7, sp, #40	; 0x28
 8001f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e116      	b.n	8002198 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d106      	bne.n	8001f8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7fe fbeb 	bl	8000760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 f989 	bl	80052c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	687e      	ldr	r6, [r7, #4]
 8001fb6:	466d      	mov	r5, sp
 8001fb8:	f106 0410 	add.w	r4, r6, #16
 8001fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fcc:	1d33      	adds	r3, r6, #4
 8001fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f003 f923 	bl	800521c <USB_CoreInit>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d7      	b.n	8002198 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 f977 	bl	80052e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e04a      	b.n	8002090 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	333d      	adds	r3, #61	; 0x3d
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	333c      	adds	r3, #60	; 0x3c
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	b298      	uxth	r0, r3
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3342      	adds	r3, #66	; 0x42
 8002036:	4602      	mov	r2, r0
 8002038:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	333f      	adds	r3, #63	; 0x3f
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3344      	adds	r3, #68	; 0x44
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3348      	adds	r3, #72	; 0x48
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3350      	adds	r3, #80	; 0x50
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	3301      	adds	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3af      	bcc.n	8001ffa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e044      	b.n	800212a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	3301      	adds	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3b5      	bcc.n	80020a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	687e      	ldr	r6, [r7, #4]
 800213c:	466d      	mov	r5, sp
 800213e:	f106 0410 	add.w	r4, r6, #16
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002152:	1d33      	adds	r3, r6, #4
 8002154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002156:	6838      	ldr	r0, [r7, #0]
 8002158:	f003 f8ee 	bl	8005338 <USB_DevInit>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e014      	b.n	8002198 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f80a 	bl	80021a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f003 fa7e 	bl	8005692 <USB_DevDisconnect>

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d2:	f043 0303 	orr.w	r3, r3, #3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f8:	d102      	bne.n	8002200 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80021fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fe:	e00b      	b.n	8002218 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220e:	d102      	bne.n	8002216 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002214:	e000      	b.n	8002218 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002216:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40007000 	.word	0x40007000

08002228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d141      	bne.n	80022ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002236:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002242:	d131      	bne.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002244:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800224a:	4a46      	ldr	r2, [pc, #280]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002250:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002254:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800225c:	4a41      	ldr	r2, [pc, #260]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002262:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002264:	4b40      	ldr	r3, [pc, #256]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2232      	movs	r2, #50	; 0x32
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	4a3f      	ldr	r2, [pc, #252]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	0c9b      	lsrs	r3, r3, #18
 8002276:	3301      	adds	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800227a:	e002      	b.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3b01      	subs	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002282:	4b38      	ldr	r3, [pc, #224]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d102      	bne.n	8002296 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f2      	bne.n	800227c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d158      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e057      	b.n	8002358 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ae:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022b8:	e04d      	b.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c0:	d141      	bne.n	8002346 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022c2:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d131      	bne.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d0:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e8:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2232      	movs	r2, #50	; 0x32
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	0c9b      	lsrs	r3, r3, #18
 8002302:	3301      	adds	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002306:	e002      	b.n	800230e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3b01      	subs	r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d102      	bne.n	8002322 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f2      	bne.n	8002308 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d112      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e011      	b.n	8002358 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002344:	e007      	b.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002354:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40007000 	.word	0x40007000
 8002368:	20000000 	.word	0x20000000
 800236c:	431bde83 	.word	0x431bde83

08002370 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_PWREx_EnableVddUSB+0x1c>)
 800237a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237e:	6053      	str	r3, [r2, #4]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40007000 	.word	0x40007000

08002390 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239e:	6053      	str	r3, [r2, #4]
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40007000 	.word	0x40007000

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f000 bc16 	b.w	8002bf0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c4:	4ba0      	ldr	r3, [pc, #640]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ce:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80e4 	beq.w	80025ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_RCC_OscConfig+0x4c>
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	f040 808b 	bne.w	800250a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	f040 8087 	bne.w	800250a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023fc:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_OscConfig+0x64>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e3ed      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_RCC_OscConfig+0x7e>
 8002424:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242c:	e005      	b.n	800243a <HAL_RCC_OscConfig+0x8a>
 800242e:	4b86      	ldr	r3, [pc, #536]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800243a:	4293      	cmp	r3, r2
 800243c:	d223      	bcs.n	8002486 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fdfc 	bl	8003040 <RCC_SetFlashLatencyFromMSIRange>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e3ce      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7c      	ldr	r2, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b7a      	ldr	r3, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4977      	ldr	r1, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002470:	4b75      	ldr	r3, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	4972      	ldr	r1, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
 8002484:	e025      	b.n	80024d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002486:	4b70      	ldr	r3, [pc, #448]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6f      	ldr	r2, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800248c:	f043 0308 	orr.w	r3, r3, #8
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	496a      	ldr	r1, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	4965      	ldr	r1, [pc, #404]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fdbc 	bl	8003040 <RCC_SetFlashLatencyFromMSIRange>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e38e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024d2:	f000 fcbf 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	495a      	ldr	r1, [pc, #360]	; (800264c <HAL_RCC_OscConfig+0x29c>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	4a58      	ldr	r2, [pc, #352]	; (8002650 <HAL_RCC_OscConfig+0x2a0>)
 80024f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024f2:	4b58      	ldr	r3, [pc, #352]	; (8002654 <HAL_RCC_OscConfig+0x2a4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f99e 	bl	8000838 <HAL_InitTick>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d052      	beq.n	80025ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	e372      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d032      	beq.n	8002578 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4c      	ldr	r2, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800251e:	f7fe ffed 	bl	80014fc <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002526:	f7fe ffe9 	bl	80014fc <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e35b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002544:	4b40      	ldr	r3, [pc, #256]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	493a      	ldr	r1, [pc, #232]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	4935      	ldr	r1, [pc, #212]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
 8002576:	e01a      	b.n	80025ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002578:	4b33      	ldr	r3, [pc, #204]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a32      	ldr	r2, [pc, #200]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002584:	f7fe ffba 	bl	80014fc <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800258c:	f7fe ffb6 	bl	80014fc <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e328      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x1dc>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d073      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x21c>
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d10e      	bne.n	80025e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d063      	beq.n	80026a0 <HAL_RCC_OscConfig+0x2f0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d15f      	bne.n	80026a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e305      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x24c>
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0x288>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x270>
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0x288>
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a05      	ldr	r2, [pc, #20]	; (8002648 <HAL_RCC_OscConfig+0x298>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01b      	beq.n	8002678 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe ff5c 	bl	80014fc <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002646:	e010      	b.n	800266a <HAL_RCC_OscConfig+0x2ba>
 8002648:	40021000 	.word	0x40021000
 800264c:	08008554 	.word	0x08008554
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe ff50 	bl	80014fc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e2c2      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266a:	4baf      	ldr	r3, [pc, #700]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x2a8>
 8002676:	e014      	b.n	80026a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe ff40 	bl	80014fc <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe ff3c 	bl	80014fc <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e2ae      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002692:	4ba5      	ldr	r3, [pc, #660]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x2d0>
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d060      	beq.n	8002770 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_OscConfig+0x310>
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d119      	bne.n	80026ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d116      	bne.n	80026ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c0:	4b99      	ldr	r3, [pc, #612]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x328>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e28b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b93      	ldr	r3, [pc, #588]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	4990      	ldr	r1, [pc, #576]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ec:	e040      	b.n	8002770 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d023      	beq.n	800273e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f6:	4b8c      	ldr	r3, [pc, #560]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a8b      	ldr	r2, [pc, #556]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fefb 	bl	80014fc <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe fef7 	bl	80014fc <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e269      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271c:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	497c      	ldr	r1, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
 800273c:	e018      	b.n	8002770 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273e:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a79      	ldr	r2, [pc, #484]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fed7 	bl	80014fc <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002752:	f7fe fed3 	bl	80014fc <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e245      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002764:	4b70      	ldr	r3, [pc, #448]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d03c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01c      	beq.n	80027be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002784:	4b68      	ldr	r3, [pc, #416]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278a:	4a67      	ldr	r2, [pc, #412]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe feb2 	bl	80014fc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe feae 	bl	80014fc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e220      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ae:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ef      	beq.n	800279c <HAL_RCC_OscConfig+0x3ec>
 80027bc:	e01b      	b.n	80027f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c4:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe fe95 	bl	80014fc <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d6:	f7fe fe91 	bl	80014fc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e203      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ef      	bne.n	80027d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80a6 	beq.w	8002950 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002808:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10d      	bne.n	8002830 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281e:	6593      	str	r3, [r2, #88]	; 0x58
 8002820:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282c:	2301      	movs	r3, #1
 800282e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002830:	4b3e      	ldr	r3, [pc, #248]	; (800292c <HAL_RCC_OscConfig+0x57c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d118      	bne.n	800286e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_RCC_OscConfig+0x57c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a3a      	ldr	r2, [pc, #232]	; (800292c <HAL_RCC_OscConfig+0x57c>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002848:	f7fe fe58 	bl	80014fc <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002850:	f7fe fe54 	bl	80014fc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1c6      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_RCC_OscConfig+0x57c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_RCC_OscConfig+0x4d8>
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	4a2a      	ldr	r2, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002886:	e024      	b.n	80028d2 <HAL_RCC_OscConfig+0x522>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d110      	bne.n	80028b2 <HAL_RCC_OscConfig+0x502>
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	4a24      	ldr	r2, [pc, #144]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b0:	e00f      	b.n	80028d2 <HAL_RCC_OscConfig+0x522>
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fe0f 	bl	80014fc <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe fe0b 	bl	80014fc <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e17b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_OscConfig+0x578>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ed      	beq.n	80028e2 <HAL_RCC_OscConfig+0x532>
 8002906:	e01a      	b.n	800293e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe fdf8 	bl	80014fc <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800290e:	e00f      	b.n	8002930 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe fdf4 	bl	80014fc <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d906      	bls.n	8002930 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e164      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002930:	4ba8      	ldr	r3, [pc, #672]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e8      	bne.n	8002910 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293e:	7ffb      	ldrb	r3, [r7, #31]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002944:	4ba3      	ldr	r3, [pc, #652]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4aa2      	ldr	r2, [pc, #648]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 800294a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d03c      	beq.n	80029d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01c      	beq.n	800299e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002964:	4b9b      	ldr	r3, [pc, #620]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800296a:	4a9a      	ldr	r2, [pc, #616]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe fdc2 	bl	80014fc <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800297c:	f7fe fdbe 	bl	80014fc <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e130      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800298e:	4b91      	ldr	r3, [pc, #580]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0ef      	beq.n	800297c <HAL_RCC_OscConfig+0x5cc>
 800299c:	e01b      	b.n	80029d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800299e:	4b8d      	ldr	r3, [pc, #564]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 80029a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029a4:	4a8b      	ldr	r2, [pc, #556]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe fda5 	bl	80014fc <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029b6:	f7fe fda1 	bl	80014fc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e113      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029c8:	4b82      	ldr	r3, [pc, #520]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 80029ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1ef      	bne.n	80029b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8107 	beq.w	8002bee <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	f040 80cb 	bne.w	8002b80 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029ea:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0203 	and.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d12c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d123      	bne.n	8002a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d11b      	bne.n	8002a58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d113      	bne.n	8002a58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	085b      	lsrs	r3, r3, #1
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d109      	bne.n	8002a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	3b01      	subs	r3, #1
 8002a52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d06d      	beq.n	8002b34 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d068      	beq.n	8002b30 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a6a:	4b5a      	ldr	r3, [pc, #360]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0ba      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b56      	ldr	r3, [pc, #344]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a55      	ldr	r2, [pc, #340]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a86:	f7fe fd39 	bl	80014fc <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe fd35 	bl	80014fc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0a7      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa0:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <HAL_RCC_OscConfig+0x828>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002abc:	3a01      	subs	r2, #1
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	4311      	orrs	r1, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ac6:	0212      	lsls	r2, r2, #8
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0552      	lsls	r2, r2, #21
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ada:	0852      	lsrs	r2, r2, #1
 8002adc:	3a01      	subs	r2, #1
 8002ade:	0652      	lsls	r2, r2, #25
 8002ae0:	4311      	orrs	r1, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae6:	06d2      	lsls	r2, r2, #27
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	493a      	ldr	r1, [pc, #232]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002af0:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a34      	ldr	r2, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b08:	f7fe fcf8 	bl	80014fc <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fcf4 	bl	80014fc <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e066      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2e:	e05e      	b.n	8002bee <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e05d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d156      	bne.n	8002bee <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a23      	ldr	r2, [pc, #140]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b58:	f7fe fcd0 	bl	80014fc <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fccc 	bl	80014fc <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e03e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x7b0>
 8002b7e:	e036      	b.n	8002bee <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d031      	beq.n	8002bea <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002ba4:	f023 0303 	bic.w	r3, r3, #3
 8002ba8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_OscConfig+0x824>)
 8002bb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe fc9f 	bl	80014fc <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc0:	e00c      	b.n	8002bdc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fe fc9b 	bl	80014fc <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d905      	bls.n	8002bdc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e00d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_OscConfig+0x848>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ec      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x812>
 8002be8:	e001      	b.n	8002bee <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e10f      	b.n	8002e34 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c14:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d910      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b86      	ldr	r3, [pc, #536]	; (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 020f 	bic.w	r2, r3, #15
 8002c2a:	4984      	ldr	r1, [pc, #528]	; (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b82      	ldr	r3, [pc, #520]	; (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0f7      	b.n	8002e34 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8089 	beq.w	8002d64 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d133      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5a:	4b79      	ldr	r3, [pc, #484]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0e4      	b.n	8002e34 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c6a:	f000 fa43 	bl	80030f4 <RCC_GetSysClockFreqFromPLLSource>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4a74      	ldr	r2, [pc, #464]	; (8002e44 <HAL_RCC_ClockConfig+0x248>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d955      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c82:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8a:	4a6d      	ldr	r2, [pc, #436]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e044      	b.n	8002d22 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d03e      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x126>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d13a      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cac:	4b64      	ldr	r3, [pc, #400]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb4:	4a62      	ldr	r2, [pc, #392]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e02f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d115      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0ac      	b.n	8002e34 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce2:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0a0      	b.n	8002e34 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf2:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e098      	b.n	8002e34 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d02:	f000 f8a7 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a4e      	ldr	r2, [pc, #312]	; (8002e44 <HAL_RCC_ClockConfig+0x248>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d909      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d16:	4a4a      	ldr	r2, [pc, #296]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b47      	ldr	r3, [pc, #284]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4944      	ldr	r1, [pc, #272]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d34:	f7fe fbe2 	bl	80014fc <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7fe fbde 	bl	80014fc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e070      	b.n	8002e34 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 020c 	and.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1eb      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d009      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4930      	ldr	r1, [pc, #192]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b80      	cmp	r3, #128	; 0x80
 8002d88:	d105      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d94:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d210      	bcs.n	8002dc6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 020f 	bic.w	r2, r3, #15
 8002dac:	4923      	ldr	r1, [pc, #140]	; (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e036      	b.n	8002e34 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	4918      	ldr	r1, [pc, #96]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4910      	ldr	r1, [pc, #64]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e04:	f000 f826 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	490c      	ldr	r1, [pc, #48]	; (8002e48 <HAL_RCC_ClockConfig+0x24c>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x250>)
 8002e22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x254>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fd05 	bl	8000838 <HAL_InitTick>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	40021000 	.word	0x40021000
 8002e44:	04c4b400 	.word	0x04c4b400
 8002e48:	08008554 	.word	0x08008554
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e62:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d121      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d11e      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e94:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e005      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d102      	bne.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e004      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ed8:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d134      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0xa6>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d003      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0xac>
 8002ef8:	e005      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002efc:	617b      	str	r3, [r7, #20]
      break;
 8002efe:	e005      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f02:	617b      	str	r3, [r7, #20]
      break;
 8002f04:	e002      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	617b      	str	r3, [r7, #20]
      break;
 8002f0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	fb02 f203 	mul.w	r2, r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	0e5b      	lsrs	r3, r3, #25
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	0800856c 	.word	0x0800856c
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	007a1200 	.word	0x007a1200

08002f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000

08002f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f88:	f7ff fff0 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	4904      	ldr	r1, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08008564 	.word	0x08008564

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fb4:	f7ff ffda 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0adb      	lsrs	r3, r3, #11
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08008564 	.word	0x08008564

08002fdc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	220f      	movs	r2, #15
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_GetClockConfig+0x5c>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0203 	and.w	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <HAL_RCC_GetClockConfig+0x5c>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <HAL_RCC_GetClockConfig+0x5c>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_GetClockConfig+0x5c>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	08db      	lsrs	r3, r3, #3
 8003016:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <HAL_RCC_GetClockConfig+0x60>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 020f 	and.w	r2, r3, #15
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	601a      	str	r2, [r3, #0]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40022000 	.word	0x40022000

08003040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003058:	f7ff f8c6 	bl	80021e8 <HAL_PWREx_GetVoltageRange>
 800305c:	6178      	str	r0, [r7, #20]
 800305e:	e014      	b.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	4a21      	ldr	r2, [pc, #132]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	6593      	str	r3, [r2, #88]	; 0x58
 800306c:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003078:	f7ff f8b6 	bl	80021e8 <HAL_PWREx_GetVoltageRange>
 800307c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	4a1a      	ldr	r2, [pc, #104]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003088:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003090:	d10b      	bne.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d913      	bls.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2ba0      	cmp	r3, #160	; 0xa0
 800309c:	d902      	bls.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800309e:	2302      	movs	r3, #2
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e00d      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a4:	2301      	movs	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e00a      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b7f      	cmp	r3, #127	; 0x7f
 80030ae:	d902      	bls.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030b0:	2302      	movs	r3, #2
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	e004      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b70      	cmp	r3, #112	; 0x70
 80030ba:	d101      	bne.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 020f 	bic.w	r2, r3, #15
 80030c8:	4909      	ldr	r1, [pc, #36]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40022000 	.word	0x40022000

080030f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80030fe:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d118      	bne.n	800313c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800310a:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003116:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e005      	b.n	8003132 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003126:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003132:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d003      	beq.n	8003154 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b03      	cmp	r3, #3
 8003150:	d003      	beq.n	800315a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003152:	e005      	b.n	8003160 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003156:	613b      	str	r3, [r7, #16]
    break;
 8003158:	e005      	b.n	8003166 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800315a:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800315c:	613b      	str	r3, [r7, #16]
    break;
 800315e:	e002      	b.n	8003166 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	613b      	str	r3, [r7, #16]
    break;
 8003164:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	3301      	adds	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	fb02 f203 	mul.w	r2, r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	0e5b      	lsrs	r3, r3, #25
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	3301      	adds	r3, #1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031a6:	683b      	ldr	r3, [r7, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40021000 	.word	0x40021000
 80031b8:	0800856c 	.word	0x0800856c
 80031bc:	00f42400 	.word	0x00f42400
 80031c0:	007a1200 	.word	0x007a1200

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d040      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d02a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d825      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d026      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d821      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d006      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d81d      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003200:	2b20      	cmp	r3, #32
 8003202:	d010      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003204:	e018      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003206:	4b89      	ldr	r3, [pc, #548]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4a88      	ldr	r2, [pc, #544]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003212:	e015      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fb02 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003224:	e00c      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3320      	adds	r3, #32
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fbed 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003236:	e003      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	74fb      	strb	r3, [r7, #19]
      break;
 800323c:	e000      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800323e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003246:	4b79      	ldr	r3, [pc, #484]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800324c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003254:	4975      	ldr	r1, [pc, #468]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800325c:	e001      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d047      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d030      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d82a      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800327e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003282:	d02a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003288:	d824      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800328a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328e:	d008      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d81e      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800329a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329e:	d010      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032a0:	e018      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a2:	4b62      	ldr	r3, [pc, #392]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a61      	ldr	r2, [pc, #388]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ae:	e015      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fab4 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c0:	e00c      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3320      	adds	r3, #32
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fb9f 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d2:	e003      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	74fb      	strb	r3, [r7, #19]
      break;
 80032d8:	e000      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80032da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032e2:	4b52      	ldr	r3, [pc, #328]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	494e      	ldr	r1, [pc, #312]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032f8:	e001      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 809f 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	4a40      	ldr	r2, [pc, #256]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6593      	str	r3, [r2, #88]	; 0x58
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3a      	ldr	r2, [pc, #232]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334e:	f7fe f8d5 	bl	80014fc <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003354:	e009      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7fe f8d1 	bl	80014fc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d902      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	74fb      	strb	r3, [r7, #19]
        break;
 8003368:	e005      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ef      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d15b      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01f      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	429a      	cmp	r2, r3
 8003398:	d019      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a6:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	4a1b      	ldr	r2, [pc, #108]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c6:	4a19      	ldr	r2, [pc, #100]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d016      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe f890 	bl	80014fc <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033de:	e00b      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe f88c 	bl	80014fc <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d902      	bls.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	74fb      	strb	r3, [r7, #19]
            break;
 80033f6:	e006      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ec      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10c      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003424:	e008      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	74bb      	strb	r3, [r7, #18]
 800342a:	e005      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003438:	7c7b      	ldrb	r3, [r7, #17]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4ba0      	ldr	r3, [pc, #640]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	4a9f      	ldr	r2, [pc, #636]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003448:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003456:	4b9a      	ldr	r3, [pc, #616]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 0203 	bic.w	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	4996      	ldr	r1, [pc, #600]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003478:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f023 020c 	bic.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	498e      	ldr	r1, [pc, #568]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349a:	4b89      	ldr	r3, [pc, #548]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	4985      	ldr	r1, [pc, #532]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034bc:	4b80      	ldr	r3, [pc, #512]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	497d      	ldr	r1, [pc, #500]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034de:	4b78      	ldr	r3, [pc, #480]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ec:	4974      	ldr	r1, [pc, #464]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	496c      	ldr	r1, [pc, #432]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003530:	4963      	ldr	r1, [pc, #396]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003544:	4b5e      	ldr	r3, [pc, #376]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003552:	495b      	ldr	r1, [pc, #364]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003566:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	4952      	ldr	r1, [pc, #328]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003588:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	494a      	ldr	r1, [pc, #296]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035aa:	4b45      	ldr	r3, [pc, #276]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	4941      	ldr	r1, [pc, #260]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035cc:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	4939      	ldr	r1, [pc, #228]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d028      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	4930      	ldr	r1, [pc, #192]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360c:	d106      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4a2b      	ldr	r2, [pc, #172]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003618:	60d3      	str	r3, [r2, #12]
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003624:	d10c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f8f9 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d04d      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003654:	d108      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800365c:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003662:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003666:	e012      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800366e:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003674:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003686:	490e      	ldr	r1, [pc, #56]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003696:	d106      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	60d3      	str	r3, [r2, #12]
 80036a4:	e020      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ae:	d109      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a02      	ldr	r2, [pc, #8]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	60d3      	str	r3, [r2, #12]
 80036bc:	e014      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f8a5 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d028      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036f4:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003702:	4947      	ldr	r1, [pc, #284]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800370e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003712:	d106      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003714:	4b42      	ldr	r3, [pc, #264]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a41      	ldr	r2, [pc, #260]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371e:	60d3      	str	r3, [r2, #12]
 8003720:	e011      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800372a:	d10c      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3304      	adds	r3, #4
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f876 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01e      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003752:	4b33      	ldr	r3, [pc, #204]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003762:	492f      	ldr	r1, [pc, #188]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003774:	d10c      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	2102      	movs	r1, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f000 f851 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003786:	7cfb      	ldrb	r3, [r7, #19]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800379c:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037a2:	f023 0204 	bic.w	r2, r3, #4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ac:	491c      	ldr	r1, [pc, #112]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c6:	f023 0218 	bic.w	r2, r3, #24
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	4913      	ldr	r1, [pc, #76]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d017      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f4:	490a      	ldr	r1, [pc, #40]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003806:	d105      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003812:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003814:	7cbb      	ldrb	r3, [r7, #18]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000

08003824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003832:	4b72      	ldr	r3, [pc, #456]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800383e:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d103      	bne.n	8003856 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
       ||
 8003852:	2b00      	cmp	r3, #0
 8003854:	d142      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e03f      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d018      	beq.n	8003896 <RCCEx_PLLSAI1_Config+0x72>
 8003864:	2b03      	cmp	r3, #3
 8003866:	d825      	bhi.n	80038b4 <RCCEx_PLLSAI1_Config+0x90>
 8003868:	2b01      	cmp	r3, #1
 800386a:	d002      	beq.n	8003872 <RCCEx_PLLSAI1_Config+0x4e>
 800386c:	2b02      	cmp	r3, #2
 800386e:	d009      	beq.n	8003884 <RCCEx_PLLSAI1_Config+0x60>
 8003870:	e020      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003872:	4b62      	ldr	r3, [pc, #392]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11d      	bne.n	80038ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003882:	e01a      	b.n	80038ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003884:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d116      	bne.n	80038be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003894:	e013      	b.n	80038be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038a2:	4b56      	ldr	r3, [pc, #344]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038b2:	e006      	b.n	80038c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e004      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038ba:	bf00      	nop
 80038bc:	e002      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038ca:	4b4c      	ldr	r3, [pc, #304]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4949      	ldr	r1, [pc, #292]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8086 	bne.w	80039f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038e4:	4b45      	ldr	r3, [pc, #276]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a44      	ldr	r2, [pc, #272]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fd fe04 	bl	80014fc <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038f6:	e009      	b.n	800390c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f8:	f7fd fe00 	bl	80014fc <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	73fb      	strb	r3, [r7, #15]
        break;
 800390a:	e005      	b.n	8003918 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800390c:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ef      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d168      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d113      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003924:	4b35      	ldr	r3, [pc, #212]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6892      	ldr	r2, [r2, #8]
 8003930:	0211      	lsls	r1, r2, #8
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	06d2      	lsls	r2, r2, #27
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6852      	ldr	r2, [r2, #4]
 800393e:	3a01      	subs	r2, #1
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	430a      	orrs	r2, r1
 8003944:	492d      	ldr	r1, [pc, #180]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	610b      	str	r3, [r1, #16]
 800394a:	e02d      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d115      	bne.n	800397e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6892      	ldr	r2, [r2, #8]
 800395e:	0211      	lsls	r1, r2, #8
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6912      	ldr	r2, [r2, #16]
 8003964:	0852      	lsrs	r2, r2, #1
 8003966:	3a01      	subs	r2, #1
 8003968:	0552      	lsls	r2, r2, #21
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6852      	ldr	r2, [r2, #4]
 8003970:	3a01      	subs	r2, #1
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	430a      	orrs	r2, r1
 8003976:	4921      	ldr	r1, [pc, #132]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003978:	4313      	orrs	r3, r2
 800397a:	610b      	str	r3, [r1, #16]
 800397c:	e014      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800397e:	4b1f      	ldr	r3, [pc, #124]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6892      	ldr	r2, [r2, #8]
 800398a:	0211      	lsls	r1, r2, #8
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6952      	ldr	r2, [r2, #20]
 8003990:	0852      	lsrs	r2, r2, #1
 8003992:	3a01      	subs	r2, #1
 8003994:	0652      	lsls	r2, r2, #25
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6852      	ldr	r2, [r2, #4]
 800399c:	3a01      	subs	r2, #1
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	430a      	orrs	r2, r1
 80039a2:	4916      	ldr	r1, [pc, #88]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a13      	ldr	r2, [pc, #76]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd fda2 	bl	80014fc <HAL_GetTick>
 80039b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ba:	e009      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039bc:	f7fd fd9e 	bl	80014fc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d902      	bls.n	80039d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	73fb      	strb	r3, [r7, #15]
          break;
 80039ce:	e005      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ef      	beq.n	80039bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	4904      	ldr	r1, [pc, #16]	; (80039fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	07ff800f 	.word	0x07ff800f
 8003a04:	ff9f800f 	.word	0xff9f800f
 8003a08:	f9ff800f 	.word	0xf9ff800f

08003a0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1a:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00e      	beq.n	8003a44 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a26:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0203 	and.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d103      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d142      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e03f      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d018      	beq.n	8003a7e <RCCEx_PLLSAI2_Config+0x72>
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d825      	bhi.n	8003a9c <RCCEx_PLLSAI2_Config+0x90>
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d002      	beq.n	8003a5a <RCCEx_PLLSAI2_Config+0x4e>
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d009      	beq.n	8003a6c <RCCEx_PLLSAI2_Config+0x60>
 8003a58:	e020      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5a:	4b62      	ldr	r3, [pc, #392]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11d      	bne.n	8003aa2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6a:	e01a      	b.n	8003aa2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a6c:	4b5d      	ldr	r3, [pc, #372]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d116      	bne.n	8003aa6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e013      	b.n	8003aa6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a7e:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8a:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9a:	e006      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e004      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ab2:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4949      	ldr	r1, [pc, #292]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 8086 	bne.w	8003bd8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003acc:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a44      	ldr	r2, [pc, #272]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fd10 	bl	80014fc <HAL_GetTick>
 8003adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ade:	e009      	b.n	8003af4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ae0:	f7fd fd0c 	bl	80014fc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d902      	bls.n	8003af4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	73fb      	strb	r3, [r7, #15]
        break;
 8003af2:	e005      	b.n	8003b00 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003af4:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ef      	bne.n	8003ae0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d168      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6892      	ldr	r2, [r2, #8]
 8003b18:	0211      	lsls	r1, r2, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	06d2      	lsls	r2, r2, #27
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6852      	ldr	r2, [r2, #4]
 8003b26:	3a01      	subs	r2, #1
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	492d      	ldr	r1, [pc, #180]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	614b      	str	r3, [r1, #20]
 8003b32:	e02d      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d115      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6892      	ldr	r2, [r2, #8]
 8003b46:	0211      	lsls	r1, r2, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6912      	ldr	r2, [r2, #16]
 8003b4c:	0852      	lsrs	r2, r2, #1
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0552      	lsls	r2, r2, #21
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6852      	ldr	r2, [r2, #4]
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	4921      	ldr	r1, [pc, #132]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	614b      	str	r3, [r1, #20]
 8003b64:	e014      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b66:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	0211      	lsls	r1, r2, #8
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6952      	ldr	r2, [r2, #20]
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0652      	lsls	r2, r2, #25
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6852      	ldr	r2, [r2, #4]
 8003b84:	3a01      	subs	r2, #1
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	4916      	ldr	r1, [pc, #88]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fd fcae 	bl	80014fc <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba2:	e009      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba4:	f7fd fcaa 	bl	80014fc <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d902      	bls.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb6:	e005      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ef      	beq.n	8003ba4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	07ff800f 	.word	0x07ff800f
 8003bec:	ff9f800f 	.word	0xff9f800f
 8003bf0:	f9ff800f 	.word	0xf9ff800f

08003bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e095      	b.n	8003d32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d108      	bne.n	8003c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c16:	d009      	beq.n	8003c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61da      	str	r2, [r3, #28]
 8003c1e:	e005      	b.n	8003c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fc fd48 	bl	80006dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c6c:	d902      	bls.n	8003c74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e002      	b.n	8003c7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c82:	d007      	beq.n	8003c94 <HAL_SPI_Init+0xa0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd6:	ea42 0103 	orr.w	r1, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	f003 0204 	and.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d10:	ea42 0103 	orr.w	r1, r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e049      	b.n	8003de0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f841 	bl	8003de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 f9f7 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d001      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e04f      	b.n	8003eb4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a23      	ldr	r2, [pc, #140]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <HAL_TIM_Base_Start_IT+0x76>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3e:	d018      	beq.n	8003e72 <HAL_TIM_Base_Start_IT+0x76>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_TIM_Base_Start_IT+0x76>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_TIM_Base_Start_IT+0x76>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIM_Base_Start_IT+0x76>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIM_Base_Start_IT+0x76>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d115      	bne.n	8003e9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d015      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0xb4>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8a:	d011      	beq.n	8003eb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9c:	e008      	b.n	8003eb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e000      	b.n	8003eb2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40000c00 	.word	0x40000c00
 8003ed0:	40013400 	.word	0x40013400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	00010007 	.word	0x00010007

08003edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0202 	mvn.w	r2, #2
 8003f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f905 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8f7 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f908 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0204 	mvn.w	r2, #4
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8db 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8cd 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8de 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0208 	mvn.w	r2, #8
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8b1 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8a3 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8b4 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0210 	mvn.w	r2, #16
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2208      	movs	r2, #8
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f887 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f879 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f88a 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0201 	mvn.w	r2, #1
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd f9c8 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	d10e      	bne.n	800408c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d107      	bne.n	800408c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f914 	bl	80042b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d10e      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d107      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f907 	bl	80042c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d10e      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f838 	bl	8004156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d10e      	bne.n	8004112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0220 	mvn.w	r2, #32
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f8c7 	bl	80042a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a40      	ldr	r2, [pc, #256]	; (8004280 <TIM_Base_SetConfig+0x114>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d013      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d00f      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a3d      	ldr	r2, [pc, #244]	; (8004284 <TIM_Base_SetConfig+0x118>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00b      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <TIM_Base_SetConfig+0x11c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a3b      	ldr	r2, [pc, #236]	; (800428c <TIM_Base_SetConfig+0x120>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <TIM_Base_SetConfig+0x124>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d108      	bne.n	80041be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <TIM_Base_SetConfig+0x114>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01f      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041cc:	d01b      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2c      	ldr	r2, [pc, #176]	; (8004284 <TIM_Base_SetConfig+0x118>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d017      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2b      	ldr	r2, [pc, #172]	; (8004288 <TIM_Base_SetConfig+0x11c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	; (800428c <TIM_Base_SetConfig+0x120>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00f      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a29      	ldr	r2, [pc, #164]	; (8004290 <TIM_Base_SetConfig+0x124>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a28      	ldr	r2, [pc, #160]	; (8004294 <TIM_Base_SetConfig+0x128>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a27      	ldr	r2, [pc, #156]	; (8004298 <TIM_Base_SetConfig+0x12c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a26      	ldr	r2, [pc, #152]	; (800429c <TIM_Base_SetConfig+0x130>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a10      	ldr	r2, [pc, #64]	; (8004280 <TIM_Base_SetConfig+0x114>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00f      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a12      	ldr	r2, [pc, #72]	; (8004290 <TIM_Base_SetConfig+0x124>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00b      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a11      	ldr	r2, [pc, #68]	; (8004294 <TIM_Base_SetConfig+0x128>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a10      	ldr	r2, [pc, #64]	; (8004298 <TIM_Base_SetConfig+0x12c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a0f      	ldr	r2, [pc, #60]	; (800429c <TIM_Base_SetConfig+0x130>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d103      	bne.n	800426c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	615a      	str	r2, [r3, #20]
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40000c00 	.word	0x40000c00
 8004290:	40013400 	.word	0x40013400
 8004294:	40014000 	.word	0x40014000
 8004298:	40014400 	.word	0x40014400
 800429c:	40014800 	.word	0x40014800

080042a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e042      	b.n	8004374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d106      	bne.n	8004306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7fc f945 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2224      	movs	r2, #36	; 0x24
 800430a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f960 	bl	80045e4 <UART_SetConfig>
 8004324:	4603      	mov	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e022      	b.n	8004374 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fc24 	bl	8004b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800434a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800435a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fcab 	bl	8004cc8 <UART_CheckIdleState>
 8004372:	4603      	mov	r3, r0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 8084 	bne.w	80044a0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Transmit+0x28>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e07c      	b.n	80044a2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Transmit+0x3a>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e075      	b.n	80044a2 <HAL_UART_Transmit+0x126>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2221      	movs	r2, #33	; 0x21
 80043ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80043ce:	f7fd f895 	bl	80014fc <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d108      	bne.n	8004400 <HAL_UART_Transmit+0x84>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e003      	b.n	8004408 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004410:	e02d      	b.n	800446e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fc9b 	bl	8004d58 <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e03a      	b.n	80044a2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	881a      	ldrh	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443e:	b292      	uxth	r2, r2
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	3302      	adds	r3, #2
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	e008      	b.n	800445c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	b292      	uxth	r2, r2
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3301      	adds	r3, #1
 800445a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1cb      	bne.n	8004412 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2200      	movs	r2, #0
 8004482:	2140      	movs	r1, #64	; 0x40
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 fc67 	bl	8004d58 <UART_WaitOnFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e006      	b.n	80044a2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e000      	b.n	80044a2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80044a0:	2302      	movs	r3, #2
  }
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d170      	bne.n	80045a6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_UART_Receive_DMA+0x24>
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e069      	b.n	80045a8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Receive_DMA+0x36>
 80044de:	2302      	movs	r3, #2
 80044e0:	e062      	b.n	80045a8 <HAL_UART_Receive_DMA+0xfc>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2222      	movs	r2, #34	; 0x22
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02c      	beq.n	800456a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004514:	4a26      	ldr	r2, [pc, #152]	; (80045b0 <HAL_UART_Receive_DMA+0x104>)
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451c:	4a25      	ldr	r2, [pc, #148]	; (80045b4 <HAL_UART_Receive_DMA+0x108>)
 800451e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004524:	4a24      	ldr	r2, [pc, #144]	; (80045b8 <HAL_UART_Receive_DMA+0x10c>)
 8004526:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800452c:	2200      	movs	r2, #0
 800452e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3324      	adds	r3, #36	; 0x24
 800453a:	4619      	mov	r1, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	461a      	mov	r2, r3
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	f7fd f994 	bl	8001870 <HAL_DMA_Start_IT>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2210      	movs	r2, #16
 8004552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e01e      	b.n	80045a8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004580:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	08004edb 	.word	0x08004edb
 80045b4:	08004f45 	.word	0x08004f45
 80045b8:	08004f61 	.word	0x08004f61

080045bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	4313      	orrs	r3, r2
 8004606:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	4313      	orrs	r3, r2
 8004610:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4bb1      	ldr	r3, [pc, #708]	; (80048e0 <UART_SetConfig+0x2fc>)
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	69f9      	ldr	r1, [r7, #28]
 8004622:	430b      	orrs	r3, r1
 8004624:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4aa7      	ldr	r2, [pc, #668]	; (80048e4 <UART_SetConfig+0x300>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	4313      	orrs	r3, r2
 8004654:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004660:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	69f9      	ldr	r1, [r7, #28]
 800466a:	430b      	orrs	r3, r1
 800466c:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	f023 010f 	bic.w	r1, r3, #15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a97      	ldr	r2, [pc, #604]	; (80048e8 <UART_SetConfig+0x304>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d121      	bne.n	80046d2 <UART_SetConfig+0xee>
 800468e:	4b97      	ldr	r3, [pc, #604]	; (80048ec <UART_SetConfig+0x308>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b03      	cmp	r3, #3
 800469a:	d817      	bhi.n	80046cc <UART_SetConfig+0xe8>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0xc0>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046bb 	.word	0x080046bb
 80046b0:	080046c7 	.word	0x080046c7
 80046b4:	2301      	movs	r3, #1
 80046b6:	76fb      	strb	r3, [r7, #27]
 80046b8:	e0e7      	b.n	800488a <UART_SetConfig+0x2a6>
 80046ba:	2302      	movs	r3, #2
 80046bc:	76fb      	strb	r3, [r7, #27]
 80046be:	e0e4      	b.n	800488a <UART_SetConfig+0x2a6>
 80046c0:	2304      	movs	r3, #4
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	e0e1      	b.n	800488a <UART_SetConfig+0x2a6>
 80046c6:	2308      	movs	r3, #8
 80046c8:	76fb      	strb	r3, [r7, #27]
 80046ca:	e0de      	b.n	800488a <UART_SetConfig+0x2a6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e0db      	b.n	800488a <UART_SetConfig+0x2a6>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a86      	ldr	r2, [pc, #536]	; (80048f0 <UART_SetConfig+0x30c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d132      	bne.n	8004742 <UART_SetConfig+0x15e>
 80046dc:	4b83      	ldr	r3, [pc, #524]	; (80048ec <UART_SetConfig+0x308>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	d828      	bhi.n	800473c <UART_SetConfig+0x158>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x10c>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004725 	.word	0x08004725
 80046f4:	0800473d 	.word	0x0800473d
 80046f8:	0800473d 	.word	0x0800473d
 80046fc:	0800473d 	.word	0x0800473d
 8004700:	08004731 	.word	0x08004731
 8004704:	0800473d 	.word	0x0800473d
 8004708:	0800473d 	.word	0x0800473d
 800470c:	0800473d 	.word	0x0800473d
 8004710:	0800472b 	.word	0x0800472b
 8004714:	0800473d 	.word	0x0800473d
 8004718:	0800473d 	.word	0x0800473d
 800471c:	0800473d 	.word	0x0800473d
 8004720:	08004737 	.word	0x08004737
 8004724:	2300      	movs	r3, #0
 8004726:	76fb      	strb	r3, [r7, #27]
 8004728:	e0af      	b.n	800488a <UART_SetConfig+0x2a6>
 800472a:	2302      	movs	r3, #2
 800472c:	76fb      	strb	r3, [r7, #27]
 800472e:	e0ac      	b.n	800488a <UART_SetConfig+0x2a6>
 8004730:	2304      	movs	r3, #4
 8004732:	76fb      	strb	r3, [r7, #27]
 8004734:	e0a9      	b.n	800488a <UART_SetConfig+0x2a6>
 8004736:	2308      	movs	r3, #8
 8004738:	76fb      	strb	r3, [r7, #27]
 800473a:	e0a6      	b.n	800488a <UART_SetConfig+0x2a6>
 800473c:	2310      	movs	r3, #16
 800473e:	76fb      	strb	r3, [r7, #27]
 8004740:	e0a3      	b.n	800488a <UART_SetConfig+0x2a6>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6b      	ldr	r2, [pc, #428]	; (80048f4 <UART_SetConfig+0x310>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d120      	bne.n	800478e <UART_SetConfig+0x1aa>
 800474c:	4b67      	ldr	r3, [pc, #412]	; (80048ec <UART_SetConfig+0x308>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004756:	2b30      	cmp	r3, #48	; 0x30
 8004758:	d013      	beq.n	8004782 <UART_SetConfig+0x19e>
 800475a:	2b30      	cmp	r3, #48	; 0x30
 800475c:	d814      	bhi.n	8004788 <UART_SetConfig+0x1a4>
 800475e:	2b20      	cmp	r3, #32
 8004760:	d009      	beq.n	8004776 <UART_SetConfig+0x192>
 8004762:	2b20      	cmp	r3, #32
 8004764:	d810      	bhi.n	8004788 <UART_SetConfig+0x1a4>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <UART_SetConfig+0x18c>
 800476a:	2b10      	cmp	r3, #16
 800476c:	d006      	beq.n	800477c <UART_SetConfig+0x198>
 800476e:	e00b      	b.n	8004788 <UART_SetConfig+0x1a4>
 8004770:	2300      	movs	r3, #0
 8004772:	76fb      	strb	r3, [r7, #27]
 8004774:	e089      	b.n	800488a <UART_SetConfig+0x2a6>
 8004776:	2302      	movs	r3, #2
 8004778:	76fb      	strb	r3, [r7, #27]
 800477a:	e086      	b.n	800488a <UART_SetConfig+0x2a6>
 800477c:	2304      	movs	r3, #4
 800477e:	76fb      	strb	r3, [r7, #27]
 8004780:	e083      	b.n	800488a <UART_SetConfig+0x2a6>
 8004782:	2308      	movs	r3, #8
 8004784:	76fb      	strb	r3, [r7, #27]
 8004786:	e080      	b.n	800488a <UART_SetConfig+0x2a6>
 8004788:	2310      	movs	r3, #16
 800478a:	76fb      	strb	r3, [r7, #27]
 800478c:	e07d      	b.n	800488a <UART_SetConfig+0x2a6>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a59      	ldr	r2, [pc, #356]	; (80048f8 <UART_SetConfig+0x314>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d120      	bne.n	80047da <UART_SetConfig+0x1f6>
 8004798:	4b54      	ldr	r3, [pc, #336]	; (80048ec <UART_SetConfig+0x308>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047a2:	2bc0      	cmp	r3, #192	; 0xc0
 80047a4:	d013      	beq.n	80047ce <UART_SetConfig+0x1ea>
 80047a6:	2bc0      	cmp	r3, #192	; 0xc0
 80047a8:	d814      	bhi.n	80047d4 <UART_SetConfig+0x1f0>
 80047aa:	2b80      	cmp	r3, #128	; 0x80
 80047ac:	d009      	beq.n	80047c2 <UART_SetConfig+0x1de>
 80047ae:	2b80      	cmp	r3, #128	; 0x80
 80047b0:	d810      	bhi.n	80047d4 <UART_SetConfig+0x1f0>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <UART_SetConfig+0x1d8>
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d006      	beq.n	80047c8 <UART_SetConfig+0x1e4>
 80047ba:	e00b      	b.n	80047d4 <UART_SetConfig+0x1f0>
 80047bc:	2300      	movs	r3, #0
 80047be:	76fb      	strb	r3, [r7, #27]
 80047c0:	e063      	b.n	800488a <UART_SetConfig+0x2a6>
 80047c2:	2302      	movs	r3, #2
 80047c4:	76fb      	strb	r3, [r7, #27]
 80047c6:	e060      	b.n	800488a <UART_SetConfig+0x2a6>
 80047c8:	2304      	movs	r3, #4
 80047ca:	76fb      	strb	r3, [r7, #27]
 80047cc:	e05d      	b.n	800488a <UART_SetConfig+0x2a6>
 80047ce:	2308      	movs	r3, #8
 80047d0:	76fb      	strb	r3, [r7, #27]
 80047d2:	e05a      	b.n	800488a <UART_SetConfig+0x2a6>
 80047d4:	2310      	movs	r3, #16
 80047d6:	76fb      	strb	r3, [r7, #27]
 80047d8:	e057      	b.n	800488a <UART_SetConfig+0x2a6>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a47      	ldr	r2, [pc, #284]	; (80048fc <UART_SetConfig+0x318>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d125      	bne.n	8004830 <UART_SetConfig+0x24c>
 80047e4:	4b41      	ldr	r3, [pc, #260]	; (80048ec <UART_SetConfig+0x308>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f2:	d017      	beq.n	8004824 <UART_SetConfig+0x240>
 80047f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f8:	d817      	bhi.n	800482a <UART_SetConfig+0x246>
 80047fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fe:	d00b      	beq.n	8004818 <UART_SetConfig+0x234>
 8004800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004804:	d811      	bhi.n	800482a <UART_SetConfig+0x246>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <UART_SetConfig+0x22e>
 800480a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480e:	d006      	beq.n	800481e <UART_SetConfig+0x23a>
 8004810:	e00b      	b.n	800482a <UART_SetConfig+0x246>
 8004812:	2300      	movs	r3, #0
 8004814:	76fb      	strb	r3, [r7, #27]
 8004816:	e038      	b.n	800488a <UART_SetConfig+0x2a6>
 8004818:	2302      	movs	r3, #2
 800481a:	76fb      	strb	r3, [r7, #27]
 800481c:	e035      	b.n	800488a <UART_SetConfig+0x2a6>
 800481e:	2304      	movs	r3, #4
 8004820:	76fb      	strb	r3, [r7, #27]
 8004822:	e032      	b.n	800488a <UART_SetConfig+0x2a6>
 8004824:	2308      	movs	r3, #8
 8004826:	76fb      	strb	r3, [r7, #27]
 8004828:	e02f      	b.n	800488a <UART_SetConfig+0x2a6>
 800482a:	2310      	movs	r3, #16
 800482c:	76fb      	strb	r3, [r7, #27]
 800482e:	e02c      	b.n	800488a <UART_SetConfig+0x2a6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <UART_SetConfig+0x300>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d125      	bne.n	8004886 <UART_SetConfig+0x2a2>
 800483a:	4b2c      	ldr	r3, [pc, #176]	; (80048ec <UART_SetConfig+0x308>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004848:	d017      	beq.n	800487a <UART_SetConfig+0x296>
 800484a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800484e:	d817      	bhi.n	8004880 <UART_SetConfig+0x29c>
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004854:	d00b      	beq.n	800486e <UART_SetConfig+0x28a>
 8004856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485a:	d811      	bhi.n	8004880 <UART_SetConfig+0x29c>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <UART_SetConfig+0x284>
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004864:	d006      	beq.n	8004874 <UART_SetConfig+0x290>
 8004866:	e00b      	b.n	8004880 <UART_SetConfig+0x29c>
 8004868:	2300      	movs	r3, #0
 800486a:	76fb      	strb	r3, [r7, #27]
 800486c:	e00d      	b.n	800488a <UART_SetConfig+0x2a6>
 800486e:	2302      	movs	r3, #2
 8004870:	76fb      	strb	r3, [r7, #27]
 8004872:	e00a      	b.n	800488a <UART_SetConfig+0x2a6>
 8004874:	2304      	movs	r3, #4
 8004876:	76fb      	strb	r3, [r7, #27]
 8004878:	e007      	b.n	800488a <UART_SetConfig+0x2a6>
 800487a:	2308      	movs	r3, #8
 800487c:	76fb      	strb	r3, [r7, #27]
 800487e:	e004      	b.n	800488a <UART_SetConfig+0x2a6>
 8004880:	2310      	movs	r3, #16
 8004882:	76fb      	strb	r3, [r7, #27]
 8004884:	e001      	b.n	800488a <UART_SetConfig+0x2a6>
 8004886:	2310      	movs	r3, #16
 8004888:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <UART_SetConfig+0x300>)
 8004890:	4293      	cmp	r3, r2
 8004892:	f040 809f 	bne.w	80049d4 <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004896:	7efb      	ldrb	r3, [r7, #27]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d837      	bhi.n	800490c <UART_SetConfig+0x328>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <UART_SetConfig+0x2c0>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	0800490d 	.word	0x0800490d
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	0800490d 	.word	0x0800490d
 80048b4:	080048d7 	.word	0x080048d7
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	0800490d 	.word	0x0800490d
 80048c0:	0800490d 	.word	0x0800490d
 80048c4:	08004905 	.word	0x08004905
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c8:	f7fe fb5c 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 80048cc:	6178      	str	r0, [r7, #20]
        break;
 80048ce:	e022      	b.n	8004916 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <UART_SetConfig+0x31c>)
 80048d2:	617b      	str	r3, [r7, #20]
        break;
 80048d4:	e01f      	b.n	8004916 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d6:	f7fe fabd 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 80048da:	6178      	str	r0, [r7, #20]
        break;
 80048dc:	e01b      	b.n	8004916 <UART_SetConfig+0x332>
 80048de:	bf00      	nop
 80048e0:	cfff69f3 	.word	0xcfff69f3
 80048e4:	40008000 	.word	0x40008000
 80048e8:	40013800 	.word	0x40013800
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40004400 	.word	0x40004400
 80048f4:	40004800 	.word	0x40004800
 80048f8:	40004c00 	.word	0x40004c00
 80048fc:	40005000 	.word	0x40005000
 8004900:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004908:	617b      	str	r3, [r7, #20]
        break;
 800490a:	e004      	b.n	8004916 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	76bb      	strb	r3, [r7, #26]
        break;
 8004914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 811b 	beq.w	8004b54 <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	4a96      	ldr	r2, [pc, #600]	; (8004b7c <UART_SetConfig+0x598>)
 8004924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004928:	461a      	mov	r2, r3
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004930:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d305      	bcc.n	800494e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	d902      	bls.n	8004954 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	76bb      	strb	r3, [r7, #26]
 8004952:	e0ff      	b.n	8004b54 <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4618      	mov	r0, r3
 8004958:	f04f 0100 	mov.w	r1, #0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	4a86      	ldr	r2, [pc, #536]	; (8004b7c <UART_SetConfig+0x598>)
 8004962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004966:	b29a      	uxth	r2, r3
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	f7fb fc48 	bl	8000200 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	020b      	lsls	r3, r1, #8
 8004982:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004986:	0202      	lsls	r2, r0, #8
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	6849      	ldr	r1, [r1, #4]
 800498c:	0849      	lsrs	r1, r1, #1
 800498e:	4608      	mov	r0, r1
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	1814      	adds	r4, r2, r0
 8004996:	eb43 0501 	adc.w	r5, r3, r1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	461a      	mov	r2, r3
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	4620      	mov	r0, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7fb fc2a 	bl	8000200 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ba:	d308      	bcc.n	80049ce <UART_SetConfig+0x3ea>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c2:	d204      	bcs.n	80049ce <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	e0c2      	b.n	8004b54 <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	76bb      	strb	r3, [r7, #26]
 80049d2:	e0bf      	b.n	8004b54 <UART_SetConfig+0x570>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049dc:	d165      	bne.n	8004aaa <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 80049de:	7efb      	ldrb	r3, [r7, #27]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d828      	bhi.n	8004a36 <UART_SetConfig+0x452>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <UART_SetConfig+0x408>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a21 	.word	0x08004a21
 80049f8:	08004a37 	.word	0x08004a37
 80049fc:	08004a27 	.word	0x08004a27
 8004a00:	08004a37 	.word	0x08004a37
 8004a04:	08004a37 	.word	0x08004a37
 8004a08:	08004a37 	.word	0x08004a37
 8004a0c:	08004a2f 	.word	0x08004a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a10:	f7fe fab8 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004a14:	6178      	str	r0, [r7, #20]
        break;
 8004a16:	e013      	b.n	8004a40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a18:	f7fe faca 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8004a1c:	6178      	str	r0, [r7, #20]
        break;
 8004a1e:	e00f      	b.n	8004a40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a20:	4b57      	ldr	r3, [pc, #348]	; (8004b80 <UART_SetConfig+0x59c>)
 8004a22:	617b      	str	r3, [r7, #20]
        break;
 8004a24:	e00c      	b.n	8004a40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a26:	f7fe fa15 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8004a2a:	6178      	str	r0, [r7, #20]
        break;
 8004a2c:	e008      	b.n	8004a40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a32:	617b      	str	r3, [r7, #20]
        break;
 8004a34:	e004      	b.n	8004a40 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8086 	beq.w	8004b54 <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	4a4b      	ldr	r2, [pc, #300]	; (8004b7c <UART_SetConfig+0x598>)
 8004a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a52:	461a      	mov	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a5a:	005a      	lsls	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	441a      	add	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b0f      	cmp	r3, #15
 8004a74:	d916      	bls.n	8004aa4 <UART_SetConfig+0x4c0>
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7c:	d212      	bcs.n	8004aa4 <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f023 030f 	bic.w	r3, r3, #15
 8004a86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	89fb      	ldrh	r3, [r7, #14]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	89fa      	ldrh	r2, [r7, #14]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	e057      	b.n	8004b54 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	76bb      	strb	r3, [r7, #26]
 8004aa8:	e054      	b.n	8004b54 <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aaa:	7efb      	ldrb	r3, [r7, #27]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d828      	bhi.n	8004b02 <UART_SetConfig+0x51e>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x4d4>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004ae5 	.word	0x08004ae5
 8004ac0:	08004aed 	.word	0x08004aed
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004af3 	.word	0x08004af3
 8004acc:	08004b03 	.word	0x08004b03
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b03 	.word	0x08004b03
 8004ad8:	08004afb 	.word	0x08004afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fe fa52 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	6178      	str	r0, [r7, #20]
        break;
 8004ae2:	e013      	b.n	8004b0c <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7fe fa64 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8004ae8:	6178      	str	r0, [r7, #20]
        break;
 8004aea:	e00f      	b.n	8004b0c <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aec:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <UART_SetConfig+0x59c>)
 8004aee:	617b      	str	r3, [r7, #20]
        break;
 8004af0:	e00c      	b.n	8004b0c <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af2:	f7fe f9af 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8004af6:	6178      	str	r0, [r7, #20]
        break;
 8004af8:	e008      	b.n	8004b0c <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afe:	617b      	str	r3, [r7, #20]
        break;
 8004b00:	e004      	b.n	8004b0c <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	76bb      	strb	r3, [r7, #26]
        break;
 8004b0a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d020      	beq.n	8004b54 <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <UART_SetConfig+0x598>)
 8004b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	441a      	add	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	d908      	bls.n	8004b50 <UART_SetConfig+0x56c>
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d204      	bcs.n	8004b50 <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	e001      	b.n	8004b54 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004b70:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bdb0      	pop	{r4, r5, r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	0800859c 	.word	0x0800859c
 8004b80:	00f42400 	.word	0x00f42400

08004b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c82:	d10a      	bne.n	8004c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004cd8:	f7fc fc10 	bl	80014fc <HAL_GetTick>
 8004cdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d10e      	bne.n	8004d0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f82c 	bl	8004d58 <UART_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e022      	b.n	8004d50 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d10e      	bne.n	8004d36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f816 	bl	8004d58 <UART_WaitOnFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e00c      	b.n	8004d50 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d68:	e062      	b.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d05e      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fc fbc3 	bl	80014fc <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11d      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d96:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e045      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d02e      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de0:	d126      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dfa:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0201 	bic.w	r2, r2, #1
 8004e0a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e00f      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d08d      	beq.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004e7e:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eaa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d11f      	bne.n	8004f36 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f0c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7fc fa6c 	bl	8001414 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff fb32 	bl	80045bc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d109      	bne.n	8004fa0 <UART_DMAError+0x40>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b21      	cmp	r3, #33	; 0x21
 8004f90:	d106      	bne.n	8004fa0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004f9a:	6978      	ldr	r0, [r7, #20]
 8004f9c:	f7ff ff5c 	bl	8004e58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d109      	bne.n	8004fc2 <UART_DMAError+0x62>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b22      	cmp	r3, #34	; 0x22
 8004fb2:	d106      	bne.n	8004fc2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004fbc:	6978      	ldr	r0, [r7, #20]
 8004fbe:	f7ff ff69 	bl	8004e94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f043 0210 	orr.w	r2, r3, #16
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd2:	6978      	ldr	r0, [r7, #20]
 8004fd4:	f7ff fafc 	bl	80045d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd8:	bf00      	nop
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e027      	b.n	8005046 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2224      	movs	r2, #36	; 0x24
 8005002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005024:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005066:	2302      	movs	r3, #2
 8005068:	e02d      	b.n	80050c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2224      	movs	r2, #36	; 0x24
 8005076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f850 	bl	800514c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e02d      	b.n	8005142 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2224      	movs	r2, #36	; 0x24
 80050f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f812 	bl	800514c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b089      	sub	sp, #36	; 0x24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005154:	4a2f      	ldr	r2, [pc, #188]	; (8005214 <UARTEx_SetNbDataToProcess+0xc8>)
 8005156:	f107 0314 	add.w	r3, r7, #20
 800515a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800515e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005162:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <UARTEx_SetNbDataToProcess+0xcc>)
 8005164:	f107 030c 	add.w	r3, r7, #12
 8005168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800516c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005174:	2b00      	cmp	r3, #0
 8005176:	d108      	bne.n	800518a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005188:	e03d      	b.n	8005206 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800518a:	2308      	movs	r3, #8
 800518c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800518e:	2308      	movs	r3, #8
 8005190:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	0e5b      	lsrs	r3, r3, #25
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	0f5b      	lsrs	r3, r3, #29
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80051b2:	7fbb      	ldrb	r3, [r7, #30]
 80051b4:	7f3a      	ldrb	r2, [r7, #28]
 80051b6:	f107 0120 	add.w	r1, r7, #32
 80051ba:	440a      	add	r2, r1
 80051bc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	7f3a      	ldrb	r2, [r7, #28]
 80051c6:	f107 0120 	add.w	r1, r7, #32
 80051ca:	440a      	add	r2, r1
 80051cc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80051d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80051dc:	7ffb      	ldrb	r3, [r7, #31]
 80051de:	7f7a      	ldrb	r2, [r7, #29]
 80051e0:	f107 0120 	add.w	r1, r7, #32
 80051e4:	440a      	add	r2, r1
 80051e6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	7f7a      	ldrb	r2, [r7, #29]
 80051f0:	f107 0120 	add.w	r1, r7, #32
 80051f4:	440a      	add	r2, r1
 80051f6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80051fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80051fe:	b29a      	uxth	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005206:	bf00      	nop
 8005208:	3724      	adds	r7, #36	; 0x24
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	0800852c 	.word	0x0800852c
 8005218:	08008534 	.word	0x08008534

0800521c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521c:	b084      	sub	sp, #16
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	f107 001c 	add.w	r0, r7, #28
 800522a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2b01      	cmp	r3, #1
 8005232:	d122      	bne.n	800527a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d105      	bne.n	800526e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa30 	bl	80056d4 <USB_CoreReset>
 8005274:	4603      	mov	r3, r0
 8005276:	73fb      	strb	r3, [r7, #15]
 8005278:	e01a      	b.n	80052b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa24 	bl	80056d4 <USB_CoreReset>
 800528c:	4603      	mov	r3, r0
 800528e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
 80052a2:	e005      	b.n	80052b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052bc:	b004      	add	sp, #16
 80052be:	4770      	bx	lr

080052c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f023 0201 	bic.w	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d106      	bne.n	800530e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60da      	str	r2, [r3, #12]
 800530c:	e00b      	b.n	8005326 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	e001      	b.n	8005326 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e003      	b.n	800532e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005326:	2032      	movs	r0, #50	; 0x32
 8005328:	f7fc f8f4 	bl	8001514 <HAL_Delay>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005338:	b084      	sub	sp, #16
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	e009      	b.n	800536c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3340      	adds	r3, #64	; 0x40
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	2200      	movs	r2, #0
 8005364:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	3301      	adds	r3, #1
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b0e      	cmp	r3, #14
 8005370:	d9f2      	bls.n	8005358 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11c      	bne.n	80053b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005386:	f043 0302 	orr.w	r3, r3, #2
 800538a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e005      	b.n	80053be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053c4:	461a      	mov	r2, r3
 80053c6:	2300      	movs	r3, #0
 80053c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d0:	4619      	mov	r1, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	461a      	mov	r2, r3
 80053da:	680b      	ldr	r3, [r1, #0]
 80053dc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053de:	2103      	movs	r1, #3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f93d 	bl	8005660 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e6:	2110      	movs	r1, #16
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f8f1 	bl	80055d0 <USB_FlushTxFifo>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f90f 	bl	800561c <USB_FlushRxFifo>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	461a      	mov	r2, r3
 8005410:	2300      	movs	r3, #0
 8005412:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541a:	461a      	mov	r2, r3
 800541c:	2300      	movs	r3, #0
 800541e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005426:	461a      	mov	r2, r3
 8005428:	2300      	movs	r3, #0
 800542a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	e043      	b.n	80054ba <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005448:	d118      	bne.n	800547c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	461a      	mov	r2, r3
 800545e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	e013      	b.n	800548e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005472:	461a      	mov	r2, r3
 8005474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e008      	b.n	800548e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	461a      	mov	r2, r3
 800548a:	2300      	movs	r3, #0
 800548c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	461a      	mov	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	461a      	mov	r2, r3
 80054ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3301      	adds	r3, #1
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3b7      	bcc.n	8005432 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e043      	b.n	8005550 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054de:	d118      	bne.n	8005512 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	461a      	mov	r2, r3
 80054f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e013      	b.n	8005524 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	461a      	mov	r2, r3
 800550a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	e008      	b.n	8005524 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	461a      	mov	r2, r3
 8005520:	2300      	movs	r3, #0
 8005522:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	461a      	mov	r2, r3
 8005532:	2300      	movs	r3, #0
 8005534:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	461a      	mov	r2, r3
 8005544:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005548:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3301      	adds	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d3b7      	bcc.n	80054c8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800556a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005578:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f043 0210 	orr.w	r2, r3, #16
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <USB_DevInit+0x294>)
 800558c:	4313      	orrs	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f043 0208 	orr.w	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d107      	bne.n	80055ba <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b2:	f043 0304 	orr.w	r3, r3, #4
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c6:	b004      	add	sp, #16
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	803c3800 	.word	0x803c3800

080055d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	019b      	lsls	r3, r3, #6
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <USB_FlushTxFifo+0x48>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e006      	b.n	800560a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b20      	cmp	r3, #32
 8005606:	d0f0      	beq.n	80055ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	00030d40 	.word	0x00030d40

0800561c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2210      	movs	r2, #16
 800562c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4a09      	ldr	r2, [pc, #36]	; (800565c <USB_FlushRxFifo+0x40>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e006      	b.n	800564e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b10      	cmp	r3, #16
 800564a:	d0f0      	beq.n	800562e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	00030d40 	.word	0x00030d40

08005660 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005680:	4313      	orrs	r3, r2
 8005682:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056ac:	f023 0303 	bic.w	r3, r3, #3
 80056b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056c0:	f043 0302 	orr.w	r3, r3, #2
 80056c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a13      	ldr	r2, [pc, #76]	; (8005738 <USB_CoreReset+0x64>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e01b      	b.n	800572a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	daf2      	bge.n	80056e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f043 0201 	orr.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3301      	adds	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <USB_CoreReset+0x64>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d0f0      	beq.n	800570a <USB_CoreReset+0x36>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	00030d40 	.word	0x00030d40

0800573c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005752:	f3ef 8305 	mrs	r3, IPSR
 8005756:	60bb      	str	r3, [r7, #8]
  return(result);
 8005758:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575e:	f3ef 8310 	mrs	r3, PRIMASK
 8005762:	607b      	str	r3, [r7, #4]
  return(result);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d105      	bne.n	8005776 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800576a:	f3ef 8311 	mrs	r3, BASEPRI
 800576e:	603b      	str	r3, [r7, #0]
  return(result);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <osKernelInitialize+0x3a>
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <osKernelInitialize+0x64>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d103      	bne.n	8005786 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800577e:	f06f 0305 	mvn.w	r3, #5
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e00c      	b.n	80057a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <osKernelInitialize+0x64>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d105      	bne.n	800579a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800578e:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <osKernelInitialize+0x64>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e002      	b.n	80057a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295
 800579e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000134 	.word	0x20000134

080057b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ba:	f3ef 8305 	mrs	r3, IPSR
 80057be:	60bb      	str	r3, [r7, #8]
  return(result);
 80057c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10f      	bne.n	80057e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c6:	f3ef 8310 	mrs	r3, PRIMASK
 80057ca:	607b      	str	r3, [r7, #4]
  return(result);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d105      	bne.n	80057de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057d2:	f3ef 8311 	mrs	r3, BASEPRI
 80057d6:	603b      	str	r3, [r7, #0]
  return(result);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <osKernelStart+0x3a>
 80057de:	4b0f      	ldr	r3, [pc, #60]	; (800581c <osKernelStart+0x68>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d103      	bne.n	80057ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80057e6:	f06f 0305 	mvn.w	r3, #5
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e010      	b.n	8005810 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <osKernelStart+0x68>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d109      	bne.n	800580a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057f6:	f7ff ffa1 	bl	800573c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <osKernelStart+0x68>)
 80057fc:	2202      	movs	r2, #2
 80057fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005800:	f001 f866 	bl	80068d0 <vTaskStartScheduler>
      stat = osOK;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e002      	b.n	8005810 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295
 800580e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005810:	68fb      	ldr	r3, [r7, #12]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000134 	.word	0x20000134

08005820 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b090      	sub	sp, #64	; 0x40
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005830:	f3ef 8305 	mrs	r3, IPSR
 8005834:	61fb      	str	r3, [r7, #28]
  return(result);
 8005836:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 8090 	bne.w	800595e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583e:	f3ef 8310 	mrs	r3, PRIMASK
 8005842:	61bb      	str	r3, [r7, #24]
  return(result);
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800584a:	f3ef 8311 	mrs	r3, BASEPRI
 800584e:	617b      	str	r3, [r7, #20]
  return(result);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <osThreadNew+0x3e>
 8005856:	4b44      	ldr	r3, [pc, #272]	; (8005968 <osThreadNew+0x148>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d07f      	beq.n	800595e <osThreadNew+0x13e>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d07c      	beq.n	800595e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8005864:	f241 0364 	movw	r3, #4196	; 0x1064
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800586a:	2318      	movs	r3, #24
 800586c:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295
 8005876:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d045      	beq.n	800590a <osThreadNew+0xea>
      if (attr->name != NULL) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <osThreadNew+0x6c>
        name = attr->name;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <osThreadNew+0x92>
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	2b38      	cmp	r3, #56	; 0x38
 80058a4:	d805      	bhi.n	80058b2 <osThreadNew+0x92>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <osThreadNew+0x96>
        return (NULL);
 80058b2:	2300      	movs	r3, #0
 80058b4:	e054      	b.n	8005960 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	089b      	lsrs	r3, r3, #2
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00e      	beq.n	80058ec <osThreadNew+0xcc>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b5b      	cmp	r3, #91	; 0x5b
 80058d4:	d90a      	bls.n	80058ec <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <osThreadNew+0xcc>
        mem = 1;
 80058e6:	2301      	movs	r3, #1
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	e010      	b.n	800590e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10c      	bne.n	800590e <osThreadNew+0xee>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <osThreadNew+0xee>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <osThreadNew+0xee>
          mem = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	e001      	b.n	800590e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d110      	bne.n	8005936 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800591c:	9202      	str	r2, [sp, #8]
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fdfa 	bl	8006524 <xTaskCreateStatic>
 8005930:	4603      	mov	r3, r0
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e013      	b.n	800595e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d110      	bne.n	800595e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	b29a      	uxth	r2, r3
 8005940:	f107 0310 	add.w	r3, r7, #16
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fe45 	bl	80065de <xTaskCreate>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d001      	beq.n	800595e <osThreadNew+0x13e>
          hTask = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800595e:	693b      	ldr	r3, [r7, #16]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3730      	adds	r7, #48	; 0x30
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000134 	.word	0x20000134

0800596c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8005972:	f001 fbf5 	bl	8007160 <xTaskGetCurrentTaskHandle>
 8005976:	6078      	str	r0, [r7, #4]

  return (id);
 8005978:	687b      	ldr	r3, [r7, #4]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005994:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4a06      	ldr	r2, [pc, #24]	; (80059b4 <vApplicationGetIdleTaskMemory+0x30>)
 800599a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f241 0264 	movw	r2, #4196	; 0x1064
 80059a2:	601a      	str	r2, [r3, #0]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	20000138 	.word	0x20000138
 80059b4:	20000194 	.word	0x20000194

080059b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a07      	ldr	r2, [pc, #28]	; (80059e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80059c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4a06      	ldr	r2, [pc, #24]	; (80059e8 <vApplicationGetTimerTaskMemory+0x30>)
 80059ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d6:	601a      	str	r2, [r3, #0]
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	20004324 	.word	0x20004324
 80059e8:	20004380 	.word	0x20004380

080059ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f103 0208 	add.w	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295
 8005a04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f103 0208 	add.w	r2, r3, #8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f103 0208 	add.w	r2, r3, #8
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	601a      	str	r2, [r3, #0]
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d103      	bne.n	8005aae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	e00c      	b.n	8005ac8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e002      	b.n	8005abc <vListInsert+0x2e>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d2f6      	bcs.n	8005ab6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	601a      	str	r2, [r3, #0]
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6892      	ldr	r2, [r2, #8]
 8005b16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6852      	ldr	r2, [r2, #4]
 8005b20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d103      	bne.n	8005b34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	1e5a      	subs	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b7e:	f002 f859 	bl	8007c34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8a:	68f9      	ldr	r1, [r7, #12]
 8005b8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b8e:	fb01 f303 	mul.w	r3, r1, r3
 8005b92:	441a      	add	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	68f9      	ldr	r1, [r7, #12]
 8005bb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
 8005bb8:	441a      	add	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	22ff      	movs	r2, #255	; 0xff
 8005bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	22ff      	movs	r2, #255	; 0xff
 8005bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d114      	bne.n	8005bfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01a      	beq.n	8005c12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3310      	adds	r3, #16
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 f8ff 	bl	8006de4 <xTaskRemoveFromEventList>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d012      	beq.n	8005c12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <xQueueGenericReset+0xcc>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	e009      	b.n	8005c12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3310      	adds	r3, #16
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fef2 	bl	80059ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3324      	adds	r3, #36	; 0x24
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff feed 	bl	80059ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c12:	f002 f83f 	bl	8007c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c16:	2301      	movs	r3, #1
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08e      	sub	sp, #56	; 0x38
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <xQueueGenericCreateStatic+0x52>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <xQueueGenericCreateStatic+0x56>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <xQueueGenericCreateStatic+0x58>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	623b      	str	r3, [r7, #32]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <xQueueGenericCreateStatic+0x7e>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <xQueueGenericCreateStatic+0x82>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <xQueueGenericCreateStatic+0x84>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61fb      	str	r3, [r7, #28]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cc2:	2350      	movs	r3, #80	; 0x50
 8005cc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b50      	cmp	r3, #80	; 0x50
 8005cca:	d00a      	beq.n	8005ce2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	61bb      	str	r3, [r7, #24]
}
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ce2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00d      	beq.n	8005d0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f805 	bl	8005d14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3730      	adds	r7, #48	; 0x30
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e002      	b.n	8005d36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d42:	2101      	movs	r1, #1
 8005d44:	69b8      	ldr	r0, [r7, #24]
 8005d46:	f7ff ff05 	bl	8005b54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08e      	sub	sp, #56	; 0x38
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xQueueGenericSend+0x32>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <xQueueGenericSend+0x40>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <xQueueGenericSend+0x44>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <xQueueGenericSend+0x46>
 8005da0:	2300      	movs	r3, #0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <xQueueGenericSend+0x60>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d103      	bne.n	8005dca <xQueueGenericSend+0x6e>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <xQueueGenericSend+0x72>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <xQueueGenericSend+0x74>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xQueueGenericSend+0x8e>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	623b      	str	r3, [r7, #32]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dea:	f001 f9c9 	bl	8007180 <xTaskGetSchedulerState>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <xQueueGenericSend+0x9e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <xQueueGenericSend+0xa2>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <xQueueGenericSend+0xa4>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <xQueueGenericSend+0xbe>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	61fb      	str	r3, [r7, #28]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e1a:	f001 ff0b 	bl	8007c34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <xQueueGenericSend+0xd4>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d129      	bne.n	8005e84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e36:	f000 fa07 	bl	8006248 <prvCopyDataToQueue>
 8005e3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	3324      	adds	r3, #36	; 0x24
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 ffcb 	bl	8006de4 <xTaskRemoveFromEventList>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d013      	beq.n	8005e7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e54:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <xQueueGenericSend+0x1f8>)
 8005e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	e00a      	b.n	8005e7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e6c:	4b39      	ldr	r3, [pc, #228]	; (8005f54 <xQueueGenericSend+0x1f8>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e7c:	f001 ff0a 	bl	8007c94 <vPortExitCritical>
				return pdPASS;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e063      	b.n	8005f4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e8a:	f001 ff03 	bl	8007c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e05c      	b.n	8005f4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e98:	f107 0314 	add.w	r3, r7, #20
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 f805 	bl	8006eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ea6:	f001 fef5 	bl	8007c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005eaa:	f000 fd77 	bl	800699c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eae:	f001 fec1 	bl	8007c34 <vPortEnterCritical>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d103      	bne.n	8005ec8 <xQueueGenericSend+0x16c>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d103      	bne.n	8005ede <xQueueGenericSend+0x182>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ede:	f001 fed9 	bl	8007c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ee2:	1d3a      	adds	r2, r7, #4
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fff4 	bl	8006ed8 <xTaskCheckForTimeOut>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d124      	bne.n	8005f40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef8:	f000 fa9e 	bl	8006438 <prvIsQueueFull>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	3310      	adds	r3, #16
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4611      	mov	r1, r2
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 ff1a 	bl	8006d44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f12:	f000 fa29 	bl	8006368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f16:	f000 fd4f 	bl	80069b8 <xTaskResumeAll>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f47f af7c 	bne.w	8005e1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <xQueueGenericSend+0x1f8>)
 8005f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	e772      	b.n	8005e1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f36:	f000 fa17 	bl	8006368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f3a:	f000 fd3d 	bl	80069b8 <xTaskResumeAll>
 8005f3e:	e76c      	b.n	8005e1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f42:	f000 fa11 	bl	8006368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f46:	f000 fd37 	bl	80069b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3738      	adds	r7, #56	; 0x38
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08e      	sub	sp, #56	; 0x38
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <xQueueGenericSendFromISR+0x3c>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <xQueueGenericSendFromISR+0x40>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <xQueueGenericSendFromISR+0x42>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	623b      	str	r3, [r7, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d103      	bne.n	8005fc2 <xQueueGenericSendFromISR+0x6a>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <xQueueGenericSendFromISR+0x6e>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <xQueueGenericSendFromISR+0x70>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	61fb      	str	r3, [r7, #28]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fe2:	f001 ff09 	bl	8007df8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	61ba      	str	r2, [r7, #24]
 8005ffc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <xQueueGenericSendFromISR+0xbc>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d12c      	bne.n	800606e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800601a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006024:	f000 f910 	bl	8006248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006028:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d112      	bne.n	8006058 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d016      	beq.n	8006068 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	3324      	adds	r3, #36	; 0x24
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fed0 	bl	8006de4 <xTaskRemoveFromEventList>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00e      	beq.n	8006068 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e007      	b.n	8006068 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006058:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800605c:	3301      	adds	r3, #1
 800605e:	b2db      	uxtb	r3, r3
 8006060:	b25a      	sxtb	r2, r3
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006068:	2301      	movs	r3, #1
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800606c:	e001      	b.n	8006072 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800606e:	2300      	movs	r3, #0
 8006070:	637b      	str	r3, [r7, #52]	; 0x34
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800607c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006080:	4618      	mov	r0, r3
 8006082:	3738      	adds	r7, #56	; 0x38
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08c      	sub	sp, #48	; 0x30
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006094:	2300      	movs	r3, #0
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <xQueueReceive+0x30>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	623b      	str	r3, [r7, #32]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <xQueueReceive+0x3e>
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <xQueueReceive+0x42>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <xQueueReceive+0x44>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueReceive+0x5e>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	61fb      	str	r3, [r7, #28]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e6:	f001 f84b 	bl	8007180 <xTaskGetSchedulerState>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <xQueueReceive+0x6e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <xQueueReceive+0x72>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <xQueueReceive+0x74>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xQueueReceive+0x8e>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	61bb      	str	r3, [r7, #24]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006116:	f001 fd8d 	bl	8007c34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01f      	beq.n	8006166 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612a:	f000 f8f7 	bl	800631c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00f      	beq.n	800615e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	3310      	adds	r3, #16
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fe4e 	bl	8006de4 <xTaskRemoveFromEventList>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800614e:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <xQueueReceive+0x1bc>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800615e:	f001 fd99 	bl	8007c94 <vPortExitCritical>
				return pdPASS;
 8006162:	2301      	movs	r3, #1
 8006164:	e069      	b.n	800623a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800616c:	f001 fd92 	bl	8007c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006170:	2300      	movs	r3, #0
 8006172:	e062      	b.n	800623a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800617a:	f107 0310 	add.w	r3, r7, #16
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fe94 	bl	8006eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006184:	2301      	movs	r3, #1
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006188:	f001 fd84 	bl	8007c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800618c:	f000 fc06 	bl	800699c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006190:	f001 fd50 	bl	8007c34 <vPortEnterCritical>
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800619a:	b25b      	sxtb	r3, r3
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d103      	bne.n	80061aa <xQueueReceive+0x122>
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b0:	b25b      	sxtb	r3, r3
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d103      	bne.n	80061c0 <xQueueReceive+0x138>
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c0:	f001 fd68 	bl	8007c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c4:	1d3a      	adds	r2, r7, #4
 80061c6:	f107 0310 	add.w	r3, r7, #16
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fe83 	bl	8006ed8 <xTaskCheckForTimeOut>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d123      	bne.n	8006220 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061da:	f000 f917 	bl	800640c <prvIsQueueEmpty>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d017      	beq.n	8006214 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	3324      	adds	r3, #36	; 0x24
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fda9 	bl	8006d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f4:	f000 f8b8 	bl	8006368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f8:	f000 fbde 	bl	80069b8 <xTaskResumeAll>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d189      	bne.n	8006116 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <xQueueReceive+0x1bc>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	e780      	b.n	8006116 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006216:	f000 f8a7 	bl	8006368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800621a:	f000 fbcd 	bl	80069b8 <xTaskResumeAll>
 800621e:	e77a      	b.n	8006116 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006222:	f000 f8a1 	bl	8006368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006226:	f000 fbc7 	bl	80069b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800622a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622c:	f000 f8ee 	bl	800640c <prvIsQueueEmpty>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f43f af6f 	beq.w	8006116 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800623a:	4618      	mov	r0, r3
 800623c:	3730      	adds	r7, #48	; 0x30
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10d      	bne.n	8006282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d14d      	bne.n	800630a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 ffa2 	bl	80071bc <xTaskPriorityDisinherit>
 8006278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
 8006280:	e043      	b.n	800630a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d119      	bne.n	80062bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6858      	ldr	r0, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	461a      	mov	r2, r3
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	f002 f804 	bl	80082a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	441a      	add	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d32b      	bcc.n	800630a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	e026      	b.n	800630a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68d8      	ldr	r0, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	461a      	mov	r2, r3
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	f001 ffea 	bl	80082a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	425b      	negs	r3, r3
 80062d6:	441a      	add	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d207      	bcs.n	80062f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	425b      	negs	r3, r3
 80062f2:	441a      	add	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d105      	bne.n	800630a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	3b01      	subs	r3, #1
 8006308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006312:	697b      	ldr	r3, [r7, #20]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	441a      	add	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	429a      	cmp	r2, r3
 8006346:	d303      	bcc.n	8006350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68d9      	ldr	r1, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	461a      	mov	r2, r3
 800635a:	6838      	ldr	r0, [r7, #0]
 800635c:	f001 ffa0 	bl	80082a0 <memcpy>
	}
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006370:	f001 fc60 	bl	8007c34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800637a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800637c:	e011      	b.n	80063a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	d012      	beq.n	80063ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fd2a 	bl	8006de4 <xTaskRemoveFromEventList>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006396:	f000 fe01 	bl	8006f9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	3b01      	subs	r3, #1
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	dce9      	bgt.n	800637e <prvUnlockQueue+0x16>
 80063aa:	e000      	b.n	80063ae <prvUnlockQueue+0x46>
					break;
 80063ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	22ff      	movs	r2, #255	; 0xff
 80063b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063b6:	f001 fc6d 	bl	8007c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063ba:	f001 fc3b 	bl	8007c34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063c6:	e011      	b.n	80063ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d012      	beq.n	80063f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3310      	adds	r3, #16
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fd05 	bl	8006de4 <xTaskRemoveFromEventList>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063e0:	f000 fddc 	bl	8006f9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dce9      	bgt.n	80063c8 <prvUnlockQueue+0x60>
 80063f4:	e000      	b.n	80063f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	22ff      	movs	r2, #255	; 0xff
 80063fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006400:	f001 fc48 	bl	8007c94 <vPortExitCritical>
}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006414:	f001 fc0e 	bl	8007c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e001      	b.n	800642a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800642a:	f001 fc33 	bl	8007c94 <vPortExitCritical>

	return xReturn;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006440:	f001 fbf8 	bl	8007c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644c:	429a      	cmp	r2, r3
 800644e:	d102      	bne.n	8006456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e001      	b.n	800645a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800645a:	f001 fc1b 	bl	8007c94 <vPortExitCritical>

	return xReturn;
 800645e:	68fb      	ldr	r3, [r7, #12]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	e014      	b.n	80064a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006478:	4a0f      	ldr	r2, [pc, #60]	; (80064b8 <vQueueAddToRegistry+0x50>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006484:	490c      	ldr	r1, [pc, #48]	; (80064b8 <vQueueAddToRegistry+0x50>)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800648e:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <vQueueAddToRegistry+0x50>)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4413      	add	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800649a:	e006      	b.n	80064aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3301      	adds	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b07      	cmp	r3, #7
 80064a6:	d9e7      	bls.n	8006478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	2000c93c 	.word	0x2000c93c

080064bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064cc:	f001 fbb2 	bl	8007c34 <vPortEnterCritical>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d103      	bne.n	80064e6 <vQueueWaitForMessageRestricted+0x2a>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d103      	bne.n	80064fc <vQueueWaitForMessageRestricted+0x40>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064fc:	f001 fbca 	bl	8007c94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	d106      	bne.n	8006516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	3324      	adds	r3, #36	; 0x24
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fc3b 	bl	8006d8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006516:	6978      	ldr	r0, [r7, #20]
 8006518:	f7ff ff26 	bl	8006368 <prvUnlockQueue>
	}
 800651c:	bf00      	nop
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08e      	sub	sp, #56	; 0x38
 8006528:	af04      	add	r7, sp, #16
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	623b      	str	r3, [r7, #32]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xTaskCreateStatic+0x46>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	61fb      	str	r3, [r7, #28]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800656a:	235c      	movs	r3, #92	; 0x5c
 800656c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b5c      	cmp	r3, #92	; 0x5c
 8006572:	d00a      	beq.n	800658a <xTaskCreateStatic+0x66>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	61bb      	str	r3, [r7, #24]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800658a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01e      	beq.n	80065d0 <xTaskCreateStatic+0xac>
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01b      	beq.n	80065d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065aa:	2300      	movs	r3, #0
 80065ac:	9303      	str	r3, [sp, #12]
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	9302      	str	r3, [sp, #8]
 80065b2:	f107 0314 	add.w	r3, r7, #20
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f850 	bl	8006668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ca:	f000 f8dd 	bl	8006788 <prvAddNewTaskToReadyList>
 80065ce:	e001      	b.n	80065d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065d4:	697b      	ldr	r3, [r7, #20]
	}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3728      	adds	r7, #40	; 0x28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b08c      	sub	sp, #48	; 0x30
 80065e2:	af04      	add	r7, sp, #16
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 fc40 	bl	8007e78 <pvPortMalloc>
 80065f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006600:	205c      	movs	r0, #92	; 0x5c
 8006602:	f001 fc39 	bl	8007e78 <pvPortMalloc>
 8006606:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
 8006614:	e005      	b.n	8006622 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	f001 fcf2 	bl	8008000 <vPortFree>
 800661c:	e001      	b.n	8006622 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d017      	beq.n	8006658 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	2300      	movs	r3, #0
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	9302      	str	r3, [sp, #8]
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f80e 	bl	8006668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800664c:	69f8      	ldr	r0, [r7, #28]
 800664e:	f000 f89b 	bl	8006788 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006652:	2301      	movs	r3, #1
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e002      	b.n	800665e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006658:	f04f 33ff 	mov.w	r3, #4294967295
 800665c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800665e:	69bb      	ldr	r3, [r7, #24]
	}
 8006660:	4618      	mov	r0, r3
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	461a      	mov	r2, r3
 8006680:	21a5      	movs	r1, #165	; 0xa5
 8006682:	f001 fe1b 	bl	80082bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006690:	3b01      	subs	r3, #1
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	617b      	str	r3, [r7, #20]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01f      	beq.n	8006706 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e012      	b.n	80066f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	7819      	ldrb	r1, [r3, #0]
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	3334      	adds	r3, #52	; 0x34
 80066dc:	460a      	mov	r2, r1
 80066de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d006      	beq.n	80066fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b0f      	cmp	r3, #15
 80066f6:	d9e9      	bls.n	80066cc <prvInitialiseNewTask+0x64>
 80066f8:	e000      	b.n	80066fc <prvInitialiseNewTask+0x94>
			{
				break;
 80066fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006704:	e003      	b.n	800670e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	2b37      	cmp	r3, #55	; 0x37
 8006712:	d901      	bls.n	8006718 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006714:	2337      	movs	r3, #55	; 0x37
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006722:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2200      	movs	r2, #0
 8006728:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	3304      	adds	r3, #4
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff f97c 	bl	8005a2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	3318      	adds	r3, #24
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff f977 	bl	8005a2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2200      	movs	r2, #0
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	68f9      	ldr	r1, [r7, #12]
 8006766:	69b8      	ldr	r0, [r7, #24]
 8006768:	f001 f938 	bl	80079dc <pxPortInitialiseStack>
 800676c:	4602      	mov	r2, r0
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800677e:	bf00      	nop
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006790:	f001 fa50 	bl	8007c34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006794:	4b2d      	ldr	r3, [pc, #180]	; (800684c <prvAddNewTaskToReadyList+0xc4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a2c      	ldr	r2, [pc, #176]	; (800684c <prvAddNewTaskToReadyList+0xc4>)
 800679c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800679e:	4b2c      	ldr	r3, [pc, #176]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <prvAddNewTaskToReadyList+0xc4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d110      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067b4:	f000 fc16 	bl	8006fe4 <prvInitialiseTaskLists>
 80067b8:	e00d      	b.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067ba:	4b26      	ldr	r3, [pc, #152]	; (8006854 <prvAddNewTaskToReadyList+0xcc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067c2:	4b23      	ldr	r3, [pc, #140]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d802      	bhi.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067d0:	4a1f      	ldr	r2, [pc, #124]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067d6:	4b20      	ldr	r3, [pc, #128]	; (8006858 <prvAddNewTaskToReadyList+0xd0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	4a1e      	ldr	r2, [pc, #120]	; (8006858 <prvAddNewTaskToReadyList+0xd0>)
 80067de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067e0:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <prvAddNewTaskToReadyList+0xd0>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <prvAddNewTaskToReadyList+0xd4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d903      	bls.n	80067fc <prvAddNewTaskToReadyList+0x74>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	4a18      	ldr	r2, [pc, #96]	; (800685c <prvAddNewTaskToReadyList+0xd4>)
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	4613      	mov	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4a15      	ldr	r2, [pc, #84]	; (8006860 <prvAddNewTaskToReadyList+0xd8>)
 800680a:	441a      	add	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f7ff f917 	bl	8005a46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006818:	f001 fa3c 	bl	8007c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <prvAddNewTaskToReadyList+0xcc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	429a      	cmp	r2, r3
 8006830:	d207      	bcs.n	8006842 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <prvAddNewTaskToReadyList+0xdc>)
 8006834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20004c54 	.word	0x20004c54
 8006850:	20004780 	.word	0x20004780
 8006854:	20004c60 	.word	0x20004c60
 8006858:	20004c70 	.word	0x20004c70
 800685c:	20004c5c 	.word	0x20004c5c
 8006860:	20004784 	.word	0x20004784
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d017      	beq.n	80068aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <vTaskDelay+0x60>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <vTaskDelay+0x30>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006898:	f000 f880 	bl	800699c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fcfa 	bl	8007298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068a4:	f000 f888 	bl	80069b8 <xTaskResumeAll>
 80068a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d107      	bne.n	80068c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <vTaskDelay+0x64>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20004c7c 	.word	0x20004c7c
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068de:	463a      	mov	r2, r7
 80068e0:	1d39      	adds	r1, r7, #4
 80068e2:	f107 0308 	add.w	r3, r7, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff f84c 	bl	8005984 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	9202      	str	r2, [sp, #8]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	2300      	movs	r3, #0
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	460a      	mov	r2, r1
 80068fe:	4921      	ldr	r1, [pc, #132]	; (8006984 <vTaskStartScheduler+0xb4>)
 8006900:	4821      	ldr	r0, [pc, #132]	; (8006988 <vTaskStartScheduler+0xb8>)
 8006902:	f7ff fe0f 	bl	8006524 <xTaskCreateStatic>
 8006906:	4603      	mov	r3, r0
 8006908:	4a20      	ldr	r2, [pc, #128]	; (800698c <vTaskStartScheduler+0xbc>)
 800690a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800690c:	4b1f      	ldr	r3, [pc, #124]	; (800698c <vTaskStartScheduler+0xbc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006914:	2301      	movs	r3, #1
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e001      	b.n	800691e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d102      	bne.n	800692a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006924:	f000 fd0c 	bl	8007340 <xTimerCreateTimerTask>
 8006928:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d116      	bne.n	800695e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	613b      	str	r3, [r7, #16]
}
 8006942:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006944:	4b12      	ldr	r3, [pc, #72]	; (8006990 <vTaskStartScheduler+0xc0>)
 8006946:	f04f 32ff 	mov.w	r2, #4294967295
 800694a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <vTaskStartScheduler+0xc4>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <vTaskStartScheduler+0xc8>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006958:	f001 f8ca 	bl	8007af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800695c:	e00e      	b.n	800697c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d10a      	bne.n	800697c <vTaskStartScheduler+0xac>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60fb      	str	r3, [r7, #12]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <vTaskStartScheduler+0xaa>
}
 800697c:	bf00      	nop
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	0800853c 	.word	0x0800853c
 8006988:	08006fb5 	.word	0x08006fb5
 800698c:	20004c78 	.word	0x20004c78
 8006990:	20004c74 	.word	0x20004c74
 8006994:	20004c60 	.word	0x20004c60
 8006998:	20004c58 	.word	0x20004c58

0800699c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80069a0:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <vTaskSuspendAll+0x18>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	4a03      	ldr	r2, [pc, #12]	; (80069b4 <vTaskSuspendAll+0x18>)
 80069a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20004c7c 	.word	0x20004c7c

080069b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069c6:	4b42      	ldr	r3, [pc, #264]	; (8006ad0 <xTaskResumeAll+0x118>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	603b      	str	r3, [r7, #0]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069e4:	f001 f926 	bl	8007c34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069e8:	4b39      	ldr	r3, [pc, #228]	; (8006ad0 <xTaskResumeAll+0x118>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	4a38      	ldr	r2, [pc, #224]	; (8006ad0 <xTaskResumeAll+0x118>)
 80069f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f2:	4b37      	ldr	r3, [pc, #220]	; (8006ad0 <xTaskResumeAll+0x118>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d162      	bne.n	8006ac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069fa:	4b36      	ldr	r3, [pc, #216]	; (8006ad4 <xTaskResumeAll+0x11c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d05e      	beq.n	8006ac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a02:	e02f      	b.n	8006a64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a04:	4b34      	ldr	r3, [pc, #208]	; (8006ad8 <xTaskResumeAll+0x120>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3318      	adds	r3, #24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff f875 	bl	8005b00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff f870 	bl	8005b00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <xTaskResumeAll+0x124>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d903      	bls.n	8006a34 <xTaskResumeAll+0x7c>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <xTaskResumeAll+0x124>)
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <xTaskResumeAll+0x128>)
 8006a42:	441a      	add	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f7fe fffb 	bl	8005a46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	4b23      	ldr	r3, [pc, #140]	; (8006ae4 <xTaskResumeAll+0x12c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a5e:	4b22      	ldr	r3, [pc, #136]	; (8006ae8 <xTaskResumeAll+0x130>)
 8006a60:	2201      	movs	r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a64:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <xTaskResumeAll+0x120>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1cb      	bne.n	8006a04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a72:	f000 fb55 	bl	8007120 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a76:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <xTaskResumeAll+0x134>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a82:	f000 f847 	bl	8006b14 <xTaskIncrementTick>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a8c:	4b16      	ldr	r3, [pc, #88]	; (8006ae8 <xTaskResumeAll+0x130>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f1      	bne.n	8006a82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <xTaskResumeAll+0x134>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <xTaskResumeAll+0x130>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <xTaskResumeAll+0x138>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ac0:	f001 f8e8 	bl	8007c94 <vPortExitCritical>

	return xAlreadyYielded;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20004c7c 	.word	0x20004c7c
 8006ad4:	20004c54 	.word	0x20004c54
 8006ad8:	20004c14 	.word	0x20004c14
 8006adc:	20004c5c 	.word	0x20004c5c
 8006ae0:	20004784 	.word	0x20004784
 8006ae4:	20004780 	.word	0x20004780
 8006ae8:	20004c68 	.word	0x20004c68
 8006aec:	20004c64 	.word	0x20004c64
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <xTaskGetTickCount+0x1c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b00:	687b      	ldr	r3, [r7, #4]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20004c58 	.word	0x20004c58

08006b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b1e:	4b4f      	ldr	r3, [pc, #316]	; (8006c5c <xTaskIncrementTick+0x148>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 8089 	bne.w	8006c3a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b28:	4b4d      	ldr	r3, [pc, #308]	; (8006c60 <xTaskIncrementTick+0x14c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b30:	4a4b      	ldr	r2, [pc, #300]	; (8006c60 <xTaskIncrementTick+0x14c>)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d120      	bne.n	8006b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b3c:	4b49      	ldr	r3, [pc, #292]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xTaskIncrementTick+0x46>
 8006b5c:	4b41      	ldr	r3, [pc, #260]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	4b41      	ldr	r3, [pc, #260]	; (8006c68 <xTaskIncrementTick+0x154>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a3f      	ldr	r2, [pc, #252]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	4a3f      	ldr	r2, [pc, #252]	; (8006c68 <xTaskIncrementTick+0x154>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	4b3e      	ldr	r3, [pc, #248]	; (8006c6c <xTaskIncrementTick+0x158>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a3d      	ldr	r2, [pc, #244]	; (8006c6c <xTaskIncrementTick+0x158>)
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	f000 fad1 	bl	8007120 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b7e:	4b3c      	ldr	r3, [pc, #240]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d349      	bcc.n	8006c1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b88:	4b36      	ldr	r3, [pc, #216]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b92:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	601a      	str	r2, [r3, #0]
					break;
 8006b9a:	e03f      	b.n	8006c1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9c:	4b31      	ldr	r3, [pc, #196]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d203      	bcs.n	8006bbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bb4:	4a2e      	ldr	r2, [pc, #184]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bba:	e02f      	b.n	8006c1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe ff9d 	bl	8005b00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	3318      	adds	r3, #24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe ff94 	bl	8005b00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bdc:	4b25      	ldr	r3, [pc, #148]	; (8006c74 <xTaskIncrementTick+0x160>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d903      	bls.n	8006bec <xTaskIncrementTick+0xd8>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <xTaskIncrementTick+0x160>)
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <xTaskIncrementTick+0x164>)
 8006bfa:	441a      	add	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fe ff1f 	bl	8005a46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <xTaskIncrementTick+0x168>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d3b8      	bcc.n	8006b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c16:	2301      	movs	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1a:	e7b5      	b.n	8006b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c1c:	4b17      	ldr	r3, [pc, #92]	; (8006c7c <xTaskIncrementTick+0x168>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c22:	4915      	ldr	r1, [pc, #84]	; (8006c78 <xTaskIncrementTick+0x164>)
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d907      	bls.n	8006c44 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e004      	b.n	8006c44 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c3a:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <xTaskIncrementTick+0x16c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	4a0f      	ldr	r2, [pc, #60]	; (8006c80 <xTaskIncrementTick+0x16c>)
 8006c42:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c44:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <xTaskIncrementTick+0x170>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c50:	697b      	ldr	r3, [r7, #20]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20004c7c 	.word	0x20004c7c
 8006c60:	20004c58 	.word	0x20004c58
 8006c64:	20004c0c 	.word	0x20004c0c
 8006c68:	20004c10 	.word	0x20004c10
 8006c6c:	20004c6c 	.word	0x20004c6c
 8006c70:	20004c74 	.word	0x20004c74
 8006c74:	20004c5c 	.word	0x20004c5c
 8006c78:	20004784 	.word	0x20004784
 8006c7c:	20004780 	.word	0x20004780
 8006c80:	20004c64 	.word	0x20004c64
 8006c84:	20004c68 	.word	0x20004c68

08006c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c8e:	4b28      	ldr	r3, [pc, #160]	; (8006d30 <vTaskSwitchContext+0xa8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c96:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <vTaskSwitchContext+0xac>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c9c:	e041      	b.n	8006d22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006c9e:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <vTaskSwitchContext+0xac>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <vTaskSwitchContext+0xb0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	e010      	b.n	8006cce <vTaskSwitchContext+0x46>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	607b      	str	r3, [r7, #4]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <vTaskSwitchContext+0x3e>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	491b      	ldr	r1, [pc, #108]	; (8006d3c <vTaskSwitchContext+0xb4>)
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0e4      	beq.n	8006cac <vTaskSwitchContext+0x24>
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <vTaskSwitchContext+0xb4>)
 8006cee:	4413      	add	r3, r2
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3308      	adds	r3, #8
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d104      	bne.n	8006d12 <vTaskSwitchContext+0x8a>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <vTaskSwitchContext+0xb8>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <vTaskSwitchContext+0xb0>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6013      	str	r3, [r2, #0]
}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20004c7c 	.word	0x20004c7c
 8006d34:	20004c68 	.word	0x20004c68
 8006d38:	20004c5c 	.word	0x20004c5c
 8006d3c:	20004784 	.word	0x20004784
 8006d40:	20004780 	.word	0x20004780

08006d44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	60fb      	str	r3, [r7, #12]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <vTaskPlaceOnEventList+0x44>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3318      	adds	r3, #24
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fe fe8b 	bl	8005a8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d78:	2101      	movs	r1, #1
 8006d7a:	6838      	ldr	r0, [r7, #0]
 8006d7c:	f000 fa8c 	bl	8007298 <prvAddCurrentTaskToDelayedList>
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20004780 	.word	0x20004780

08006d8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	617b      	str	r3, [r7, #20]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3318      	adds	r3, #24
 8006dba:	4619      	mov	r1, r3
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7fe fe42 	bl	8005a46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	68b8      	ldr	r0, [r7, #8]
 8006dd2:	f000 fa61 	bl	8007298 <prvAddCurrentTaskToDelayedList>
	}
 8006dd6:	bf00      	nop
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20004780 	.word	0x20004780

08006de4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60fb      	str	r3, [r7, #12]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	3318      	adds	r3, #24
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fe73 	bl	8005b00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e1a:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <xTaskRemoveFromEventList+0xb0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d11d      	bne.n	8006e5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe fe6a 	bl	8005b00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	4b19      	ldr	r3, [pc, #100]	; (8006e98 <xTaskRemoveFromEventList+0xb4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <xTaskRemoveFromEventList+0x5c>
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <xTaskRemoveFromEventList+0xb4>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <xTaskRemoveFromEventList+0xb8>)
 8006e4e:	441a      	add	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7fe fdf5 	bl	8005a46 <vListInsertEnd>
 8006e5c:	e005      	b.n	8006e6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	3318      	adds	r3, #24
 8006e62:	4619      	mov	r1, r3
 8006e64:	480e      	ldr	r0, [pc, #56]	; (8006ea0 <xTaskRemoveFromEventList+0xbc>)
 8006e66:	f7fe fdee 	bl	8005a46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <xTaskRemoveFromEventList+0xc0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d905      	bls.n	8006e84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <xTaskRemoveFromEventList+0xc4>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e001      	b.n	8006e88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e88:	697b      	ldr	r3, [r7, #20]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20004c7c 	.word	0x20004c7c
 8006e98:	20004c5c 	.word	0x20004c5c
 8006e9c:	20004784 	.word	0x20004784
 8006ea0:	20004c14 	.word	0x20004c14
 8006ea4:	20004780 	.word	0x20004780
 8006ea8:	20004c68 	.word	0x20004c68

08006eac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <vTaskInternalSetTimeOutState+0x24>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <vTaskInternalSetTimeOutState+0x28>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	605a      	str	r2, [r3, #4]
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20004c6c 	.word	0x20004c6c
 8006ed4:	20004c58 	.word	0x20004c58

08006ed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	613b      	str	r3, [r7, #16]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	60fb      	str	r3, [r7, #12]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f1a:	f000 fe8b 	bl	8007c34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	; (8006f94 <xTaskCheckForTimeOut+0xbc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d102      	bne.n	8006f3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61fb      	str	r3, [r7, #28]
 8006f3c:	e023      	b.n	8006f86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <xTaskCheckForTimeOut+0xc0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d007      	beq.n	8006f5a <xTaskCheckForTimeOut+0x82>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e015      	b.n	8006f86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d20b      	bcs.n	8006f7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff ff9b 	bl	8006eac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	e004      	b.n	8006f86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f86:	f000 fe85 	bl	8007c94 <vPortExitCritical>

	return xReturn;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20004c58 	.word	0x20004c58
 8006f98:	20004c6c 	.word	0x20004c6c

08006f9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <vTaskMissedYield+0x14>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20004c68 	.word	0x20004c68

08006fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fbc:	f000 f852 	bl	8007064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fc0:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <prvIdleTask+0x28>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d9f9      	bls.n	8006fbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <prvIdleTask+0x2c>)
 8006fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fd8:	e7f0      	b.n	8006fbc <prvIdleTask+0x8>
 8006fda:	bf00      	nop
 8006fdc:	20004784 	.word	0x20004784
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fea:	2300      	movs	r3, #0
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	e00c      	b.n	800700a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4a12      	ldr	r2, [pc, #72]	; (8007044 <prvInitialiseTaskLists+0x60>)
 8006ffc:	4413      	add	r3, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fcf4 	bl	80059ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3301      	adds	r3, #1
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b37      	cmp	r3, #55	; 0x37
 800700e:	d9ef      	bls.n	8006ff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007010:	480d      	ldr	r0, [pc, #52]	; (8007048 <prvInitialiseTaskLists+0x64>)
 8007012:	f7fe fceb 	bl	80059ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007016:	480d      	ldr	r0, [pc, #52]	; (800704c <prvInitialiseTaskLists+0x68>)
 8007018:	f7fe fce8 	bl	80059ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800701c:	480c      	ldr	r0, [pc, #48]	; (8007050 <prvInitialiseTaskLists+0x6c>)
 800701e:	f7fe fce5 	bl	80059ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007022:	480c      	ldr	r0, [pc, #48]	; (8007054 <prvInitialiseTaskLists+0x70>)
 8007024:	f7fe fce2 	bl	80059ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007028:	480b      	ldr	r0, [pc, #44]	; (8007058 <prvInitialiseTaskLists+0x74>)
 800702a:	f7fe fcdf 	bl	80059ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <prvInitialiseTaskLists+0x78>)
 8007030:	4a05      	ldr	r2, [pc, #20]	; (8007048 <prvInitialiseTaskLists+0x64>)
 8007032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007034:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <prvInitialiseTaskLists+0x7c>)
 8007036:	4a05      	ldr	r2, [pc, #20]	; (800704c <prvInitialiseTaskLists+0x68>)
 8007038:	601a      	str	r2, [r3, #0]
}
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20004784 	.word	0x20004784
 8007048:	20004be4 	.word	0x20004be4
 800704c:	20004bf8 	.word	0x20004bf8
 8007050:	20004c14 	.word	0x20004c14
 8007054:	20004c28 	.word	0x20004c28
 8007058:	20004c40 	.word	0x20004c40
 800705c:	20004c0c 	.word	0x20004c0c
 8007060:	20004c10 	.word	0x20004c10

08007064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800706a:	e019      	b.n	80070a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800706c:	f000 fde2 	bl	8007c34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007070:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <prvCheckTasksWaitingTermination+0x50>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fd3f 	bl	8005b00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <prvCheckTasksWaitingTermination+0x54>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3b01      	subs	r3, #1
 8007088:	4a0b      	ldr	r2, [pc, #44]	; (80070b8 <prvCheckTasksWaitingTermination+0x54>)
 800708a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800708c:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <prvCheckTasksWaitingTermination+0x58>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3b01      	subs	r3, #1
 8007092:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <prvCheckTasksWaitingTermination+0x58>)
 8007094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007096:	f000 fdfd 	bl	8007c94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f810 	bl	80070c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <prvCheckTasksWaitingTermination+0x58>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e1      	bne.n	800706c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20004c28 	.word	0x20004c28
 80070b8:	20004c54 	.word	0x20004c54
 80070bc:	20004c3c 	.word	0x20004c3c

080070c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d108      	bne.n	80070e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 ff92 	bl	8008000 <vPortFree>
				vPortFree( pxTCB );
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 ff8f 	bl	8008000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070e2:	e018      	b.n	8007116 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d103      	bne.n	80070f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 ff86 	bl	8008000 <vPortFree>
	}
 80070f4:	e00f      	b.n	8007116 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d00a      	beq.n	8007116 <prvDeleteTCB+0x56>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <prvDeleteTCB+0x54>
	}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007126:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <prvResetNextTaskUnblockTime+0x38>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <prvResetNextTaskUnblockTime+0x3c>)
 8007132:	f04f 32ff 	mov.w	r2, #4294967295
 8007136:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007138:	e008      	b.n	800714c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713a:	4b07      	ldr	r3, [pc, #28]	; (8007158 <prvResetNextTaskUnblockTime+0x38>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4a04      	ldr	r2, [pc, #16]	; (800715c <prvResetNextTaskUnblockTime+0x3c>)
 800714a:	6013      	str	r3, [r2, #0]
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	20004c0c 	.word	0x20004c0c
 800715c:	20004c74 	.word	0x20004c74

08007160 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <xTaskGetCurrentTaskHandle+0x1c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800716c:	687b      	ldr	r3, [r7, #4]
	}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20004780 	.word	0x20004780

08007180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <xTaskGetSchedulerState+0x34>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800718e:	2301      	movs	r3, #1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	e008      	b.n	80071a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007194:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <xTaskGetSchedulerState+0x38>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800719c:	2302      	movs	r3, #2
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e001      	b.n	80071a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071a6:	687b      	ldr	r3, [r7, #4]
	}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	20004c60 	.word	0x20004c60
 80071b8:	20004c7c 	.word	0x20004c7c

080071bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d056      	beq.n	8007280 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071d2:	4b2e      	ldr	r3, [pc, #184]	; (800728c <xTaskPriorityDisinherit+0xd0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d00a      	beq.n	80071f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	60fb      	str	r3, [r7, #12]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	60bb      	str	r3, [r7, #8]
}
 800720c:	bf00      	nop
 800720e:	e7fe      	b.n	800720e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007214:	1e5a      	subs	r2, r3, #1
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007222:	429a      	cmp	r2, r3
 8007224:	d02c      	beq.n	8007280 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722a:	2b00      	cmp	r3, #0
 800722c:	d128      	bne.n	8007280 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	3304      	adds	r3, #4
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fc64 	bl	8005b00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007250:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <xTaskPriorityDisinherit+0xd4>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d903      	bls.n	8007260 <xTaskPriorityDisinherit+0xa4>
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	4a0c      	ldr	r2, [pc, #48]	; (8007290 <xTaskPriorityDisinherit+0xd4>)
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4a09      	ldr	r2, [pc, #36]	; (8007294 <xTaskPriorityDisinherit+0xd8>)
 800726e:	441a      	add	r2, r3
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	3304      	adds	r3, #4
 8007274:	4619      	mov	r1, r3
 8007276:	4610      	mov	r0, r2
 8007278:	f7fe fbe5 	bl	8005a46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007280:	697b      	ldr	r3, [r7, #20]
	}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20004780 	.word	0x20004780
 8007290:	20004c5c 	.word	0x20004c5c
 8007294:	20004784 	.word	0x20004784

08007298 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072a2:	4b21      	ldr	r3, [pc, #132]	; (8007328 <prvAddCurrentTaskToDelayedList+0x90>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072a8:	4b20      	ldr	r3, [pc, #128]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fc26 	bl	8005b00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d10a      	bne.n	80072d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d007      	beq.n	80072d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072c2:	4b1a      	ldr	r3, [pc, #104]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3304      	adds	r3, #4
 80072c8:	4619      	mov	r1, r3
 80072ca:	4819      	ldr	r0, [pc, #100]	; (8007330 <prvAddCurrentTaskToDelayedList+0x98>)
 80072cc:	f7fe fbbb 	bl	8005a46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072d0:	e026      	b.n	8007320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4413      	add	r3, r2
 80072d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072da:	4b14      	ldr	r3, [pc, #80]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d209      	bcs.n	80072fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4b0f      	ldr	r3, [pc, #60]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fe fbc9 	bl	8005a8e <vListInsert>
}
 80072fc:	e010      	b.n	8007320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072fe:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4b0a      	ldr	r3, [pc, #40]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f7fe fbbf 	bl	8005a8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	429a      	cmp	r2, r3
 8007318:	d202      	bcs.n	8007320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800731a:	4a08      	ldr	r2, [pc, #32]	; (800733c <prvAddCurrentTaskToDelayedList+0xa4>)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	6013      	str	r3, [r2, #0]
}
 8007320:	bf00      	nop
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20004c58 	.word	0x20004c58
 800732c:	20004780 	.word	0x20004780
 8007330:	20004c40 	.word	0x20004c40
 8007334:	20004c10 	.word	0x20004c10
 8007338:	20004c0c 	.word	0x20004c0c
 800733c:	20004c74 	.word	0x20004c74

08007340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800734a:	f000 fb07 	bl	800795c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800734e:	4b1c      	ldr	r3, [pc, #112]	; (80073c0 <xTimerCreateTimerTask+0x80>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d021      	beq.n	800739a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800735e:	1d3a      	adds	r2, r7, #4
 8007360:	f107 0108 	add.w	r1, r7, #8
 8007364:	f107 030c 	add.w	r3, r7, #12
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe fb25 	bl	80059b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	9202      	str	r2, [sp, #8]
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	2302      	movs	r3, #2
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	2300      	movs	r3, #0
 800737e:	460a      	mov	r2, r1
 8007380:	4910      	ldr	r1, [pc, #64]	; (80073c4 <xTimerCreateTimerTask+0x84>)
 8007382:	4811      	ldr	r0, [pc, #68]	; (80073c8 <xTimerCreateTimerTask+0x88>)
 8007384:	f7ff f8ce 	bl	8006524 <xTaskCreateStatic>
 8007388:	4603      	mov	r3, r0
 800738a:	4a10      	ldr	r2, [pc, #64]	; (80073cc <xTimerCreateTimerTask+0x8c>)
 800738c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <xTimerCreateTimerTask+0x8c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007396:	2301      	movs	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	613b      	str	r3, [r7, #16]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073b6:	697b      	ldr	r3, [r7, #20]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20004cb0 	.word	0x20004cb0
 80073c4:	08008544 	.word	0x08008544
 80073c8:	08007505 	.word	0x08007505
 80073cc:	20004cb4 	.word	0x20004cb4

080073d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	; 0x28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073de:	2300      	movs	r3, #0
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	623b      	str	r3, [r7, #32]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073fe:	4b1a      	ldr	r3, [pc, #104]	; (8007468 <xTimerGenericCommand+0x98>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d02a      	beq.n	800745c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b05      	cmp	r3, #5
 8007416:	dc18      	bgt.n	800744a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007418:	f7ff feb2 	bl	8007180 <xTaskGetSchedulerState>
 800741c:	4603      	mov	r3, r0
 800741e:	2b02      	cmp	r3, #2
 8007420:	d109      	bne.n	8007436 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007422:	4b11      	ldr	r3, [pc, #68]	; (8007468 <xTimerGenericCommand+0x98>)
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	f107 0110 	add.w	r1, r7, #16
 800742a:	2300      	movs	r3, #0
 800742c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742e:	f7fe fc95 	bl	8005d5c <xQueueGenericSend>
 8007432:	6278      	str	r0, [r7, #36]	; 0x24
 8007434:	e012      	b.n	800745c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <xTimerGenericCommand+0x98>)
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	f107 0110 	add.w	r1, r7, #16
 800743e:	2300      	movs	r3, #0
 8007440:	2200      	movs	r2, #0
 8007442:	f7fe fc8b 	bl	8005d5c <xQueueGenericSend>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24
 8007448:	e008      	b.n	800745c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800744a:	4b07      	ldr	r3, [pc, #28]	; (8007468 <xTimerGenericCommand+0x98>)
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	f107 0110 	add.w	r1, r7, #16
 8007452:	2300      	movs	r3, #0
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	f7fe fd7f 	bl	8005f58 <xQueueGenericSendFromISR>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800745e:	4618      	mov	r0, r3
 8007460:	3728      	adds	r7, #40	; 0x28
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20004cb0 	.word	0x20004cb0

0800746c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af02      	add	r7, sp, #8
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007476:	4b22      	ldr	r3, [pc, #136]	; (8007500 <prvProcessExpiredTimer+0x94>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	3304      	adds	r3, #4
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fb3b 	bl	8005b00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d022      	beq.n	80074de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	699a      	ldr	r2, [r3, #24]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	18d1      	adds	r1, r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	6978      	ldr	r0, [r7, #20]
 80074a6:	f000 f8d1 	bl	800764c <prvInsertTimerInActiveList>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01f      	beq.n	80074f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074b0:	2300      	movs	r3, #0
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	2300      	movs	r3, #0
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	2100      	movs	r1, #0
 80074ba:	6978      	ldr	r0, [r7, #20]
 80074bc:	f7ff ff88 	bl	80073d0 <xTimerGenericCommand>
 80074c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d113      	bne.n	80074f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	6978      	ldr	r0, [r7, #20]
 80074f6:	4798      	blx	r3
}
 80074f8:	bf00      	nop
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20004ca8 	.word	0x20004ca8

08007504 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800750c:	f107 0308 	add.w	r3, r7, #8
 8007510:	4618      	mov	r0, r3
 8007512:	f000 f857 	bl	80075c4 <prvGetNextExpireTime>
 8007516:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4619      	mov	r1, r3
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f803 	bl	8007528 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007522:	f000 f8d5 	bl	80076d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007526:	e7f1      	b.n	800750c <prvTimerTask+0x8>

08007528 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007532:	f7ff fa33 	bl	800699c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007536:	f107 0308 	add.w	r3, r7, #8
 800753a:	4618      	mov	r0, r3
 800753c:	f000 f866 	bl	800760c <prvSampleTimeNow>
 8007540:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d130      	bne.n	80075aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <prvProcessTimerOrBlockTask+0x3c>
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	429a      	cmp	r2, r3
 8007554:	d806      	bhi.n	8007564 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007556:	f7ff fa2f 	bl	80069b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800755a:	68f9      	ldr	r1, [r7, #12]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff ff85 	bl	800746c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007562:	e024      	b.n	80075ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d008      	beq.n	800757c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800756a:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <prvProcessTimerOrBlockTask+0x90>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <prvProcessTimerOrBlockTask+0x50>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <prvProcessTimerOrBlockTask+0x52>
 8007578:	2300      	movs	r3, #0
 800757a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800757c:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <prvProcessTimerOrBlockTask+0x94>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4619      	mov	r1, r3
 800758a:	f7fe ff97 	bl	80064bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800758e:	f7ff fa13 	bl	80069b8 <xTaskResumeAll>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <prvProcessTimerOrBlockTask+0x98>)
 800759a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	f3bf 8f6f 	isb	sy
}
 80075a8:	e001      	b.n	80075ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075aa:	f7ff fa05 	bl	80069b8 <xTaskResumeAll>
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20004cac 	.word	0x20004cac
 80075bc:	20004cb0 	.word	0x20004cb0
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075cc:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <prvGetNextExpireTime+0x44>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <prvGetNextExpireTime+0x16>
 80075d6:	2201      	movs	r2, #1
 80075d8:	e000      	b.n	80075dc <prvGetNextExpireTime+0x18>
 80075da:	2200      	movs	r2, #0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d105      	bne.n	80075f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075e8:	4b07      	ldr	r3, [pc, #28]	; (8007608 <prvGetNextExpireTime+0x44>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	e001      	b.n	80075f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075f8:	68fb      	ldr	r3, [r7, #12]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20004ca8 	.word	0x20004ca8

0800760c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007614:	f7ff fa6e 	bl	8006af4 <xTaskGetTickCount>
 8007618:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800761a:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <prvSampleTimeNow+0x3c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	429a      	cmp	r2, r3
 8007622:	d205      	bcs.n	8007630 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007624:	f000 f936 	bl	8007894 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	e002      	b.n	8007636 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007636:	4a04      	ldr	r2, [pc, #16]	; (8007648 <prvSampleTimeNow+0x3c>)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800763c:	68fb      	ldr	r3, [r7, #12]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20004cb8 	.word	0x20004cb8

0800764c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d812      	bhi.n	8007698 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	429a      	cmp	r2, r3
 800767e:	d302      	bcc.n	8007686 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	e01b      	b.n	80076be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007686:	4b10      	ldr	r3, [pc, #64]	; (80076c8 <prvInsertTimerInActiveList+0x7c>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3304      	adds	r3, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f7fe f9fc 	bl	8005a8e <vListInsert>
 8007696:	e012      	b.n	80076be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	429a      	cmp	r2, r3
 800769e:	d206      	bcs.n	80076ae <prvInsertTimerInActiveList+0x62>
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d302      	bcc.n	80076ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	e007      	b.n	80076be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076ae:	4b07      	ldr	r3, [pc, #28]	; (80076cc <prvInsertTimerInActiveList+0x80>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7fe f9e8 	bl	8005a8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076be:	697b      	ldr	r3, [r7, #20]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20004cac 	.word	0x20004cac
 80076cc:	20004ca8 	.word	0x20004ca8

080076d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08e      	sub	sp, #56	; 0x38
 80076d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076d6:	e0ca      	b.n	800786e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da18      	bge.n	8007710 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	3304      	adds	r3, #4
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	61fb      	str	r3, [r7, #28]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007706:	6850      	ldr	r0, [r2, #4]
 8007708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800770a:	6892      	ldr	r2, [r2, #8]
 800770c:	4611      	mov	r1, r2
 800770e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f2c0 80aa 	blt.w	800786c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe f9e9 	bl	8005b00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800772e:	463b      	mov	r3, r7
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff ff6b 	bl	800760c <prvSampleTimeNow>
 8007736:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b09      	cmp	r3, #9
 800773c:	f200 8097 	bhi.w	800786e <prvProcessReceivedCommands+0x19e>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <prvProcessReceivedCommands+0x78>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	08007771 	.word	0x08007771
 800774c:	08007771 	.word	0x08007771
 8007750:	08007771 	.word	0x08007771
 8007754:	080077e5 	.word	0x080077e5
 8007758:	080077f9 	.word	0x080077f9
 800775c:	08007843 	.word	0x08007843
 8007760:	08007771 	.word	0x08007771
 8007764:	08007771 	.word	0x08007771
 8007768:	080077e5 	.word	0x080077e5
 800776c:	080077f9 	.word	0x080077f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007776:	f043 0301 	orr.w	r3, r3, #1
 800777a:	b2da      	uxtb	r2, r3
 800777c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	18d1      	adds	r1, r2, r3
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007790:	f7ff ff5c 	bl	800764c <prvInsertTimerInActiveList>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d069      	beq.n	800786e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d05e      	beq.n	800786e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	441a      	add	r2, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	2300      	movs	r3, #0
 80077be:	2100      	movs	r1, #0
 80077c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c2:	f7ff fe05 	bl	80073d0 <xTimerGenericCommand>
 80077c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d14f      	bne.n	800786e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	61bb      	str	r3, [r7, #24]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80077f6:	e03a      	b.n	800786e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	b2da      	uxtb	r2, r3
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	617b      	str	r3, [r7, #20]
}
 800782a:	bf00      	nop
 800782c:	e7fe      	b.n	800782c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	18d1      	adds	r1, r2, r3
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783c:	f7ff ff06 	bl	800764c <prvInsertTimerInActiveList>
					break;
 8007840:	e015      	b.n	800786e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007852:	f000 fbd5 	bl	8008000 <vPortFree>
 8007856:	e00a      	b.n	800786e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800785e:	f023 0301 	bic.w	r3, r3, #1
 8007862:	b2da      	uxtb	r2, r3
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800786a:	e000      	b.n	800786e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800786c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800786e:	4b08      	ldr	r3, [pc, #32]	; (8007890 <prvProcessReceivedCommands+0x1c0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	1d39      	adds	r1, r7, #4
 8007874:	2200      	movs	r2, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fc06 	bl	8006088 <xQueueReceive>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	f47f af2a 	bne.w	80076d8 <prvProcessReceivedCommands+0x8>
	}
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	3730      	adds	r7, #48	; 0x30
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20004cb0 	.word	0x20004cb0

08007894 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800789a:	e048      	b.n	800792e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800789c:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <prvSwitchTimerLists+0xc0>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a6:	4b2b      	ldr	r3, [pc, #172]	; (8007954 <prvSwitchTimerLists+0xc0>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe f923 	bl	8005b00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d02e      	beq.n	800792e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d90e      	bls.n	8007900 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078ee:	4b19      	ldr	r3, [pc, #100]	; (8007954 <prvSwitchTimerLists+0xc0>)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4619      	mov	r1, r3
 80078f8:	4610      	mov	r0, r2
 80078fa:	f7fe f8c8 	bl	8005a8e <vListInsert>
 80078fe:	e016      	b.n	800792e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007900:	2300      	movs	r3, #0
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	2300      	movs	r3, #0
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	2100      	movs	r1, #0
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7ff fd60 	bl	80073d0 <xTimerGenericCommand>
 8007910:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10a      	bne.n	800792e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	603b      	str	r3, [r7, #0]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800792e:	4b09      	ldr	r3, [pc, #36]	; (8007954 <prvSwitchTimerLists+0xc0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1b1      	bne.n	800789c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <prvSwitchTimerLists+0xc0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800793e:	4b06      	ldr	r3, [pc, #24]	; (8007958 <prvSwitchTimerLists+0xc4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a04      	ldr	r2, [pc, #16]	; (8007954 <prvSwitchTimerLists+0xc0>)
 8007944:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007946:	4a04      	ldr	r2, [pc, #16]	; (8007958 <prvSwitchTimerLists+0xc4>)
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	6013      	str	r3, [r2, #0]
}
 800794c:	bf00      	nop
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20004ca8 	.word	0x20004ca8
 8007958:	20004cac 	.word	0x20004cac

0800795c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007962:	f000 f967 	bl	8007c34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007966:	4b15      	ldr	r3, [pc, #84]	; (80079bc <prvCheckForValidListAndQueue+0x60>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d120      	bne.n	80079b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800796e:	4814      	ldr	r0, [pc, #80]	; (80079c0 <prvCheckForValidListAndQueue+0x64>)
 8007970:	f7fe f83c 	bl	80059ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007974:	4813      	ldr	r0, [pc, #76]	; (80079c4 <prvCheckForValidListAndQueue+0x68>)
 8007976:	f7fe f839 	bl	80059ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800797a:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <prvCheckForValidListAndQueue+0x6c>)
 800797c:	4a10      	ldr	r2, [pc, #64]	; (80079c0 <prvCheckForValidListAndQueue+0x64>)
 800797e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007980:	4b12      	ldr	r3, [pc, #72]	; (80079cc <prvCheckForValidListAndQueue+0x70>)
 8007982:	4a10      	ldr	r2, [pc, #64]	; (80079c4 <prvCheckForValidListAndQueue+0x68>)
 8007984:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007986:	2300      	movs	r3, #0
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	4b11      	ldr	r3, [pc, #68]	; (80079d0 <prvCheckForValidListAndQueue+0x74>)
 800798c:	4a11      	ldr	r2, [pc, #68]	; (80079d4 <prvCheckForValidListAndQueue+0x78>)
 800798e:	2110      	movs	r1, #16
 8007990:	200a      	movs	r0, #10
 8007992:	f7fe f947 	bl	8005c24 <xQueueGenericCreateStatic>
 8007996:	4603      	mov	r3, r0
 8007998:	4a08      	ldr	r2, [pc, #32]	; (80079bc <prvCheckForValidListAndQueue+0x60>)
 800799a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800799c:	4b07      	ldr	r3, [pc, #28]	; (80079bc <prvCheckForValidListAndQueue+0x60>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <prvCheckForValidListAndQueue+0x60>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	490b      	ldr	r1, [pc, #44]	; (80079d8 <prvCheckForValidListAndQueue+0x7c>)
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe fd5c 	bl	8006468 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079b0:	f000 f970 	bl	8007c94 <vPortExitCritical>
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20004cb0 	.word	0x20004cb0
 80079c0:	20004c80 	.word	0x20004c80
 80079c4:	20004c94 	.word	0x20004c94
 80079c8:	20004ca8 	.word	0x20004ca8
 80079cc:	20004cac 	.word	0x20004cac
 80079d0:	20004d5c 	.word	0x20004d5c
 80079d4:	20004cbc 	.word	0x20004cbc
 80079d8:	0800854c 	.word	0x0800854c

080079dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3b04      	subs	r3, #4
 80079ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f023 0201 	bic.w	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a0c:	4a0c      	ldr	r2, [pc, #48]	; (8007a40 <pxPortInitialiseStack+0x64>)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3b14      	subs	r3, #20
 8007a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3b04      	subs	r3, #4
 8007a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f06f 0202 	mvn.w	r2, #2
 8007a2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3b20      	subs	r3, #32
 8007a30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a32:	68fb      	ldr	r3, [r7, #12]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	08007a45 	.word	0x08007a45

08007a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <prvTaskExitError+0x54>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a56:	d00a      	beq.n	8007a6e <prvTaskExitError+0x2a>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	60fb      	str	r3, [r7, #12]
}
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <prvTaskExitError+0x28>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	60bb      	str	r3, [r7, #8]
}
 8007a80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a82:	bf00      	nop
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0fc      	beq.n	8007a84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	2000000c 	.word	0x2000000c
 8007a9c:	00000000 	.word	0x00000000

08007aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007aa0:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <pxCurrentTCBConst2>)
 8007aa2:	6819      	ldr	r1, [r3, #0]
 8007aa4:	6808      	ldr	r0, [r1, #0]
 8007aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	f380 8809 	msr	PSP, r0
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f04f 0000 	mov.w	r0, #0
 8007ab6:	f380 8811 	msr	BASEPRI, r0
 8007aba:	4770      	bx	lr
 8007abc:	f3af 8000 	nop.w

08007ac0 <pxCurrentTCBConst2>:
 8007ac0:	20004780 	.word	0x20004780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop

08007ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ac8:	4808      	ldr	r0, [pc, #32]	; (8007aec <prvPortStartFirstTask+0x24>)
 8007aca:	6800      	ldr	r0, [r0, #0]
 8007acc:	6800      	ldr	r0, [r0, #0]
 8007ace:	f380 8808 	msr	MSP, r0
 8007ad2:	f04f 0000 	mov.w	r0, #0
 8007ad6:	f380 8814 	msr	CONTROL, r0
 8007ada:	b662      	cpsie	i
 8007adc:	b661      	cpsie	f
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	df00      	svc	0
 8007ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aea:	bf00      	nop
 8007aec:	e000ed08 	.word	0xe000ed08

08007af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007af6:	4b46      	ldr	r3, [pc, #280]	; (8007c10 <xPortStartScheduler+0x120>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a46      	ldr	r2, [pc, #280]	; (8007c14 <xPortStartScheduler+0x124>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d10a      	bne.n	8007b16 <xPortStartScheduler+0x26>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	613b      	str	r3, [r7, #16]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b16:	4b3e      	ldr	r3, [pc, #248]	; (8007c10 <xPortStartScheduler+0x120>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a3f      	ldr	r2, [pc, #252]	; (8007c18 <xPortStartScheduler+0x128>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10a      	bne.n	8007b36 <xPortStartScheduler+0x46>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	60fb      	str	r3, [r7, #12]
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b36:	4b39      	ldr	r3, [pc, #228]	; (8007c1c <xPortStartScheduler+0x12c>)
 8007b38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	22ff      	movs	r2, #255	; 0xff
 8007b46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	4b31      	ldr	r3, [pc, #196]	; (8007c20 <xPortStartScheduler+0x130>)
 8007b5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b5e:	4b31      	ldr	r3, [pc, #196]	; (8007c24 <xPortStartScheduler+0x134>)
 8007b60:	2207      	movs	r2, #7
 8007b62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b64:	e009      	b.n	8007b7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b66:	4b2f      	ldr	r3, [pc, #188]	; (8007c24 <xPortStartScheduler+0x134>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	4a2d      	ldr	r2, [pc, #180]	; (8007c24 <xPortStartScheduler+0x134>)
 8007b6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d0ef      	beq.n	8007b66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b86:	4b27      	ldr	r3, [pc, #156]	; (8007c24 <xPortStartScheduler+0x134>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1c3 0307 	rsb	r3, r3, #7
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d00a      	beq.n	8007ba8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	60bb      	str	r3, [r7, #8]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ba8:	4b1e      	ldr	r3, [pc, #120]	; (8007c24 <xPortStartScheduler+0x134>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <xPortStartScheduler+0x134>)
 8007bb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bb2:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <xPortStartScheduler+0x134>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bba:	4a1a      	ldr	r2, [pc, #104]	; (8007c24 <xPortStartScheduler+0x134>)
 8007bbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bc6:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <xPortStartScheduler+0x138>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <xPortStartScheduler+0x138>)
 8007bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bd2:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <xPortStartScheduler+0x138>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a14      	ldr	r2, [pc, #80]	; (8007c28 <xPortStartScheduler+0x138>)
 8007bd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bde:	f000 f8dd 	bl	8007d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007be2:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <xPortStartScheduler+0x13c>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007be8:	f000 f8fc 	bl	8007de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bec:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <xPortStartScheduler+0x140>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0f      	ldr	r2, [pc, #60]	; (8007c30 <xPortStartScheduler+0x140>)
 8007bf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007bf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bf8:	f7ff ff66 	bl	8007ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bfc:	f7ff f844 	bl	8006c88 <vTaskSwitchContext>
	prvTaskExitError();
 8007c00:	f7ff ff20 	bl	8007a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	e000ed00 	.word	0xe000ed00
 8007c14:	410fc271 	.word	0x410fc271
 8007c18:	410fc270 	.word	0x410fc270
 8007c1c:	e000e400 	.word	0xe000e400
 8007c20:	20004dac 	.word	0x20004dac
 8007c24:	20004db0 	.word	0x20004db0
 8007c28:	e000ed20 	.word	0xe000ed20
 8007c2c:	2000000c 	.word	0x2000000c
 8007c30:	e000ef34 	.word	0xe000ef34

08007c34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	607b      	str	r3, [r7, #4]
}
 8007c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c4e:	4b0f      	ldr	r3, [pc, #60]	; (8007c8c <vPortEnterCritical+0x58>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3301      	adds	r3, #1
 8007c54:	4a0d      	ldr	r2, [pc, #52]	; (8007c8c <vPortEnterCritical+0x58>)
 8007c56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c58:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <vPortEnterCritical+0x58>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d10f      	bne.n	8007c80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <vPortEnterCritical+0x5c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	603b      	str	r3, [r7, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <vPortEnterCritical+0x4a>
	}
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	2000000c 	.word	0x2000000c
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c9a:	4b12      	ldr	r3, [pc, #72]	; (8007ce4 <vPortExitCritical+0x50>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <vPortExitCritical+0x24>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	607b      	str	r3, [r7, #4]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <vPortExitCritical+0x50>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <vPortExitCritical+0x50>)
 8007cc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cc2:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <vPortExitCritical+0x50>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <vPortExitCritical+0x42>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	f383 8811 	msr	BASEPRI, r3
}
 8007cd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	2000000c 	.word	0x2000000c
	...

08007cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cf0:	f3ef 8009 	mrs	r0, PSP
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	4b15      	ldr	r3, [pc, #84]	; (8007d50 <pxCurrentTCBConst>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	f01e 0f10 	tst.w	lr, #16
 8007d00:	bf08      	it	eq
 8007d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0a:	6010      	str	r0, [r2, #0]
 8007d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d14:	f380 8811 	msr	BASEPRI, r0
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f7fe ffb2 	bl	8006c88 <vTaskSwitchContext>
 8007d24:	f04f 0000 	mov.w	r0, #0
 8007d28:	f380 8811 	msr	BASEPRI, r0
 8007d2c:	bc09      	pop	{r0, r3}
 8007d2e:	6819      	ldr	r1, [r3, #0]
 8007d30:	6808      	ldr	r0, [r1, #0]
 8007d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d36:	f01e 0f10 	tst.w	lr, #16
 8007d3a:	bf08      	it	eq
 8007d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d40:	f380 8809 	msr	PSP, r0
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w

08007d50 <pxCurrentTCBConst>:
 8007d50:	20004780 	.word	0x20004780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
}
 8007d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d72:	f7fe fecf 	bl	8006b14 <xTaskIncrementTick>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d7c:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <SysTick_Handler+0x40>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	2300      	movs	r3, #0
 8007d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	f383 8811 	msr	BASEPRI, r3
}
 8007d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	e000ed04 	.word	0xe000ed04

08007d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007da0:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <vPortSetupTimerInterrupt+0x34>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007da6:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <vPortSetupTimerInterrupt+0x38>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <vPortSetupTimerInterrupt+0x3c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0a      	ldr	r2, [pc, #40]	; (8007ddc <vPortSetupTimerInterrupt+0x40>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	099b      	lsrs	r3, r3, #6
 8007db8:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <vPortSetupTimerInterrupt+0x44>)
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <vPortSetupTimerInterrupt+0x34>)
 8007dc0:	2207      	movs	r2, #7
 8007dc2:	601a      	str	r2, [r3, #0]
}
 8007dc4:	bf00      	nop
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	e000e010 	.word	0xe000e010
 8007dd4:	e000e018 	.word	0xe000e018
 8007dd8:	20000000 	.word	0x20000000
 8007ddc:	10624dd3 	.word	0x10624dd3
 8007de0:	e000e014 	.word	0xe000e014

08007de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007df4 <vPortEnableVFP+0x10>
 8007de8:	6801      	ldr	r1, [r0, #0]
 8007dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dee:	6001      	str	r1, [r0, #0]
 8007df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007df2:	bf00      	nop
 8007df4:	e000ed88 	.word	0xe000ed88

08007df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dfe:	f3ef 8305 	mrs	r3, IPSR
 8007e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	d914      	bls.n	8007e34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e0a:	4a17      	ldr	r2, [pc, #92]	; (8007e68 <vPortValidateInterruptPriority+0x70>)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e14:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <vPortValidateInterruptPriority+0x74>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	7afa      	ldrb	r2, [r7, #11]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d20a      	bcs.n	8007e34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	607b      	str	r3, [r7, #4]
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e34:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <vPortValidateInterruptPriority+0x78>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e3c:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <vPortValidateInterruptPriority+0x7c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d90a      	bls.n	8007e5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	603b      	str	r3, [r7, #0]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <vPortValidateInterruptPriority+0x60>
	}
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	e000e3f0 	.word	0xe000e3f0
 8007e6c:	20004dac 	.word	0x20004dac
 8007e70:	e000ed0c 	.word	0xe000ed0c
 8007e74:	20004db0 	.word	0x20004db0

08007e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08a      	sub	sp, #40	; 0x28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e80:	2300      	movs	r3, #0
 8007e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e84:	f7fe fd8a 	bl	800699c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e88:	4b58      	ldr	r3, [pc, #352]	; (8007fec <pvPortMalloc+0x174>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e90:	f000 f910 	bl	80080b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e94:	4b56      	ldr	r3, [pc, #344]	; (8007ff0 <pvPortMalloc+0x178>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 808e 	bne.w	8007fbe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d01d      	beq.n	8007ee4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4413      	add	r3, r2
 8007eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d014      	beq.n	8007ee4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f023 0307 	bic.w	r3, r3, #7
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00a      	beq.n	8007ee4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	617b      	str	r3, [r7, #20]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d069      	beq.n	8007fbe <pvPortMalloc+0x146>
 8007eea:	4b42      	ldr	r3, [pc, #264]	; (8007ff4 <pvPortMalloc+0x17c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d864      	bhi.n	8007fbe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ef4:	4b40      	ldr	r3, [pc, #256]	; (8007ff8 <pvPortMalloc+0x180>)
 8007ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ef8:	4b3f      	ldr	r3, [pc, #252]	; (8007ff8 <pvPortMalloc+0x180>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007efe:	e004      	b.n	8007f0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d903      	bls.n	8007f1c <pvPortMalloc+0xa4>
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f1      	bne.n	8007f00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f1c:	4b33      	ldr	r3, [pc, #204]	; (8007fec <pvPortMalloc+0x174>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d04b      	beq.n	8007fbe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	4413      	add	r3, r2
 8007f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	2308      	movs	r3, #8
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d91f      	bls.n	8007f88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <pvPortMalloc+0xf8>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	613b      	str	r3, [r7, #16]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	1ad2      	subs	r2, r2, r3
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f82:	69b8      	ldr	r0, [r7, #24]
 8007f84:	f000 f8f8 	bl	8008178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f88:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <pvPortMalloc+0x17c>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	4a18      	ldr	r2, [pc, #96]	; (8007ff4 <pvPortMalloc+0x17c>)
 8007f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f96:	4b17      	ldr	r3, [pc, #92]	; (8007ff4 <pvPortMalloc+0x17c>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b18      	ldr	r3, [pc, #96]	; (8007ffc <pvPortMalloc+0x184>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d203      	bcs.n	8007faa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fa2:	4b14      	ldr	r3, [pc, #80]	; (8007ff4 <pvPortMalloc+0x17c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a15      	ldr	r2, [pc, #84]	; (8007ffc <pvPortMalloc+0x184>)
 8007fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <pvPortMalloc+0x178>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fbe:	f7fe fcfb 	bl	80069b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <pvPortMalloc+0x16a>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	60fb      	str	r3, [r7, #12]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <pvPortMalloc+0x168>
	return pvReturn;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3728      	adds	r7, #40	; 0x28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	2000c2ec 	.word	0x2000c2ec
 8007ff0:	2000c2f8 	.word	0x2000c2f8
 8007ff4:	2000c2f0 	.word	0x2000c2f0
 8007ff8:	2000c2e4 	.word	0x2000c2e4
 8007ffc:	2000c2f4 	.word	0x2000c2f4

08008000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d048      	beq.n	80080a4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008012:	2308      	movs	r3, #8
 8008014:	425b      	negs	r3, r3
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4413      	add	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	4b21      	ldr	r3, [pc, #132]	; (80080ac <vPortFree+0xac>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4013      	ands	r3, r2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <vPortFree+0x44>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	60fb      	str	r3, [r7, #12]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <vPortFree+0x62>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	60bb      	str	r3, [r7, #8]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	4b11      	ldr	r3, [pc, #68]	; (80080ac <vPortFree+0xac>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4013      	ands	r3, r2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d019      	beq.n	80080a4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d115      	bne.n	80080a4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <vPortFree+0xac>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	43db      	mvns	r3, r3
 8008082:	401a      	ands	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008088:	f7fe fc88 	bl	800699c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <vPortFree+0xb0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4413      	add	r3, r2
 8008096:	4a06      	ldr	r2, [pc, #24]	; (80080b0 <vPortFree+0xb0>)
 8008098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800809a:	6938      	ldr	r0, [r7, #16]
 800809c:	f000 f86c 	bl	8008178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080a0:	f7fe fc8a 	bl	80069b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080a4:	bf00      	nop
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	2000c2f8 	.word	0x2000c2f8
 80080b0:	2000c2f0 	.word	0x2000c2f0

080080b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ba:	f247 5330 	movw	r3, #30000	; 0x7530
 80080be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080c0:	4b27      	ldr	r3, [pc, #156]	; (8008160 <prvHeapInit+0xac>)
 80080c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3307      	adds	r3, #7
 80080d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0307 	bic.w	r3, r3, #7
 80080da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <prvHeapInit+0xac>)
 80080e4:	4413      	add	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080ec:	4a1d      	ldr	r2, [pc, #116]	; (8008164 <prvHeapInit+0xb0>)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080f2:	4b1c      	ldr	r3, [pc, #112]	; (8008164 <prvHeapInit+0xb0>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	4413      	add	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0307 	bic.w	r3, r3, #7
 800810e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a15      	ldr	r2, [pc, #84]	; (8008168 <prvHeapInit+0xb4>)
 8008114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008116:	4b14      	ldr	r3, [pc, #80]	; (8008168 <prvHeapInit+0xb4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <prvHeapInit+0xb4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008134:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <prvHeapInit+0xb4>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	4a0a      	ldr	r2, [pc, #40]	; (800816c <prvHeapInit+0xb8>)
 8008142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4a09      	ldr	r2, [pc, #36]	; (8008170 <prvHeapInit+0xbc>)
 800814a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <prvHeapInit+0xc0>)
 800814e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008152:	601a      	str	r2, [r3, #0]
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	20004db4 	.word	0x20004db4
 8008164:	2000c2e4 	.word	0x2000c2e4
 8008168:	2000c2ec 	.word	0x2000c2ec
 800816c:	2000c2f4 	.word	0x2000c2f4
 8008170:	2000c2f0 	.word	0x2000c2f0
 8008174:	2000c2f8 	.word	0x2000c2f8

08008178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008180:	4b28      	ldr	r3, [pc, #160]	; (8008224 <prvInsertBlockIntoFreeList+0xac>)
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e002      	b.n	800818c <prvInsertBlockIntoFreeList+0x14>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d8f7      	bhi.n	8008186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d108      	bne.n	80081ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	441a      	add	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	441a      	add	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d118      	bne.n	8008200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b15      	ldr	r3, [pc, #84]	; (8008228 <prvInsertBlockIntoFreeList+0xb0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d00d      	beq.n	80081f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	441a      	add	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e008      	b.n	8008208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081f6:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <prvInsertBlockIntoFreeList+0xb0>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e003      	b.n	8008208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d002      	beq.n	8008216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	2000c2e4 	.word	0x2000c2e4
 8008228:	2000c2ec 	.word	0x2000c2ec

0800822c <__errno>:
 800822c:	4b01      	ldr	r3, [pc, #4]	; (8008234 <__errno+0x8>)
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20000010 	.word	0x20000010

08008238 <__libc_init_array>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	4d0d      	ldr	r5, [pc, #52]	; (8008270 <__libc_init_array+0x38>)
 800823c:	4c0d      	ldr	r4, [pc, #52]	; (8008274 <__libc_init_array+0x3c>)
 800823e:	1b64      	subs	r4, r4, r5
 8008240:	10a4      	asrs	r4, r4, #2
 8008242:	2600      	movs	r6, #0
 8008244:	42a6      	cmp	r6, r4
 8008246:	d109      	bne.n	800825c <__libc_init_array+0x24>
 8008248:	4d0b      	ldr	r5, [pc, #44]	; (8008278 <__libc_init_array+0x40>)
 800824a:	4c0c      	ldr	r4, [pc, #48]	; (800827c <__libc_init_array+0x44>)
 800824c:	f000 f906 	bl	800845c <_init>
 8008250:	1b64      	subs	r4, r4, r5
 8008252:	10a4      	asrs	r4, r4, #2
 8008254:	2600      	movs	r6, #0
 8008256:	42a6      	cmp	r6, r4
 8008258:	d105      	bne.n	8008266 <__libc_init_array+0x2e>
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008260:	4798      	blx	r3
 8008262:	3601      	adds	r6, #1
 8008264:	e7ee      	b.n	8008244 <__libc_init_array+0xc>
 8008266:	f855 3b04 	ldr.w	r3, [r5], #4
 800826a:	4798      	blx	r3
 800826c:	3601      	adds	r6, #1
 800826e:	e7f2      	b.n	8008256 <__libc_init_array+0x1e>
 8008270:	080085bc 	.word	0x080085bc
 8008274:	080085bc 	.word	0x080085bc
 8008278:	080085bc 	.word	0x080085bc
 800827c:	080085c0 	.word	0x080085c0

08008280 <malloc>:
 8008280:	4b02      	ldr	r3, [pc, #8]	; (800828c <malloc+0xc>)
 8008282:	4601      	mov	r1, r0
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	f000 b871 	b.w	800836c <_malloc_r>
 800828a:	bf00      	nop
 800828c:	20000010 	.word	0x20000010

08008290 <free>:
 8008290:	4b02      	ldr	r3, [pc, #8]	; (800829c <free+0xc>)
 8008292:	4601      	mov	r1, r0
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	f000 b819 	b.w	80082cc <_free_r>
 800829a:	bf00      	nop
 800829c:	20000010 	.word	0x20000010

080082a0 <memcpy>:
 80082a0:	440a      	add	r2, r1
 80082a2:	4291      	cmp	r1, r2
 80082a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082a8:	d100      	bne.n	80082ac <memcpy+0xc>
 80082aa:	4770      	bx	lr
 80082ac:	b510      	push	{r4, lr}
 80082ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082b6:	4291      	cmp	r1, r2
 80082b8:	d1f9      	bne.n	80082ae <memcpy+0xe>
 80082ba:	bd10      	pop	{r4, pc}

080082bc <memset>:
 80082bc:	4402      	add	r2, r0
 80082be:	4603      	mov	r3, r0
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d100      	bne.n	80082c6 <memset+0xa>
 80082c4:	4770      	bx	lr
 80082c6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ca:	e7f9      	b.n	80082c0 <memset+0x4>

080082cc <_free_r>:
 80082cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ce:	2900      	cmp	r1, #0
 80082d0:	d048      	beq.n	8008364 <_free_r+0x98>
 80082d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082d6:	9001      	str	r0, [sp, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f1a1 0404 	sub.w	r4, r1, #4
 80082de:	bfb8      	it	lt
 80082e0:	18e4      	addlt	r4, r4, r3
 80082e2:	f000 f8ad 	bl	8008440 <__malloc_lock>
 80082e6:	4a20      	ldr	r2, [pc, #128]	; (8008368 <_free_r+0x9c>)
 80082e8:	9801      	ldr	r0, [sp, #4]
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	4615      	mov	r5, r2
 80082ee:	b933      	cbnz	r3, 80082fe <_free_r+0x32>
 80082f0:	6063      	str	r3, [r4, #4]
 80082f2:	6014      	str	r4, [r2, #0]
 80082f4:	b003      	add	sp, #12
 80082f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082fa:	f000 b8a7 	b.w	800844c <__malloc_unlock>
 80082fe:	42a3      	cmp	r3, r4
 8008300:	d90b      	bls.n	800831a <_free_r+0x4e>
 8008302:	6821      	ldr	r1, [r4, #0]
 8008304:	1862      	adds	r2, r4, r1
 8008306:	4293      	cmp	r3, r2
 8008308:	bf04      	itt	eq
 800830a:	681a      	ldreq	r2, [r3, #0]
 800830c:	685b      	ldreq	r3, [r3, #4]
 800830e:	6063      	str	r3, [r4, #4]
 8008310:	bf04      	itt	eq
 8008312:	1852      	addeq	r2, r2, r1
 8008314:	6022      	streq	r2, [r4, #0]
 8008316:	602c      	str	r4, [r5, #0]
 8008318:	e7ec      	b.n	80082f4 <_free_r+0x28>
 800831a:	461a      	mov	r2, r3
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b10b      	cbz	r3, 8008324 <_free_r+0x58>
 8008320:	42a3      	cmp	r3, r4
 8008322:	d9fa      	bls.n	800831a <_free_r+0x4e>
 8008324:	6811      	ldr	r1, [r2, #0]
 8008326:	1855      	adds	r5, r2, r1
 8008328:	42a5      	cmp	r5, r4
 800832a:	d10b      	bne.n	8008344 <_free_r+0x78>
 800832c:	6824      	ldr	r4, [r4, #0]
 800832e:	4421      	add	r1, r4
 8008330:	1854      	adds	r4, r2, r1
 8008332:	42a3      	cmp	r3, r4
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	d1dd      	bne.n	80082f4 <_free_r+0x28>
 8008338:	681c      	ldr	r4, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	6053      	str	r3, [r2, #4]
 800833e:	4421      	add	r1, r4
 8008340:	6011      	str	r1, [r2, #0]
 8008342:	e7d7      	b.n	80082f4 <_free_r+0x28>
 8008344:	d902      	bls.n	800834c <_free_r+0x80>
 8008346:	230c      	movs	r3, #12
 8008348:	6003      	str	r3, [r0, #0]
 800834a:	e7d3      	b.n	80082f4 <_free_r+0x28>
 800834c:	6825      	ldr	r5, [r4, #0]
 800834e:	1961      	adds	r1, r4, r5
 8008350:	428b      	cmp	r3, r1
 8008352:	bf04      	itt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	bf04      	itt	eq
 800835c:	1949      	addeq	r1, r1, r5
 800835e:	6021      	streq	r1, [r4, #0]
 8008360:	6054      	str	r4, [r2, #4]
 8008362:	e7c7      	b.n	80082f4 <_free_r+0x28>
 8008364:	b003      	add	sp, #12
 8008366:	bd30      	pop	{r4, r5, pc}
 8008368:	2000c2fc 	.word	0x2000c2fc

0800836c <_malloc_r>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	1ccd      	adds	r5, r1, #3
 8008370:	f025 0503 	bic.w	r5, r5, #3
 8008374:	3508      	adds	r5, #8
 8008376:	2d0c      	cmp	r5, #12
 8008378:	bf38      	it	cc
 800837a:	250c      	movcc	r5, #12
 800837c:	2d00      	cmp	r5, #0
 800837e:	4606      	mov	r6, r0
 8008380:	db01      	blt.n	8008386 <_malloc_r+0x1a>
 8008382:	42a9      	cmp	r1, r5
 8008384:	d903      	bls.n	800838e <_malloc_r+0x22>
 8008386:	230c      	movs	r3, #12
 8008388:	6033      	str	r3, [r6, #0]
 800838a:	2000      	movs	r0, #0
 800838c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838e:	f000 f857 	bl	8008440 <__malloc_lock>
 8008392:	4921      	ldr	r1, [pc, #132]	; (8008418 <_malloc_r+0xac>)
 8008394:	680a      	ldr	r2, [r1, #0]
 8008396:	4614      	mov	r4, r2
 8008398:	b99c      	cbnz	r4, 80083c2 <_malloc_r+0x56>
 800839a:	4f20      	ldr	r7, [pc, #128]	; (800841c <_malloc_r+0xb0>)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	b923      	cbnz	r3, 80083aa <_malloc_r+0x3e>
 80083a0:	4621      	mov	r1, r4
 80083a2:	4630      	mov	r0, r6
 80083a4:	f000 f83c 	bl	8008420 <_sbrk_r>
 80083a8:	6038      	str	r0, [r7, #0]
 80083aa:	4629      	mov	r1, r5
 80083ac:	4630      	mov	r0, r6
 80083ae:	f000 f837 	bl	8008420 <_sbrk_r>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d123      	bne.n	80083fe <_malloc_r+0x92>
 80083b6:	230c      	movs	r3, #12
 80083b8:	6033      	str	r3, [r6, #0]
 80083ba:	4630      	mov	r0, r6
 80083bc:	f000 f846 	bl	800844c <__malloc_unlock>
 80083c0:	e7e3      	b.n	800838a <_malloc_r+0x1e>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	1b5b      	subs	r3, r3, r5
 80083c6:	d417      	bmi.n	80083f8 <_malloc_r+0x8c>
 80083c8:	2b0b      	cmp	r3, #11
 80083ca:	d903      	bls.n	80083d4 <_malloc_r+0x68>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	441c      	add	r4, r3
 80083d0:	6025      	str	r5, [r4, #0]
 80083d2:	e004      	b.n	80083de <_malloc_r+0x72>
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	42a2      	cmp	r2, r4
 80083d8:	bf0c      	ite	eq
 80083da:	600b      	streq	r3, [r1, #0]
 80083dc:	6053      	strne	r3, [r2, #4]
 80083de:	4630      	mov	r0, r6
 80083e0:	f000 f834 	bl	800844c <__malloc_unlock>
 80083e4:	f104 000b 	add.w	r0, r4, #11
 80083e8:	1d23      	adds	r3, r4, #4
 80083ea:	f020 0007 	bic.w	r0, r0, #7
 80083ee:	1ac2      	subs	r2, r0, r3
 80083f0:	d0cc      	beq.n	800838c <_malloc_r+0x20>
 80083f2:	1a1b      	subs	r3, r3, r0
 80083f4:	50a3      	str	r3, [r4, r2]
 80083f6:	e7c9      	b.n	800838c <_malloc_r+0x20>
 80083f8:	4622      	mov	r2, r4
 80083fa:	6864      	ldr	r4, [r4, #4]
 80083fc:	e7cc      	b.n	8008398 <_malloc_r+0x2c>
 80083fe:	1cc4      	adds	r4, r0, #3
 8008400:	f024 0403 	bic.w	r4, r4, #3
 8008404:	42a0      	cmp	r0, r4
 8008406:	d0e3      	beq.n	80083d0 <_malloc_r+0x64>
 8008408:	1a21      	subs	r1, r4, r0
 800840a:	4630      	mov	r0, r6
 800840c:	f000 f808 	bl	8008420 <_sbrk_r>
 8008410:	3001      	adds	r0, #1
 8008412:	d1dd      	bne.n	80083d0 <_malloc_r+0x64>
 8008414:	e7cf      	b.n	80083b6 <_malloc_r+0x4a>
 8008416:	bf00      	nop
 8008418:	2000c2fc 	.word	0x2000c2fc
 800841c:	2000c300 	.word	0x2000c300

08008420 <_sbrk_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d06      	ldr	r5, [pc, #24]	; (800843c <_sbrk_r+0x1c>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7f8 fa86 	bl	800093c <_sbrk>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_sbrk_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_sbrk_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	2000c97c 	.word	0x2000c97c

08008440 <__malloc_lock>:
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <__malloc_lock+0x8>)
 8008442:	f000 b809 	b.w	8008458 <__retarget_lock_acquire_recursive>
 8008446:	bf00      	nop
 8008448:	2000c984 	.word	0x2000c984

0800844c <__malloc_unlock>:
 800844c:	4801      	ldr	r0, [pc, #4]	; (8008454 <__malloc_unlock+0x8>)
 800844e:	f000 b804 	b.w	800845a <__retarget_lock_release_recursive>
 8008452:	bf00      	nop
 8008454:	2000c984 	.word	0x2000c984

08008458 <__retarget_lock_acquire_recursive>:
 8008458:	4770      	bx	lr

0800845a <__retarget_lock_release_recursive>:
 800845a:	4770      	bx	lr

0800845c <_init>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr

08008468 <_fini>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr
