
ADCSFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004414  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004648  08004648  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004650  08004650  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  2000000c  08004664  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08004664  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b70  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240c  00000000  00000000  00030bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00033000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2b  00000000  00000000  00033d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299f0  00000000  00000000  00034763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f735  00000000  00000000  0005e153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fef0c  00000000  00000000  0006d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003718  00000000  00000000  0016c794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0016feac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080045b8 	.word	0x080045b8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080045b8 	.word	0x080045b8

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800021c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000220:	f000 b970 	b.w	8000504 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	460d      	mov	r5, r1
 8000244:	4604      	mov	r4, r0
 8000246:	460f      	mov	r7, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14a      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024c:	428a      	cmp	r2, r1
 800024e:	4694      	mov	ip, r2
 8000250:	d965      	bls.n	800031e <__udivmoddi4+0xe2>
 8000252:	fab2 f382 	clz	r3, r2
 8000256:	b143      	cbz	r3, 800026a <__udivmoddi4+0x2e>
 8000258:	fa02 fc03 	lsl.w	ip, r2, r3
 800025c:	f1c3 0220 	rsb	r2, r3, #32
 8000260:	409f      	lsls	r7, r3
 8000262:	fa20 f202 	lsr.w	r2, r0, r2
 8000266:	4317      	orrs	r7, r2
 8000268:	409c      	lsls	r4, r3
 800026a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026e:	fa1f f58c 	uxth.w	r5, ip
 8000272:	fbb7 f1fe 	udiv	r1, r7, lr
 8000276:	0c22      	lsrs	r2, r4, #16
 8000278:	fb0e 7711 	mls	r7, lr, r1, r7
 800027c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000280:	fb01 f005 	mul.w	r0, r1, r5
 8000284:	4290      	cmp	r0, r2
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x62>
 8000288:	eb1c 0202 	adds.w	r2, ip, r2
 800028c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000290:	f080 811c 	bcs.w	80004cc <__udivmoddi4+0x290>
 8000294:	4290      	cmp	r0, r2
 8000296:	f240 8119 	bls.w	80004cc <__udivmoddi4+0x290>
 800029a:	3902      	subs	r1, #2
 800029c:	4462      	add	r2, ip
 800029e:	1a12      	subs	r2, r2, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ae:	fb00 f505 	mul.w	r5, r0, r5
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x90>
 80002b6:	eb1c 0404 	adds.w	r4, ip, r4
 80002ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x294>
 80002c2:	42a5      	cmp	r5, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x294>
 80002c8:	4464      	add	r4, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11e      	cbz	r6, 80002de <__udivmoddi4+0xa2>
 80002d6:	40dc      	lsrs	r4, r3
 80002d8:	2300      	movs	r3, #0
 80002da:	e9c6 4300 	strd	r4, r3, [r6]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d908      	bls.n	80002f8 <__udivmoddi4+0xbc>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80ed 	beq.w	80004c6 <__udivmoddi4+0x28a>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e9c6 0500 	strd	r0, r5, [r6]
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	d149      	bne.n	8000394 <__udivmoddi4+0x158>
 8000300:	42ab      	cmp	r3, r5
 8000302:	d302      	bcc.n	800030a <__udivmoddi4+0xce>
 8000304:	4282      	cmp	r2, r0
 8000306:	f200 80f8 	bhi.w	80004fa <__udivmoddi4+0x2be>
 800030a:	1a84      	subs	r4, r0, r2
 800030c:	eb65 0203 	sbc.w	r2, r5, r3
 8000310:	2001      	movs	r0, #1
 8000312:	4617      	mov	r7, r2
 8000314:	2e00      	cmp	r6, #0
 8000316:	d0e2      	beq.n	80002de <__udivmoddi4+0xa2>
 8000318:	e9c6 4700 	strd	r4, r7, [r6]
 800031c:	e7df      	b.n	80002de <__udivmoddi4+0xa2>
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xe6>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f382 	clz	r3, r2
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x210>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2101      	movs	r1, #1
 8000338:	fbb2 f5f7 	udiv	r5, r2, r7
 800033c:	fb07 2015 	mls	r0, r7, r5, r2
 8000340:	0c22      	lsrs	r2, r4, #16
 8000342:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000346:	fb0e f005 	mul.w	r0, lr, r5
 800034a:	4290      	cmp	r0, r2
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x124>
 800034e:	eb1c 0202 	adds.w	r2, ip, r2
 8000352:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4290      	cmp	r0, r2
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2b8>
 800035e:	4645      	mov	r5, r8
 8000360:	1a12      	subs	r2, r2, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb2 f0f7 	udiv	r0, r2, r7
 8000368:	fb07 2210 	mls	r2, r7, r0, r2
 800036c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x14e>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x14c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2c2>
 8000388:	4610      	mov	r0, r2
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000392:	e79f      	b.n	80002d4 <__udivmoddi4+0x98>
 8000394:	f1c1 0720 	rsb	r7, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa05 f401 	lsl.w	r4, r5, r1
 80003a6:	fa20 f307 	lsr.w	r3, r0, r7
 80003aa:	40fd      	lsrs	r5, r7
 80003ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	fb09 5518 	mls	r5, r9, r8, r5
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c4:	fb08 f50e 	mul.w	r5, r8, lr
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	fa00 f001 	lsl.w	r0, r0, r1
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2b4>
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2b4>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4464      	add	r4, ip
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	b29d      	uxth	r5, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2ac>
 800040e:	45a6      	cmp	lr, r4
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2ac>
 8000412:	3b02      	subs	r3, #2
 8000414:	4464      	add	r4, ip
 8000416:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041a:	fba3 9502 	umull	r9, r5, r3, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	42ac      	cmp	r4, r5
 8000424:	46c8      	mov	r8, r9
 8000426:	46ae      	mov	lr, r5
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x29c>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x298>
 800042c:	b156      	cbz	r6, 8000444 <__udivmoddi4+0x208>
 800042e:	ebb0 0208 	subs.w	r2, r0, r8
 8000432:	eb64 040e 	sbc.w	r4, r4, lr
 8000436:	fa04 f707 	lsl.w	r7, r4, r7
 800043a:	40ca      	lsrs	r2, r1
 800043c:	40cc      	lsrs	r4, r1
 800043e:	4317      	orrs	r7, r2
 8000440:	e9c6 7400 	strd	r7, r4, [r6]
 8000444:	4618      	mov	r0, r3
 8000446:	2100      	movs	r1, #0
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	f1c3 0120 	rsb	r1, r3, #32
 8000450:	fa02 fc03 	lsl.w	ip, r2, r3
 8000454:	fa20 f201 	lsr.w	r2, r0, r1
 8000458:	fa25 f101 	lsr.w	r1, r5, r1
 800045c:	409d      	lsls	r5, r3
 800045e:	432a      	orrs	r2, r5
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb1 f0f7 	udiv	r0, r1, r7
 800046c:	fb07 1510 	mls	r5, r7, r0, r1
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000476:	fb00 f50e 	mul.w	r5, r0, lr
 800047a:	428d      	cmp	r5, r1
 800047c:	fa04 f403 	lsl.w	r4, r4, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x258>
 8000482:	eb1c 0101 	adds.w	r1, ip, r1
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b0>
 800048c:	428d      	cmp	r5, r1
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b0>
 8000490:	3802      	subs	r0, #2
 8000492:	4461      	add	r1, ip
 8000494:	1b49      	subs	r1, r1, r5
 8000496:	b292      	uxth	r2, r2
 8000498:	fbb1 f5f7 	udiv	r5, r1, r7
 800049c:	fb07 1115 	mls	r1, r7, r5, r1
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	fb05 f10e 	mul.w	r1, r5, lr
 80004a8:	4291      	cmp	r1, r2
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x282>
 80004ac:	eb1c 0202 	adds.w	r2, ip, r2
 80004b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2a8>
 80004b6:	4291      	cmp	r1, r2
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2a8>
 80004ba:	3d02      	subs	r5, #2
 80004bc:	4462      	add	r2, ip
 80004be:	1a52      	subs	r2, r2, r1
 80004c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0xfc>
 80004c6:	4631      	mov	r1, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xa2>
 80004cc:	4639      	mov	r1, r7
 80004ce:	e6e6      	b.n	800029e <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x90>
 80004d4:	4548      	cmp	r0, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e0:	3b01      	subs	r3, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e4:	4645      	mov	r5, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x282>
 80004e8:	462b      	mov	r3, r5
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x258>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f4:	3d02      	subs	r5, #2
 80004f6:	4462      	add	r2, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x124>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e70a      	b.n	8000314 <__udivmoddi4+0xd8>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x14e>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc76 	bl	8000dfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f81d 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f937 	bl	8000788 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800051a:	f000 f86d 	bl	80005f8 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800051e:	f000 f8b9 	bl	8000694 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000522:	f000 f903 	bl	800072c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  //Testing send_telecommand function

  //Data being transmitted
  uint8_t data[5] = {10, 11, 12, 13, 14};
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <main+0x44>)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052e:	6018      	str	r0, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	7019      	strb	r1, [r3, #0]

  //Length of Data
  uint32_t data_length = sizeof(data);
 8000534:	2305      	movs	r3, #5
 8000536:	60fb      	str	r3, [r7, #12]

  //TC ID (Indicated by 7th bit being 0, TC value < 128)
  uint8_t id = TC_LOAD_FILE_DOWNLOAD_BLOCK;
 8000538:	2370      	movs	r3, #112	; 0x70
 800053a:	72fb      	strb	r3, [r7, #11]

  //Calling the send_telecommand function
  send_telecommand(id, data, data_length);
 800053c:	1d39      	adds	r1, r7, #4
 800053e:	7afb      	ldrb	r3, [r7, #11]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f9c4 	bl	80008d0 <send_telecommand>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x40>
 800054a:	bf00      	nop
 800054c:	080045d0 	.word	0x080045d0

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	; 0x58
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2244      	movs	r2, #68	; 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fffe 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000572:	2000      	movs	r0, #0
 8000574:	f001 f8d4 	bl	8001720 <HAL_PWREx_ControlVoltageScaling>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800057e:	f000 fa7d 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000582:	2322      	movs	r3, #34	; 0x22
 8000584:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800059c:	2302      	movs	r3, #2
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005a0:	231e      	movs	r3, #30
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f977 	bl	80018a8 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005c0:	f000 fa5c 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2303      	movs	r3, #3
 80005ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	2105      	movs	r1, #5
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fd7c 	bl	80020dc <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ea:	f000 fa47 	bl	8000a7c <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3758      	adds	r7, #88	; 0x58
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <MX_LPUART1_UART_Init+0x94>)
 8000600:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <MX_LPUART1_UART_Init+0x98>)
 8000606:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 800060a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800060e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000642:	f002 fd21 	bl	8003088 <HAL_UART_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800064c:	f000 fa16 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000654:	f003 fc0e 	bl	8003e74 <HAL_UARTEx_SetTxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800065e:	f000 fa0d 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000666:	f003 fc43 	bl	8003ef0 <HAL_UARTEx_SetRxFifoThreshold>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000670:	f000 fa04 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_LPUART1_UART_Init+0x90>)
 8000676:	f003 fbc4 	bl	8003e02 <HAL_UARTEx_DisableFifoMode>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000680:	f000 f9fc 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	40008000 	.word	0x40008000
 8000690:	00033324 	.word	0x00033324

08000694 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MX_USART3_UART_Init+0x90>)
 800069a:	4a23      	ldr	r2, [pc, #140]	; (8000728 <MX_USART3_UART_Init+0x94>)
 800069c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006de:	f002 fcd3 	bl	8003088 <HAL_UART_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80006e8:	f000 f9c8 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <MX_USART3_UART_Init+0x90>)
 80006f0:	f003 fbc0 	bl	8003e74 <HAL_UARTEx_SetTxFifoThreshold>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80006fa:	f000 f9bf 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <MX_USART3_UART_Init+0x90>)
 8000702:	f003 fbf5 	bl	8003ef0 <HAL_UARTEx_SetRxFifoThreshold>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800070c:	f000 f9b6 	bl	8000a7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_USART3_UART_Init+0x90>)
 8000712:	f003 fb76 	bl	8003e02 <HAL_UARTEx_DisableFifoMode>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800071c:	f000 f9ae 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000bc 	.word	0x200000bc
 8000728:	40004800 	.word	0x40004800

0800072c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000736:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073a:	2206      	movs	r2, #6
 800073c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000740:	2202      	movs	r2, #2
 8000742:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000746:	2202      	movs	r2, #2
 8000748:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074c:	2201      	movs	r2, #1
 800074e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2201      	movs	r2, #1
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2201      	movs	r2, #1
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	f000 fe6e 	bl	8001450 <HAL_PCD_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f97f 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000150 	.word	0x20000150

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b48      	ldr	r3, [pc, #288]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a47      	ldr	r2, [pc, #284]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b42      	ldr	r3, [pc, #264]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a41      	ldr	r2, [pc, #260]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a3b      	ldr	r2, [pc, #236]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a35      	ldr	r2, [pc, #212]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <MX_GPIO_Init+0x138>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fe:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <MX_GPIO_Init+0x138>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <MX_GPIO_Init+0x138>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_GPIO_Init+0x138>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000816:	f001 f837 	bl	8001888 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_GPIO_Init+0x138>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a28      	ldr	r2, [pc, #160]	; (80008c0 <MX_GPIO_Init+0x138>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_GPIO_Init+0x138>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000838:	4822      	ldr	r0, [pc, #136]	; (80008c4 <MX_GPIO_Init+0x13c>)
 800083a:	f000 fdf1 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	4821      	ldr	r0, [pc, #132]	; (80008c8 <MX_GPIO_Init+0x140>)
 8000844:	f000 fdec 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	481b      	ldr	r0, [pc, #108]	; (80008cc <MX_GPIO_Init+0x144>)
 8000860:	f000 fc4c 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000864:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_GPIO_Init+0x13c>)
 800087e:	f000 fc3d 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000882:	2320      	movs	r3, #32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_GPIO_Init+0x140>)
 8000896:	f000 fc31 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_GPIO_Init+0x140>)
 80008b2:	f000 fc23 	bl	80010fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	3730      	adds	r7, #48	; 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400
 80008c8:	48001800 	.word	0x48001800
 80008cc:	48000800 	.word	0x48000800

080008d0 <send_telecommand>:

/* USER CODE BEGIN 4 */

uint8_t send_telecommand(uint8_t id, uint8_t* data, uint32_t data_length) {
 80008d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d4:	b08f      	sub	sp, #60	; 0x3c
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	6139      	str	r1, [r7, #16]
 80008dc:	60fa      	str	r2, [r7, #12]
 80008de:	75fb      	strb	r3, [r7, #23]
 80008e0:	466b      	mov	r3, sp
 80008e2:	60bb      	str	r3, [r7, #8]
	// ADCS_ESC_CHARACTER, ADCS_START_MESSAGE [uint8_t TLM/TC ID], ADCS_ESC_CHARACTER, ADCS_END_MESSAGE
	// The defines in adcs_types.h already include the 7th bit of the ID to distinguish TLM and TC
	// data bytes can be up to a maximum of 8 bytes; data_length ranges from 0 to 8

	//Check id to identify if it's Telecommand or Telemetry Request
	uint8_t telemetry_request = id & 0b10000000; // 1 = TLM, 0 = TC
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	//Allocate only required memory by checking first bit of ID
	uint8_t buf[5 + (!telemetry_request)*data_length];
 80008ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf0c      	ite	eq
 80008f6:	2301      	moveq	r3, #1
 80008f8:	2300      	movne	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	1d59      	adds	r1, r3, #5
 8000906:	460b      	mov	r3, r1
 8000908:	3b01      	subs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
 800090c:	2300      	movs	r3, #0
 800090e:	6039      	str	r1, [r7, #0]
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	00c3      	lsls	r3, r0, #3
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	00c2      	lsls	r2, r0, #3
 8000928:	2300      	movs	r3, #0
 800092a:	468a      	mov	sl, r1
 800092c:	469b      	mov	fp, r3
 800092e:	f04f 0200 	mov.w	r2, #0
 8000932:	f04f 0300 	mov.w	r3, #0
 8000936:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800093a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800093e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000942:	1dcb      	adds	r3, r1, #7
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	ebad 0d03 	sub.w	sp, sp, r3
 800094c:	466b      	mov	r3, sp
 800094e:	3300      	adds	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24

	//Fill buffer with ESC, SOM and ID
	buf[0] = ADCS_ESC_CHARACTER;
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	221f      	movs	r2, #31
 8000956:	701a      	strb	r2, [r3, #0]
	buf[1] = ADCS_START_MESSAGE;
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	227f      	movs	r2, #127	; 0x7f
 800095c:	705a      	strb	r2, [r3, #1]
	buf[2] = id;
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	7dfa      	ldrb	r2, [r7, #23]
 8000962:	709a      	strb	r2, [r3, #2]

	if (telemetry_request) {
 8000964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000968:	2b00      	cmp	r3, #0
 800096a:	d006      	beq.n	800097a <send_telecommand+0xaa>
		//If transmitting Telemetry Request
		//Fill buffer with ESC and EOM without data_length
		buf[3] = ADCS_ESC_CHARACTER;
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	221f      	movs	r2, #31
 8000970:	70da      	strb	r2, [r3, #3]
		buf[4] = ADCS_END_MESSAGE;
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	711a      	strb	r2, [r3, #4]
 8000978:	e01b      	b.n	80009b2 <send_telecommand+0xe2>
	} else {
		//Fill buffer with Data if transmitting a Telecommand
		for (int i = 0; i < data_length; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
 800097e:	e00a      	b.n	8000996 <send_telecommand+0xc6>
			buf[i + 3] = data[i];
 8000980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	441a      	add	r2, r3
 8000986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000988:	3303      	adds	r3, #3
 800098a:	7811      	ldrb	r1, [r2, #0]
 800098c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098e:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < data_length; i++) {
 8000990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000992:	3301      	adds	r3, #1
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
 8000996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	429a      	cmp	r2, r3
 800099c:	d8f0      	bhi.n	8000980 <send_telecommand+0xb0>
		}
		//Fill buffer with ESC and EOM
		buf[3 + data_length] = ADCS_ESC_CHARACTER;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	3303      	adds	r3, #3
 80009a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a4:	211f      	movs	r1, #31
 80009a6:	54d1      	strb	r1, [r2, r3]
		buf[4 + data_length] = ADCS_END_MESSAGE;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3304      	adds	r3, #4
 80009ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	54d1      	strb	r1, [r2, r3]
	}

	//Transmit the TLM or TC via UART
	HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80009b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009b4:	f7ff fc22 	bl	80001fc <strlen>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009c2:	482d      	ldr	r0, [pc, #180]	; (8000a78 <send_telecommand+0x1a8>)
 80009c4:	f002 fbb0 	bl	8003128 <HAL_UART_Transmit>

	//receiving from telecommand: data is one byte exactly
	//receiving from telemetry request: data is up to 8 bytes

	//Allocate only required memory
	uint8_t buf_rec[6 + (telemetry_request)*(data_length-1)];
 80009c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	3a01      	subs	r2, #1
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	1d9e      	adds	r6, r3, #6
 80009d6:	4633      	mov	r3, r6
 80009d8:	3b01      	subs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
 80009dc:	2300      	movs	r3, #0
 80009de:	46b0      	mov	r8, r6
 80009e0:	4699      	mov	r9, r3
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	f04f 0300 	mov.w	r3, #0
 80009ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009f6:	2300      	movs	r3, #0
 80009f8:	4634      	mov	r4, r6
 80009fa:	461d      	mov	r5, r3
 80009fc:	f04f 0200 	mov.w	r2, #0
 8000a00:	f04f 0300 	mov.w	r3, #0
 8000a04:	00eb      	lsls	r3, r5, #3
 8000a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a0a:	00e2      	lsls	r2, r4, #3
 8000a0c:	1df3      	adds	r3, r6, #7
 8000a0e:	08db      	lsrs	r3, r3, #3
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	ebad 0d03 	sub.w	sp, sp, r3
 8000a16:	466b      	mov	r3, sp
 8000a18:	3300      	adds	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]

	//Start receiving acknowledgment or reply from the CubeComputer
	HAL_UART_Receive(&huart3, buf_rec, strlen((char*)buf_rec), HAL_MAX_DELAY);
 8000a1c:	69f8      	ldr	r0, [r7, #28]
 8000a1e:	f7ff fbed 	bl	80001fc <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2a:	69f9      	ldr	r1, [r7, #28]
 8000a2c:	4812      	ldr	r0, [pc, #72]	; (8000a78 <send_telecommand+0x1a8>)
 8000a2e:	f002 fc0a 	bl	8003246 <HAL_UART_Receive>

	if (telemetry_request) {
 8000a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d014      	beq.n	8000a64 <send_telecommand+0x194>
		//Ignoring ESC, EOM, SOM and storing the rest of the values in data
		for (int i = 3; i < sizeof(buf_rec)-2; i++) {
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8000a3e:	e00b      	b.n	8000a58 <send_telecommand+0x188>
			// put the data into the data array excluding TC ID or TLM ID
			data[i-3] = buf_rec[i];
 8000a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a42:	3b03      	subs	r3, #3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4413      	add	r3, r2
 8000a48:	69f9      	ldr	r1, [r7, #28]
 8000a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a4c:	440a      	add	r2, r1
 8000a4e:	7812      	ldrb	r2, [r2, #0]
 8000a50:	701a      	strb	r2, [r3, #0]
		for (int i = 3; i < sizeof(buf_rec)-2; i++) {
 8000a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a54:	3301      	adds	r3, #1
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
 8000a58:	1eb2      	subs	r2, r6, #2
 8000a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8ef      	bhi.n	8000a40 <send_telecommand+0x170>
		}

		return TC_ERROR_NONE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	e001      	b.n	8000a68 <send_telecommand+0x198>
	}

	return buf_rec[3]; // buf_rec[3] contains the TC Error Flag
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	78db      	ldrb	r3, [r3, #3]
 8000a68:	f8d7 d008 	ldr.w	sp, [r7, #8]

  // The reply will contain two data bytes, the last one being the TC Error flag.
  // The receipt of the acknowledge will indicate that another telecommand may be sent.
  // Sending another telecommand before the acknowledge will corrupt the telecommand buffer.
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	373c      	adds	r7, #60	; 0x3c
 8000a70:	46bd      	mov	sp, r7
 8000a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a76:	bf00      	nop
 8000a78:	200000bc 	.word	0x200000bc

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0b0      	sub	sp, #192	; 0xc0
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	2294      	movs	r2, #148	; 0x94
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fd35 	bl	8004560 <memset>
  if(huart->Instance==LPUART1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a43      	ldr	r2, [pc, #268]	; (8000c08 <HAL_UART_MspInit+0x138>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d13e      	bne.n	8000b7e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b00:	2320      	movs	r3, #32
 8000b02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fda3 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b18:	f7ff ffb0 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b1c:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b20:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b28:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b34:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	4a34      	ldr	r2, [pc, #208]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000b4c:	f000 fe9c 	bl	8001888 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b50:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b74:	4619      	mov	r1, r3
 8000b76:	4826      	ldr	r0, [pc, #152]	; (8000c10 <HAL_UART_MspInit+0x140>)
 8000b78:	f000 fac0 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b7c:	e040      	b.n	8000c00 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a24      	ldr	r2, [pc, #144]	; (8000c14 <HAL_UART_MspInit+0x144>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d13b      	bne.n	8000c00 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fd5f 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000ba0:	f7ff ff6c 	bl	8000a7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bae:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0x13c>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <HAL_UART_MspInit+0x148>)
 8000bfc:	f000 fa7e 	bl	80010fc <HAL_GPIO_Init>
}
 8000c00:	bf00      	nop
 8000c02:	37c0      	adds	r7, #192	; 0xc0
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40008000 	.word	0x40008000
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48001800 	.word	0x48001800
 8000c14:	40004800 	.word	0x40004800
 8000c18:	48000c00 	.word	0x48000c00

08000c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0b0      	sub	sp, #192	; 0xc0
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	2294      	movs	r2, #148	; 0x94
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fc8f 	bl	8004560 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c4a:	d16c      	bne.n	8000d26 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fcfb 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c68:	f7ff ff08 	bl	8000a7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f000 fa25 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f000 fa14 	bl	80010fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000cda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d114      	bne.n	8000d22 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d02:	6593      	str	r3, [r2, #88]	; 0x58
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000d10:	f000 fdaa 	bl	8001868 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <HAL_PCD_MspInit+0x114>)
 8000d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d20:	e001      	b.n	8000d26 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000d22:	f000 fda1 	bl	8001868 <HAL_PWREx_EnableVddUSB>
}
 8000d26:	bf00      	nop
 8000d28:	37c0      	adds	r7, #192	; 0xc0
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f892 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <LoopForever+0xe>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <LoopForever+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 fbc9 	bl	8004570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dde:	f7ff fb93 	bl	8000508 <main>

08000de2 <LoopForever>:

LoopForever:
    b LoopForever
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df0:	08004658 	.word	0x08004658
  ldr r2, =_sbss
 8000df4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df8:	20000660 	.word	0x20000660

08000dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_IRQHandler>

08000dfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f943 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f80e 	bl	8000e30 <HAL_InitTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	e001      	b.n	8000e24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e20:	f7ff fe32 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_InitTick+0x6c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d023      	beq.n	8000e8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_InitTick+0x70>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_InitTick+0x6c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f941 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10f      	bne.n	8000e86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d809      	bhi.n	8000e80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e74:	f000 f919 	bl	80010aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_InitTick+0x74>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e007      	b.n	8000e90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e004      	b.n	8000e90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	e001      	b.n	8000e90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	2000065c 	.word	0x2000065c

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000065c 	.word	0x2000065c

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffde 	bl	8000ed0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff47 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff5c 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffb0 	bl	8001050 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e166      	b.n	80013da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8158 	beq.w	80013d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d005      	beq.n	800113c <HAL_GPIO_Init+0x40>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d130      	bne.n	800119e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001172:	2201      	movs	r2, #1
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f003 0201 	and.w	r2, r3, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d017      	beq.n	80011da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d123      	bne.n	800122e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	6939      	ldr	r1, [r7, #16]
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0203 	and.w	r2, r3, #3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80b2 	beq.w	80013d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <HAL_GPIO_Init+0x2fc>)
 8001272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001274:	4a60      	ldr	r2, [pc, #384]	; (80013f8 <HAL_GPIO_Init+0x2fc>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6613      	str	r3, [r2, #96]	; 0x60
 800127c:	4b5e      	ldr	r3, [pc, #376]	; (80013f8 <HAL_GPIO_Init+0x2fc>)
 800127e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001288:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <HAL_GPIO_Init+0x300>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b2:	d02b      	beq.n	800130c <HAL_GPIO_Init+0x210>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a52      	ldr	r2, [pc, #328]	; (8001400 <HAL_GPIO_Init+0x304>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d025      	beq.n	8001308 <HAL_GPIO_Init+0x20c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a51      	ldr	r2, [pc, #324]	; (8001404 <HAL_GPIO_Init+0x308>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d01f      	beq.n	8001304 <HAL_GPIO_Init+0x208>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a50      	ldr	r2, [pc, #320]	; (8001408 <HAL_GPIO_Init+0x30c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d019      	beq.n	8001300 <HAL_GPIO_Init+0x204>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4f      	ldr	r2, [pc, #316]	; (800140c <HAL_GPIO_Init+0x310>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d013      	beq.n	80012fc <HAL_GPIO_Init+0x200>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <HAL_GPIO_Init+0x314>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00d      	beq.n	80012f8 <HAL_GPIO_Init+0x1fc>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4d      	ldr	r2, [pc, #308]	; (8001414 <HAL_GPIO_Init+0x318>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x31c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_Init+0x1f4>
 80012ec:	2307      	movs	r3, #7
 80012ee:	e00e      	b.n	800130e <HAL_GPIO_Init+0x212>
 80012f0:	2308      	movs	r3, #8
 80012f2:	e00c      	b.n	800130e <HAL_GPIO_Init+0x212>
 80012f4:	2306      	movs	r3, #6
 80012f6:	e00a      	b.n	800130e <HAL_GPIO_Init+0x212>
 80012f8:	2305      	movs	r3, #5
 80012fa:	e008      	b.n	800130e <HAL_GPIO_Init+0x212>
 80012fc:	2304      	movs	r3, #4
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x212>
 8001300:	2303      	movs	r3, #3
 8001302:	e004      	b.n	800130e <HAL_GPIO_Init+0x212>
 8001304:	2302      	movs	r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x212>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_GPIO_Init+0x212>
 800130c:	2300      	movs	r3, #0
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	f002 0203 	and.w	r2, r2, #3
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	4093      	lsls	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131e:	4937      	ldr	r1, [pc, #220]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132c:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HAL_GPIO_Init+0x320>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001350:	4a32      	ldr	r2, [pc, #200]	; (800141c <HAL_GPIO_Init+0x320>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <HAL_GPIO_Init+0x320>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <HAL_GPIO_Init+0x320>)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_GPIO_Init+0x320>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_GPIO_Init+0x320>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_GPIO_Init+0x320>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <HAL_GPIO_Init+0x320>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f47f ae91 	bne.w	800110c <HAL_GPIO_Init+0x10>
  }
}
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	48000400 	.word	0x48000400
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	48001000 	.word	0x48001000
 8001410:	48001400 	.word	0x48001400
 8001414:	48001800 	.word	0x48001800
 8001418:	48001c00 	.word	0x48001c00
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800143c:	e002      	b.n	8001444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001452:	b08f      	sub	sp, #60	; 0x3c
 8001454:	af0a      	add	r7, sp, #40	; 0x28
 8001456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e116      	b.n	8001690 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d106      	bne.n	8001482 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fbcd 	bl	8000c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fddd 	bl	8004060 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	687e      	ldr	r6, [r7, #4]
 80014ae:	466d      	mov	r5, sp
 80014b0:	f106 0410 	add.w	r4, r6, #16
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c4:	1d33      	adds	r3, r6, #4
 80014c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f002 fd9d 	bl	8004008 <USB_CoreInit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0d7      	b.n	8001690 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fdcb 	bl	8004082 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e04a      	b.n	8001588 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	333d      	adds	r3, #61	; 0x3d
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	333c      	adds	r3, #60	; 0x3c
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	b298      	uxth	r0, r3
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	3356      	adds	r3, #86	; 0x56
 800152e:	4602      	mov	r2, r0
 8001530:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3340      	adds	r3, #64	; 0x40
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3344      	adds	r3, #68	; 0x44
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3348      	adds	r3, #72	; 0x48
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	334c      	adds	r3, #76	; 0x4c
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	3301      	adds	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	d3af      	bcc.n	80014f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e044      	b.n	8001622 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	3301      	adds	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3b5      	bcc.n	8001598 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	687e      	ldr	r6, [r7, #4]
 8001634:	466d      	mov	r5, sp
 8001636:	f106 0410 	add.w	r4, r6, #16
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001646:	e885 0003 	stmia.w	r5, {r0, r1}
 800164a:	1d33      	adds	r3, r6, #4
 800164c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164e:	6838      	ldr	r0, [r7, #0]
 8001650:	f002 fd64 	bl	800411c <USB_DevInit>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2202      	movs	r2, #2
 800165e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e014      	b.n	8001690 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f80a 	bl	8001698 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f002 ff06 	bl	800449a <USB_DevDisconnect>

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001698 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ca:	f043 0303 	orr.w	r3, r3, #3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_PWREx_GetVoltageRange+0x3c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f0:	d102      	bne.n	80016f8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80016f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f6:	e00b      	b.n	8001710 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_PWREx_GetVoltageRange+0x3c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001706:	d102      	bne.n	800170e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	e000      	b.n	8001710 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800170e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40007000 	.word	0x40007000

08001720 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d141      	bne.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800172e:	4b4b      	ldr	r3, [pc, #300]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173a:	d131      	bne.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001742:	4a46      	ldr	r2, [pc, #280]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001754:	4a41      	ldr	r2, [pc, #260]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800175c:	4b40      	ldr	r3, [pc, #256]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2232      	movs	r2, #50	; 0x32
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a3f      	ldr	r2, [pc, #252]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	0c9b      	lsrs	r3, r3, #18
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001772:	e002      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3b01      	subs	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001786:	d102      	bne.n	800178e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f2      	bne.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179a:	d158      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e057      	b.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017a6:	4a2d      	ldr	r2, [pc, #180]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017b0:	e04d      	b.n	800184e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b8:	d141      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c6:	d131      	bne.n	800182c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ce:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2232      	movs	r2, #50	; 0x32
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	0c9b      	lsrs	r3, r3, #18
 80017fa:	3301      	adds	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fe:	e002      	b.n	8001806 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3b01      	subs	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001812:	d102      	bne.n	800181a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f2      	bne.n	8001800 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d112      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e011      	b.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800183c:	e007      	b.n	800184e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40007000 	.word	0x40007000
 8001860:	20000000 	.word	0x20000000
 8001864:	431bde83 	.word	0x431bde83

08001868 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_PWREx_EnableVddUSB+0x1c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6053      	str	r3, [r2, #4]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40007000 	.word	0x40007000

08001888 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6053      	str	r3, [r2, #4]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40007000 	.word	0x40007000

080018a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f000 bc08 	b.w	80020cc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018bc:	4b96      	ldr	r3, [pc, #600]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c6:	4b94      	ldr	r3, [pc, #592]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80e4 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4c>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	f040 808b 	bne.w	8001a02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	f040 8087 	bne.w	8001a02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f4:	4b88      	ldr	r3, [pc, #544]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x64>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e3df      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1a      	ldr	r2, [r3, #32]
 8001910:	4b81      	ldr	r3, [pc, #516]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <HAL_RCC_OscConfig+0x7e>
 800191c:	4b7e      	ldr	r3, [pc, #504]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001924:	e005      	b.n	8001932 <HAL_RCC_OscConfig+0x8a>
 8001926:	4b7c      	ldr	r3, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001932:	4293      	cmp	r3, r2
 8001934:	d223      	bcs.n	800197e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fdcc 	bl	80024d8 <RCC_SetFlashLatencyFromMSIRange>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e3c0      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a72      	ldr	r2, [pc, #456]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	496d      	ldr	r1, [pc, #436]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001968:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	4968      	ldr	r1, [pc, #416]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
 800197c:	e025      	b.n	80019ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197e:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a65      	ldr	r2, [pc, #404]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	4960      	ldr	r1, [pc, #384]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800199c:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	495b      	ldr	r1, [pc, #364]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fd8c 	bl	80024d8 <RCC_SetFlashLatencyFromMSIRange>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e380      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ca:	f000 fcc1 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	4950      	ldr	r1, [pc, #320]	; (8001b1c <HAL_RCC_OscConfig+0x274>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a4e      	ldr	r2, [pc, #312]	; (8001b20 <HAL_RCC_OscConfig+0x278>)
 80019e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019ea:	4b4e      	ldr	r3, [pc, #312]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fa1e 	bl	8000e30 <HAL_InitTick>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d052      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	e364      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d032      	beq.n	8001a70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a0a:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a42      	ldr	r2, [pc, #264]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fa5b 	bl	8000ed0 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fa57 	bl	8000ed0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e34d      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a30:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a35      	ldr	r2, [pc, #212]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4930      	ldr	r1, [pc, #192]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	492b      	ldr	r1, [pc, #172]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
 8001a6e:	e01a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a70:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a28      	ldr	r2, [pc, #160]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fa28 	bl	8000ed0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a84:	f7ff fa24 	bl	8000ed0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e31a      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1dc>
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d073      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x21c>
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d10e      	bne.n	8001adc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d063      	beq.n	8001b98 <HAL_RCC_OscConfig+0x2f0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d15f      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e2f7      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x24c>
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e025      	b.n	8001b40 <HAL_RCC_OscConfig+0x298>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d114      	bne.n	8001b28 <HAL_RCC_OscConfig+0x280>
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a02      	ldr	r2, [pc, #8]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e013      	b.n	8001b40 <HAL_RCC_OscConfig+0x298>
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	080045d8 	.word	0x080045d8
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004
 8001b28:	4ba0      	ldr	r3, [pc, #640]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a9f      	ldr	r2, [pc, #636]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a9c      	ldr	r2, [pc, #624]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f9c2 	bl	8000ed0 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff f9be 	bl	8000ed0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e2b4      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b62:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x2a8>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff f9ae 	bl	8000ed0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff f9aa 	bl	8000ed0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e2a0      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b8a:	4b88      	ldr	r3, [pc, #544]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x2d0>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d060      	beq.n	8001c68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x310>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d119      	bne.n	8001be6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d116      	bne.n	8001be6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb8:	4b7c      	ldr	r3, [pc, #496]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x328>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e27d      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	4973      	ldr	r1, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be4:	e040      	b.n	8001c68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d023      	beq.n	8001c36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bee:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6e      	ldr	r2, [pc, #440]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f969 	bl	8000ed0 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff f965 	bl	8000ed0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e25b      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c14:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b62      	ldr	r3, [pc, #392]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	495f      	ldr	r1, [pc, #380]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e018      	b.n	8001c68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a5c      	ldr	r2, [pc, #368]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f945 	bl	8000ed0 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff f941 	bl	8000ed0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e237      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c5c:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d03c      	beq.n	8001cee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7c:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7ff f920 	bl	8000ed0 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c94:	f7ff f91c 	bl	8000ed0 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e212      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ef      	beq.n	8001c94 <HAL_RCC_OscConfig+0x3ec>
 8001cb4:	e01b      	b.n	8001cee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbc:	4a3b      	ldr	r2, [pc, #236]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f903 	bl	8000ed0 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff f8ff 	bl	8000ed0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1f5      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ef      	bne.n	8001cce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80a6 	beq.w	8001e48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	4a26      	ldr	r2, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d16:	6593      	str	r3, [r2, #88]	; 0x58
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d24:	2301      	movs	r3, #1
 8001d26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_RCC_OscConfig+0x508>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d118      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCC_OscConfig+0x508>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_RCC_OscConfig+0x508>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d40:	f7ff f8c6 	bl	8000ed0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d48:	f7ff f8c2 	bl	8000ed0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1b8      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_RCC_OscConfig+0x508>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d108      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4d8>
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d7e:	e029      	b.n	8001dd4 <HAL_RCC_OscConfig+0x52c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d115      	bne.n	8001db4 <HAL_RCC_OscConfig+0x50c>
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9e:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_RCC_OscConfig+0x504>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da8:	e014      	b.n	8001dd4 <HAL_RCC_OscConfig+0x52c>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40007000 	.word	0x40007000
 8001db4:	4b9d      	ldr	r3, [pc, #628]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	4a9c      	ldr	r2, [pc, #624]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc4:	4b99      	ldr	r3, [pc, #612]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	4a98      	ldr	r2, [pc, #608]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d016      	beq.n	8001e0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff f878 	bl	8000ed0 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7ff f874 	bl	8000ed0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e168      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfa:	4b8c      	ldr	r3, [pc, #560]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ed      	beq.n	8001de4 <HAL_RCC_OscConfig+0x53c>
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7ff f861 	bl	8000ed0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff f85d 	bl	8000ed0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e151      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e28:	4b80      	ldr	r3, [pc, #512]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ed      	bne.n	8001e12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e36:	7ffb      	ldrb	r3, [r7, #31]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3c:	4b7b      	ldr	r3, [pc, #492]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	4a7a      	ldr	r2, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d03c      	beq.n	8001ece <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e5c:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e62:	4a72      	ldr	r2, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f830 	bl	8000ed0 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e74:	f7ff f82c 	bl	8000ed0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e122      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e86:	4b69      	ldr	r3, [pc, #420]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ef      	beq.n	8001e74 <HAL_RCC_OscConfig+0x5cc>
 8001e94:	e01b      	b.n	8001ece <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e96:	4b65      	ldr	r3, [pc, #404]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e9c:	4a63      	ldr	r2, [pc, #396]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f813 	bl	8000ed0 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eae:	f7ff f80f 	bl	8000ed0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e105      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ec0:	4b5a      	ldr	r3, [pc, #360]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ef      	bne.n	8001eae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 80f9 	beq.w	80020ca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	f040 80cf 	bne.w	8002080 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ee2:	4b52      	ldr	r3, [pc, #328]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0203 	and.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d12c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	3b01      	subs	r3, #1
 8001f02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d123      	bne.n	8001f50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d11b      	bne.n	8001f50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d113      	bne.n	8001f50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d109      	bne.n	8001f50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d071      	beq.n	8002034 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d068      	beq.n	8002028 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0ac      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f7e:	f7fe ffa7 	bl	8000ed0 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7fe ffa3 	bl	8000ed0 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e099      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCC_OscConfig+0x788>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fb4:	3a01      	subs	r2, #1
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fbe:	0212      	lsls	r2, r2, #8
 8001fc0:	4311      	orrs	r1, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fc6:	0852      	lsrs	r2, r2, #1
 8001fc8:	3a01      	subs	r2, #1
 8001fca:	0552      	lsls	r2, r2, #21
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fd2:	0852      	lsrs	r2, r2, #1
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	0652      	lsls	r2, r2, #25
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fde:	06d2      	lsls	r2, r2, #27
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	4912      	ldr	r1, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <HAL_RCC_OscConfig+0x784>)
 8001ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002000:	f7fe ff66 	bl	8000ed0 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe ff62 	bl	8000ed0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e058      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_RCC_OscConfig+0x784>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002026:	e050      	b.n	80020ca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04f      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
 800202c:	40021000 	.word	0x40021000
 8002030:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d144      	bne.n	80020ca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 8002046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002056:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002058:	f7fe ff3a 	bl	8000ed0 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe ff36 	bl	8000ed0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e02c      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x7b8>
 800207e:	e024      	b.n	80020ca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d01f      	beq.n	80020c6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 800208c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7fe ff1d 	bl	8000ed0 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe ff19 	bl	8000ed0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e00f      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	4905      	ldr	r1, [pc, #20]	; (80020d4 <HAL_RCC_OscConfig+0x82c>)
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_OscConfig+0x830>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
 80020c4:	e001      	b.n	80020ca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	feeefffc 	.word	0xfeeefffc

080020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e11d      	b.n	8002330 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b90      	ldr	r3, [pc, #576]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d910      	bls.n	8002124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b8d      	ldr	r3, [pc, #564]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 020f 	bic.w	r2, r3, #15
 800210a:	498b      	ldr	r1, [pc, #556]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b89      	ldr	r3, [pc, #548]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e105      	b.n	8002330 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	4b81      	ldr	r3, [pc, #516]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213c:	429a      	cmp	r2, r3
 800213e:	d908      	bls.n	8002152 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b7e      	ldr	r3, [pc, #504]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	497b      	ldr	r1, [pc, #492]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d079      	beq.n	8002252 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d11e      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b75      	ldr	r3, [pc, #468]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0dc      	b.n	8002330 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002176:	f000 fa09 	bl	800258c <RCC_GetSysClockFreqFromPLLSource>
 800217a:	4603      	mov	r3, r0
 800217c:	4a70      	ldr	r2, [pc, #448]	; (8002340 <HAL_RCC_ClockConfig+0x264>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d946      	bls.n	8002210 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002182:	4b6e      	ldr	r3, [pc, #440]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d140      	bne.n	8002210 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800218e:	4b6b      	ldr	r3, [pc, #428]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002196:	4a69      	ldr	r2, [pc, #420]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e035      	b.n	8002210 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ac:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d115      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0b9      	b.n	8002330 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c4:	4b5d      	ldr	r3, [pc, #372]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0ad      	b.n	8002330 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0a5      	b.n	8002330 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80021e4:	f000 f8b4 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a55      	ldr	r2, [pc, #340]	; (8002340 <HAL_RCC_ClockConfig+0x264>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d90f      	bls.n	8002210 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021f0:	4b52      	ldr	r3, [pc, #328]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021fc:	4b4f      	ldr	r3, [pc, #316]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002204:	4a4d      	ldr	r2, [pc, #308]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002210:	4b4a      	ldr	r3, [pc, #296]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 0203 	bic.w	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4947      	ldr	r1, [pc, #284]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002222:	f7fe fe55 	bl	8000ed0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002228:	e00a      	b.n	8002240 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222a:	f7fe fe51 	bl	8000ed0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e077      	b.n	8002330 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002240:	4b3e      	ldr	r3, [pc, #248]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 020c 	and.w	r2, r3, #12
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	429a      	cmp	r2, r3
 8002250:	d1eb      	bne.n	800222a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d105      	bne.n	8002264 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002258:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a37      	ldr	r2, [pc, #220]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 800225e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002262:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d010      	beq.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227c:	429a      	cmp	r2, r3
 800227e:	d208      	bcs.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	492b      	ldr	r1, [pc, #172]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d210      	bcs.n	80022c2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 020f 	bic.w	r2, r3, #15
 80022a8:	4923      	ldr	r1, [pc, #140]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e036      	b.n	8002330 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4918      	ldr	r1, [pc, #96]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4910      	ldr	r1, [pc, #64]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002300:	f000 f826 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	490c      	ldr	r1, [pc, #48]	; (8002344 <HAL_RCC_ClockConfig+0x268>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x26c>)
 800231e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fd83 	bl	8000e30 <HAL_InitTick>
 800232a:	4603      	mov	r3, r0
 800232c:	73fb      	strb	r3, [r7, #15]

  return status;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40022000 	.word	0x40022000
 800233c:	40021000 	.word	0x40021000
 8002340:	04c4b400 	.word	0x04c4b400
 8002344:	080045d8 	.word	0x080045d8
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x34>
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d121      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d11e      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002384:	4b34      	ldr	r3, [pc, #208]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e005      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023ac:	4a2b      	ldr	r2, [pc, #172]	; (800245c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e004      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_RCC_GetSysClockFreq+0x114>)
 80023d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d134      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d003      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0xac>
 80023f4:	e005      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_RCC_GetSysClockFreq+0x110>)
 80023f8:	617b      	str	r3, [r7, #20]
      break;
 80023fa:	e005      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_GetSysClockFreq+0x114>)
 80023fe:	617b      	str	r3, [r7, #20]
      break;
 8002400:	e002      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	617b      	str	r3, [r7, #20]
      break;
 8002406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3301      	adds	r3, #1
 8002414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	fb03 f202 	mul.w	r2, r3, r2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	0e5b      	lsrs	r3, r3, #25
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	3301      	adds	r3, #1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002448:	69bb      	ldr	r3, [r7, #24]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	080045f0 	.word	0x080045f0
 8002460:	00f42400 	.word	0x00f42400
 8002464:	007a1200 	.word	0x007a1200

08002468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002484:	f7ff fff0 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4904      	ldr	r1, [pc, #16]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	080045e8 	.word	0x080045e8

080024ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024b0:	f7ff ffda 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0adb      	lsrs	r3, r3, #11
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4904      	ldr	r1, [pc, #16]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	080045e8 	.word	0x080045e8

080024d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024f0:	f7ff f8f6 	bl	80016e0 <HAL_PWREx_GetVoltageRange>
 80024f4:	6178      	str	r0, [r7, #20]
 80024f6:	e014      	b.n	8002522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002502:	6593      	str	r3, [r2, #88]	; 0x58
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002510:	f7ff f8e6 	bl	80016e0 <HAL_PWREx_GetVoltageRange>
 8002514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800251c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002528:	d10b      	bne.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d913      	bls.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2ba0      	cmp	r3, #160	; 0xa0
 8002534:	d902      	bls.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002536:	2302      	movs	r3, #2
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e00d      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e00a      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b7f      	cmp	r3, #127	; 0x7f
 8002546:	d902      	bls.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002548:	2302      	movs	r3, #2
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	e004      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b70      	cmp	r3, #112	; 0x70
 8002552:	d101      	bne.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002554:	2301      	movs	r3, #1
 8002556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 020f 	bic.w	r2, r3, #15
 8002560:	4909      	ldr	r1, [pc, #36]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	40022000 	.word	0x40022000

0800258c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d00b      	beq.n	80025ba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d825      	bhi.n	80025f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d008      	beq.n	80025c0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d11f      	bne.n	80025f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025b6:	613b      	str	r3, [r7, #16]
    break;
 80025b8:	e01f      	b.n	80025fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80025ba:	4b25      	ldr	r3, [pc, #148]	; (8002650 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80025bc:	613b      	str	r3, [r7, #16]
    break;
 80025be:	e01c      	b.n	80025fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e005      	b.n	80025e8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80025e8:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f0:	613b      	str	r3, [r7, #16]
    break;
 80025f2:	e002      	b.n	80025fa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
    break;
 80025f8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	3301      	adds	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	fb03 f202 	mul.w	r2, r3, r2
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0e5b      	lsrs	r3, r3, #25
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800263a:	683b      	ldr	r3, [r7, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000
 800264c:	00f42400 	.word	0x00f42400
 8002650:	007a1200 	.word	0x007a1200
 8002654:	080045f0 	.word	0x080045f0

08002658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002660:	2300      	movs	r3, #0
 8002662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002664:	2300      	movs	r3, #0
 8002666:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002670:	2b00      	cmp	r3, #0
 8002672:	d040      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d02a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d825      	bhi.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002680:	2b60      	cmp	r3, #96	; 0x60
 8002682:	d026      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002684:	2b60      	cmp	r3, #96	; 0x60
 8002686:	d821      	bhi.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d006      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d81d      	bhi.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002694:	2b20      	cmp	r3, #32
 8002696:	d010      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002698:	e018      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800269a:	4b89      	ldr	r3, [pc, #548]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	4a88      	ldr	r2, [pc, #544]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026a6:	e015      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fb02 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b8:	e00c      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3320      	adds	r3, #32
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fbed 	bl	8002ea0 <RCCEx_PLLSAI2_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ca:	e003      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	74fb      	strb	r3, [r7, #19]
      break;
 80026d0:	e000      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80026d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026da:	4b79      	ldr	r3, [pc, #484]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026e0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e8:	4975      	ldr	r1, [pc, #468]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80026f0:	e001      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d047      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270a:	d030      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002710:	d82a      	bhi.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002716:	d02a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800271c:	d824      	bhi.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800271e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002722:	d008      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002728:	d81e      	bhi.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800272e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002732:	d010      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002734:	e018      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002736:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4a61      	ldr	r2, [pc, #388]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002742:	e015      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fab4 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002754:	e00c      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3320      	adds	r3, #32
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fb9f 	bl	8002ea0 <RCCEx_PLLSAI2_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002766:	e003      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	74fb      	strb	r3, [r7, #19]
      break;
 800276c:	e000      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800276e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002776:	4b52      	ldr	r3, [pc, #328]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	494e      	ldr	r1, [pc, #312]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800278c:	e001      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 809f 	beq.w	80028de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	4a40      	ldr	r2, [pc, #256]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6593      	str	r3, [r2, #88]	; 0x58
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d6:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fb75 	bl	8000ed0 <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e8:	e009      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7fe fb71 	bl	8000ed0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d902      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	74fb      	strb	r3, [r7, #19]
        break;
 80027fc:	e005      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fe:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ef      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d15b      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01f      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	429a      	cmp	r2, r3
 800282c:	d019      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002838:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800285a:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d016      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fb30 	bl	8000ed0 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002872:	e00b      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002874:	f7fe fb2c 	bl	8000ed0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d902      	bls.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	74fb      	strb	r3, [r7, #19]
            break;
 800288a:	e006      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0ec      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10c      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	4903      	ldr	r1, [pc, #12]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028b8:	e008      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	74bb      	strb	r3, [r7, #18]
 80028be:	e005      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028cc:	7c7b      	ldrb	r3, [r7, #17]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d105      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d2:	4ba0      	ldr	r3, [pc, #640]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	4a9f      	ldr	r2, [pc, #636]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ea:	4b9a      	ldr	r3, [pc, #616]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f023 0203 	bic.w	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	4996      	ldr	r1, [pc, #600]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800290c:	4b91      	ldr	r3, [pc, #580]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 020c 	bic.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	498e      	ldr	r1, [pc, #568]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292e:	4b89      	ldr	r3, [pc, #548]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	4985      	ldr	r1, [pc, #532]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002950:	4b80      	ldr	r3, [pc, #512]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	497d      	ldr	r1, [pc, #500]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002972:	4b78      	ldr	r3, [pc, #480]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	4974      	ldr	r1, [pc, #464]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002994:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	496c      	ldr	r1, [pc, #432]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029b6:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c4:	4963      	ldr	r1, [pc, #396]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029d8:	4b5e      	ldr	r3, [pc, #376]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e6:	495b      	ldr	r1, [pc, #364]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029fa:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	4952      	ldr	r1, [pc, #328]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a1c:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	494a      	ldr	r1, [pc, #296]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a3e:	4b45      	ldr	r3, [pc, #276]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	4941      	ldr	r1, [pc, #260]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a60:	4b3c      	ldr	r3, [pc, #240]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6e:	4939      	ldr	r1, [pc, #228]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a82:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	4930      	ldr	r1, [pc, #192]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa0:	d106      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4a2b      	ldr	r2, [pc, #172]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aac:	60d3      	str	r3, [r2, #12]
 8002aae:	e011      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f8f9 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d04d      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae8:	d108      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002afa:	e012      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1a:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b36:	60d3      	str	r3, [r2, #12]
 8002b38:	e020      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b42:	d109      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a02      	ldr	r2, [pc, #8]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	60d3      	str	r3, [r2, #12]
 8002b50:	e014      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2101      	movs	r1, #1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f8a5 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d028      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b96:	4947      	ldr	r1, [pc, #284]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb2:	60d3      	str	r3, [r2, #12]
 8002bb4:	e011      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f876 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01e      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf6:	492f      	ldr	r1, [pc, #188]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f851 	bl	8002cb8 <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c36:	f023 0204 	bic.w	r2, r3, #4
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c40:	491c      	ldr	r1, [pc, #112]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c54:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c5a:	f023 0218 	bic.w	r2, r3, #24
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	4913      	ldr	r1, [pc, #76]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d017      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c88:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ca8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cc6:	4b72      	ldr	r3, [pc, #456]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cd2:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0203 	and.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d103      	bne.n	8002cea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d142      	bne.n	8002d70 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e03f      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d018      	beq.n	8002d2a <RCCEx_PLLSAI1_Config+0x72>
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d825      	bhi.n	8002d48 <RCCEx_PLLSAI1_Config+0x90>
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d002      	beq.n	8002d06 <RCCEx_PLLSAI1_Config+0x4e>
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d009      	beq.n	8002d18 <RCCEx_PLLSAI1_Config+0x60>
 8002d04:	e020      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d06:	4b62      	ldr	r3, [pc, #392]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d11d      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d16:	e01a      	b.n	8002d4e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d18:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d116      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d28:	e013      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d2a:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d36:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d46:	e006      	b.n	8002d56 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	e004      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e002      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002d5e:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4949      	ldr	r1, [pc, #292]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8086 	bne.w	8002e84 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d78:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a44      	ldr	r2, [pc, #272]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fe f8a4 	bl	8000ed0 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8a:	e009      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d8c:	f7fe f8a0 	bl	8000ed0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d9e:	e005      	b.n	8002dac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da0:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ef      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d168      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d113      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6892      	ldr	r2, [r2, #8]
 8002dc4:	0211      	lsls	r1, r2, #8
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	06d2      	lsls	r2, r2, #27
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6852      	ldr	r2, [r2, #4]
 8002dd2:	3a01      	subs	r2, #1
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	492d      	ldr	r1, [pc, #180]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	610b      	str	r3, [r1, #16]
 8002dde:	e02d      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d115      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	0211      	lsls	r1, r2, #8
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6912      	ldr	r2, [r2, #16]
 8002df8:	0852      	lsrs	r2, r2, #1
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	0552      	lsls	r2, r2, #21
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6852      	ldr	r2, [r2, #4]
 8002e04:	3a01      	subs	r2, #1
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	4921      	ldr	r1, [pc, #132]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	610b      	str	r3, [r1, #16]
 8002e10:	e014      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e12:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	0211      	lsls	r1, r2, #8
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6952      	ldr	r2, [r2, #20]
 8002e24:	0852      	lsrs	r2, r2, #1
 8002e26:	3a01      	subs	r2, #1
 8002e28:	0652      	lsls	r2, r2, #25
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6852      	ldr	r2, [r2, #4]
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4916      	ldr	r1, [pc, #88]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe f842 	bl	8000ed0 <HAL_GetTick>
 8002e4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e4e:	e009      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e50:	f7fe f83e 	bl	8000ed0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d902      	bls.n	8002e64 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	73fb      	strb	r3, [r7, #15]
          break;
 8002e62:	e005      	b.n	8002e70 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ef      	beq.n	8002e50 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4904      	ldr	r1, [pc, #16]	; (8002e90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	07ff800f 	.word	0x07ff800f
 8002e98:	ff9f800f 	.word	0xff9f800f
 8002e9c:	f9ff800f 	.word	0xf9ff800f

08002ea0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eae:	4b72      	ldr	r3, [pc, #456]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00e      	beq.n	8002ed8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002eba:	4b6f      	ldr	r3, [pc, #444]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0203 	and.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d103      	bne.n	8002ed2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d142      	bne.n	8002f58 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e03f      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d018      	beq.n	8002f12 <RCCEx_PLLSAI2_Config+0x72>
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d825      	bhi.n	8002f30 <RCCEx_PLLSAI2_Config+0x90>
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <RCCEx_PLLSAI2_Config+0x4e>
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d009      	beq.n	8002f00 <RCCEx_PLLSAI2_Config+0x60>
 8002eec:	e020      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eee:	4b62      	ldr	r3, [pc, #392]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11d      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efe:	e01a      	b.n	8002f36 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f00:	4b5d      	ldr	r3, [pc, #372]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d116      	bne.n	8002f3a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f10:	e013      	b.n	8002f3a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f12:	4b59      	ldr	r3, [pc, #356]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f1e:	4b56      	ldr	r3, [pc, #344]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f2e:	e006      	b.n	8002f3e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e004      	b.n	8002f40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f36:	bf00      	nop
 8002f38:	e002      	b.n	8002f40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d108      	bne.n	8002f58 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002f46:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4949      	ldr	r1, [pc, #292]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8086 	bne.w	800306c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f60:	4b45      	ldr	r3, [pc, #276]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a44      	ldr	r2, [pc, #272]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fd ffb0 	bl	8000ed0 <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f72:	e009      	b.n	8002f88 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f74:	f7fd ffac 	bl	8000ed0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d902      	bls.n	8002f88 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	73fb      	strb	r3, [r7, #15]
        break;
 8002f86:	e005      	b.n	8002f94 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f88:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ef      	bne.n	8002f74 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d168      	bne.n	800306c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d113      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <RCCEx_PLLSAI2_Config+0x1dc>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6892      	ldr	r2, [r2, #8]
 8002fac:	0211      	lsls	r1, r2, #8
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68d2      	ldr	r2, [r2, #12]
 8002fb2:	06d2      	lsls	r2, r2, #27
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6852      	ldr	r2, [r2, #4]
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	492d      	ldr	r1, [pc, #180]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	614b      	str	r3, [r1, #20]
 8002fc6:	e02d      	b.n	8003024 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d115      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6892      	ldr	r2, [r2, #8]
 8002fda:	0211      	lsls	r1, r2, #8
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6912      	ldr	r2, [r2, #16]
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0552      	lsls	r2, r2, #21
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6852      	ldr	r2, [r2, #4]
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	4921      	ldr	r1, [pc, #132]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
 8002ff8:	e014      	b.n	8003024 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ffa:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6892      	ldr	r2, [r2, #8]
 8003006:	0211      	lsls	r1, r2, #8
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6952      	ldr	r2, [r2, #20]
 800300c:	0852      	lsrs	r2, r2, #1
 800300e:	3a01      	subs	r2, #1
 8003010:	0652      	lsls	r2, r2, #25
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6852      	ldr	r2, [r2, #4]
 8003018:	3a01      	subs	r2, #1
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	430a      	orrs	r2, r1
 800301e:	4916      	ldr	r1, [pc, #88]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003020:	4313      	orrs	r3, r2
 8003022:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 800302a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fd ff4e 	bl	8000ed0 <HAL_GetTick>
 8003034:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003036:	e009      	b.n	800304c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003038:	f7fd ff4a 	bl	8000ed0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d902      	bls.n	800304c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	73fb      	strb	r3, [r7, #15]
          break;
 800304a:	e005      	b.n	8003058 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ef      	beq.n	8003038 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	4904      	ldr	r1, [pc, #16]	; (8003078 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	07ff800f 	.word	0x07ff800f
 8003080:	ff9f800f 	.word	0xff9f800f
 8003084:	f9ff800f 	.word	0xf9ff800f

08003088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e042      	b.n	8003120 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd fd0f 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2224      	movs	r2, #36	; 0x24
 80030b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fc7c 	bl	80039d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f97d 	bl	80033d8 <UART_SetConfig>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e01b      	b.n	8003120 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fcfb 	bl	8003b14 <UART_CheckIdleState>
 800311e:	4603      	mov	r3, r0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	2b20      	cmp	r3, #32
 8003140:	d17c      	bne.n	800323c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_UART_Transmit+0x26>
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e075      	b.n	800323e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2221      	movs	r2, #33	; 0x21
 800315e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003162:	f7fd feb5 	bl	8000ed0 <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003180:	d108      	bne.n	8003194 <HAL_UART_Transmit+0x6c>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e003      	b.n	800319c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800319c:	e031      	b.n	8003202 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2200      	movs	r2, #0
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fd5d 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e03e      	b.n	800323e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d2:	b292      	uxth	r2, r2
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3302      	adds	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e008      	b.n	80031f0 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b292      	uxth	r2, r2
 80031e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1c7      	bne.n	800319e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fd25 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e006      	b.n	800323e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b08a      	sub	sp, #40	; 0x28
 800324a:	af02      	add	r7, sp, #8
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800325c:	2b20      	cmp	r3, #32
 800325e:	f040 80b6 	bne.w	80033ce <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_UART_Receive+0x28>
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0ae      	b.n	80033d0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2222      	movs	r2, #34	; 0x22
 800327e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003288:	f7fd fe22 	bl	8000ed0 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d10e      	bne.n	80032c6 <HAL_UART_Receive+0x80>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_UART_Receive+0x76>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032ba:	e02d      	b.n	8003318 <HAL_UART_Receive+0xd2>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032c4:	e028      	b.n	8003318 <HAL_UART_Receive+0xd2>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_UART_Receive+0xa4>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <HAL_UART_Receive+0x9a>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	22ff      	movs	r2, #255	; 0xff
 80032da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032de:	e01b      	b.n	8003318 <HAL_UART_Receive+0xd2>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	227f      	movs	r2, #127	; 0x7f
 80032e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032e8:	e016      	b.n	8003318 <HAL_UART_Receive+0xd2>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032f2:	d10d      	bne.n	8003310 <HAL_UART_Receive+0xca>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_UART_Receive+0xc0>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	227f      	movs	r2, #127	; 0x7f
 8003300:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003304:	e008      	b.n	8003318 <HAL_UART_Receive+0xd2>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	223f      	movs	r2, #63	; 0x3f
 800330a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800330e:	e003      	b.n	8003318 <HAL_UART_Receive+0xd2>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800331e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003328:	d108      	bne.n	800333c <HAL_UART_Receive+0xf6>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e003      	b.n	8003344 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003344:	e037      	b.n	80033b6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	2120      	movs	r1, #32
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fc89 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e033      	b.n	80033d0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003374:	b29a      	uxth	r2, r3
 8003376:	8a7b      	ldrh	r3, [r7, #18]
 8003378:	4013      	ands	r3, r2
 800337a:	b29a      	uxth	r2, r3
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	3302      	adds	r3, #2
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e00d      	b.n	80033a4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800338e:	b29b      	uxth	r3, r3
 8003390:	b2da      	uxtb	r2, r3
 8003392:	8a7b      	ldrh	r3, [r7, #18]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4013      	ands	r3, r2
 8003398:	b2da      	uxtb	r2, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1c1      	bne.n	8003346 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b08c      	sub	sp, #48	; 0x30
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4baa      	ldr	r3, [pc, #680]	; (80036b0 <UART_SetConfig+0x2d8>)
 8003408:	4013      	ands	r3, r2
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003410:	430b      	orrs	r3, r1
 8003412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a9f      	ldr	r2, [pc, #636]	; (80036b4 <UART_SetConfig+0x2dc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d004      	beq.n	8003444 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003440:	4313      	orrs	r3, r2
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800344e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003458:	430b      	orrs	r3, r1
 800345a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f023 010f 	bic.w	r1, r3, #15
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a90      	ldr	r2, [pc, #576]	; (80036b8 <UART_SetConfig+0x2e0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d125      	bne.n	80034c8 <UART_SetConfig+0xf0>
 800347c:	4b8f      	ldr	r3, [pc, #572]	; (80036bc <UART_SetConfig+0x2e4>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b03      	cmp	r3, #3
 8003488:	d81a      	bhi.n	80034c0 <UART_SetConfig+0xe8>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <UART_SetConfig+0xb8>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034b1 	.word	0x080034b1
 8003498:	080034a9 	.word	0x080034a9
 800349c:	080034b9 	.word	0x080034b9
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a6:	e116      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80034a8:	2302      	movs	r3, #2
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ae:	e112      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80034b0:	2304      	movs	r3, #4
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b6:	e10e      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80034b8:	2308      	movs	r3, #8
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034be:	e10a      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80034c0:	2310      	movs	r3, #16
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c6:	e106      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7c      	ldr	r2, [pc, #496]	; (80036c0 <UART_SetConfig+0x2e8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d138      	bne.n	8003544 <UART_SetConfig+0x16c>
 80034d2:	4b7a      	ldr	r3, [pc, #488]	; (80036bc <UART_SetConfig+0x2e4>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d82d      	bhi.n	800353c <UART_SetConfig+0x164>
 80034e0:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <UART_SetConfig+0x110>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	0800351d 	.word	0x0800351d
 80034ec:	0800353d 	.word	0x0800353d
 80034f0:	0800353d 	.word	0x0800353d
 80034f4:	0800353d 	.word	0x0800353d
 80034f8:	0800352d 	.word	0x0800352d
 80034fc:	0800353d 	.word	0x0800353d
 8003500:	0800353d 	.word	0x0800353d
 8003504:	0800353d 	.word	0x0800353d
 8003508:	08003525 	.word	0x08003525
 800350c:	0800353d 	.word	0x0800353d
 8003510:	0800353d 	.word	0x0800353d
 8003514:	0800353d 	.word	0x0800353d
 8003518:	08003535 	.word	0x08003535
 800351c:	2300      	movs	r3, #0
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003522:	e0d8      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003524:	2302      	movs	r3, #2
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800352a:	e0d4      	b.n	80036d6 <UART_SetConfig+0x2fe>
 800352c:	2304      	movs	r3, #4
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003532:	e0d0      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003534:	2308      	movs	r3, #8
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353a:	e0cc      	b.n	80036d6 <UART_SetConfig+0x2fe>
 800353c:	2310      	movs	r3, #16
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003542:	e0c8      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5e      	ldr	r2, [pc, #376]	; (80036c4 <UART_SetConfig+0x2ec>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d125      	bne.n	800359a <UART_SetConfig+0x1c2>
 800354e:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <UART_SetConfig+0x2e4>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003558:	2b30      	cmp	r3, #48	; 0x30
 800355a:	d016      	beq.n	800358a <UART_SetConfig+0x1b2>
 800355c:	2b30      	cmp	r3, #48	; 0x30
 800355e:	d818      	bhi.n	8003592 <UART_SetConfig+0x1ba>
 8003560:	2b20      	cmp	r3, #32
 8003562:	d00a      	beq.n	800357a <UART_SetConfig+0x1a2>
 8003564:	2b20      	cmp	r3, #32
 8003566:	d814      	bhi.n	8003592 <UART_SetConfig+0x1ba>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <UART_SetConfig+0x19a>
 800356c:	2b10      	cmp	r3, #16
 800356e:	d008      	beq.n	8003582 <UART_SetConfig+0x1aa>
 8003570:	e00f      	b.n	8003592 <UART_SetConfig+0x1ba>
 8003572:	2300      	movs	r3, #0
 8003574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003578:	e0ad      	b.n	80036d6 <UART_SetConfig+0x2fe>
 800357a:	2302      	movs	r3, #2
 800357c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003580:	e0a9      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003582:	2304      	movs	r3, #4
 8003584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003588:	e0a5      	b.n	80036d6 <UART_SetConfig+0x2fe>
 800358a:	2308      	movs	r3, #8
 800358c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003590:	e0a1      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003592:	2310      	movs	r3, #16
 8003594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003598:	e09d      	b.n	80036d6 <UART_SetConfig+0x2fe>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <UART_SetConfig+0x2f0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d125      	bne.n	80035f0 <UART_SetConfig+0x218>
 80035a4:	4b45      	ldr	r3, [pc, #276]	; (80036bc <UART_SetConfig+0x2e4>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035ae:	2bc0      	cmp	r3, #192	; 0xc0
 80035b0:	d016      	beq.n	80035e0 <UART_SetConfig+0x208>
 80035b2:	2bc0      	cmp	r3, #192	; 0xc0
 80035b4:	d818      	bhi.n	80035e8 <UART_SetConfig+0x210>
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d00a      	beq.n	80035d0 <UART_SetConfig+0x1f8>
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d814      	bhi.n	80035e8 <UART_SetConfig+0x210>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <UART_SetConfig+0x1f0>
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d008      	beq.n	80035d8 <UART_SetConfig+0x200>
 80035c6:	e00f      	b.n	80035e8 <UART_SetConfig+0x210>
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ce:	e082      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80035d0:	2302      	movs	r3, #2
 80035d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d6:	e07e      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80035d8:	2304      	movs	r3, #4
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035de:	e07a      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80035e0:	2308      	movs	r3, #8
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e6:	e076      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80035e8:	2310      	movs	r3, #16
 80035ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ee:	e072      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a35      	ldr	r2, [pc, #212]	; (80036cc <UART_SetConfig+0x2f4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d12a      	bne.n	8003650 <UART_SetConfig+0x278>
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <UART_SetConfig+0x2e4>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003608:	d01a      	beq.n	8003640 <UART_SetConfig+0x268>
 800360a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800360e:	d81b      	bhi.n	8003648 <UART_SetConfig+0x270>
 8003610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003614:	d00c      	beq.n	8003630 <UART_SetConfig+0x258>
 8003616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361a:	d815      	bhi.n	8003648 <UART_SetConfig+0x270>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <UART_SetConfig+0x250>
 8003620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003624:	d008      	beq.n	8003638 <UART_SetConfig+0x260>
 8003626:	e00f      	b.n	8003648 <UART_SetConfig+0x270>
 8003628:	2300      	movs	r3, #0
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362e:	e052      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003630:	2302      	movs	r3, #2
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003636:	e04e      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003638:	2304      	movs	r3, #4
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363e:	e04a      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003640:	2308      	movs	r3, #8
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003646:	e046      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003648:	2310      	movs	r3, #16
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e042      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <UART_SetConfig+0x2dc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d13a      	bne.n	80036d0 <UART_SetConfig+0x2f8>
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <UART_SetConfig+0x2e4>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003668:	d01a      	beq.n	80036a0 <UART_SetConfig+0x2c8>
 800366a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800366e:	d81b      	bhi.n	80036a8 <UART_SetConfig+0x2d0>
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003674:	d00c      	beq.n	8003690 <UART_SetConfig+0x2b8>
 8003676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367a:	d815      	bhi.n	80036a8 <UART_SetConfig+0x2d0>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <UART_SetConfig+0x2b0>
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d008      	beq.n	8003698 <UART_SetConfig+0x2c0>
 8003686:	e00f      	b.n	80036a8 <UART_SetConfig+0x2d0>
 8003688:	2300      	movs	r3, #0
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368e:	e022      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003690:	2302      	movs	r3, #2
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003696:	e01e      	b.n	80036d6 <UART_SetConfig+0x2fe>
 8003698:	2304      	movs	r3, #4
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369e:	e01a      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80036a0:	2308      	movs	r3, #8
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a6:	e016      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80036a8:	2310      	movs	r3, #16
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ae:	e012      	b.n	80036d6 <UART_SetConfig+0x2fe>
 80036b0:	cfff69f3 	.word	0xcfff69f3
 80036b4:	40008000 	.word	0x40008000
 80036b8:	40013800 	.word	0x40013800
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40004400 	.word	0x40004400
 80036c4:	40004800 	.word	0x40004800
 80036c8:	40004c00 	.word	0x40004c00
 80036cc:	40005000 	.word	0x40005000
 80036d0:	2310      	movs	r3, #16
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4aae      	ldr	r2, [pc, #696]	; (8003994 <UART_SetConfig+0x5bc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	f040 8097 	bne.w	8003810 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d823      	bhi.n	8003732 <UART_SetConfig+0x35a>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <UART_SetConfig+0x318>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003715 	.word	0x08003715
 80036f4:	08003733 	.word	0x08003733
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	08003733 	.word	0x08003733
 8003700:	08003723 	.word	0x08003723
 8003704:	08003733 	.word	0x08003733
 8003708:	08003733 	.word	0x08003733
 800370c:	08003733 	.word	0x08003733
 8003710:	0800372b 	.word	0x0800372b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7fe feb4 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800371a:	e010      	b.n	800373e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800371c:	4b9e      	ldr	r3, [pc, #632]	; (8003998 <UART_SetConfig+0x5c0>)
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003720:	e00d      	b.n	800373e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003722:	f7fe fe15 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8003726:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003728:	e009      	b.n	800373e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003730:	e005      	b.n	800373e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800373c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8130 	beq.w	80039a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	4a94      	ldr	r2, [pc, #592]	; (800399c <UART_SetConfig+0x5c4>)
 800374c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003750:	461a      	mov	r2, r3
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	fbb3 f3f2 	udiv	r3, r3, r2
 8003758:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	d305      	bcc.n	8003776 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	429a      	cmp	r2, r3
 8003774:	d903      	bls.n	800377e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800377c:	e113      	b.n	80039a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2200      	movs	r2, #0
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	60fa      	str	r2, [r7, #12]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	4a84      	ldr	r2, [pc, #528]	; (800399c <UART_SetConfig+0x5c4>)
 800378c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003790:	b29b      	uxth	r3, r3
 8003792:	2200      	movs	r2, #0
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a0:	f7fc fd34 	bl	800020c <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	020b      	lsls	r3, r1, #8
 80037b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037ba:	0202      	lsls	r2, r0, #8
 80037bc:	6979      	ldr	r1, [r7, #20]
 80037be:	6849      	ldr	r1, [r1, #4]
 80037c0:	0849      	lsrs	r1, r1, #1
 80037c2:	2000      	movs	r0, #0
 80037c4:	460c      	mov	r4, r1
 80037c6:	4605      	mov	r5, r0
 80037c8:	eb12 0804 	adds.w	r8, r2, r4
 80037cc:	eb43 0905 	adc.w	r9, r3, r5
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	469a      	mov	sl, r3
 80037d8:	4693      	mov	fp, r2
 80037da:	4652      	mov	r2, sl
 80037dc:	465b      	mov	r3, fp
 80037de:	4640      	mov	r0, r8
 80037e0:	4649      	mov	r1, r9
 80037e2:	f7fc fd13 	bl	800020c <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4613      	mov	r3, r2
 80037ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f4:	d308      	bcc.n	8003808 <UART_SetConfig+0x430>
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037fc:	d204      	bcs.n	8003808 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	e0ce      	b.n	80039a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800380e:	e0ca      	b.n	80039a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003818:	d166      	bne.n	80038e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800381a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800381e:	2b08      	cmp	r3, #8
 8003820:	d827      	bhi.n	8003872 <UART_SetConfig+0x49a>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0x450>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	0800384d 	.word	0x0800384d
 800382c:	08003855 	.word	0x08003855
 8003830:	0800385d 	.word	0x0800385d
 8003834:	08003873 	.word	0x08003873
 8003838:	08003863 	.word	0x08003863
 800383c:	08003873 	.word	0x08003873
 8003840:	08003873 	.word	0x08003873
 8003844:	08003873 	.word	0x08003873
 8003848:	0800386b 	.word	0x0800386b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe fe18 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8003850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003852:	e014      	b.n	800387e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003854:	f7fe fe2a 	bl	80024ac <HAL_RCC_GetPCLK2Freq>
 8003858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800385a:	e010      	b.n	800387e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800385c:	4b4e      	ldr	r3, [pc, #312]	; (8003998 <UART_SetConfig+0x5c0>)
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003860:	e00d      	b.n	800387e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003862:	f7fe fd75 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8003866:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003868:	e009      	b.n	800387e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800386a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003870:	e005      	b.n	800387e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800387c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8090 	beq.w	80039a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	4a44      	ldr	r2, [pc, #272]	; (800399c <UART_SetConfig+0x5c4>)
 800388c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003890:	461a      	mov	r2, r3
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	fbb3 f3f2 	udiv	r3, r3, r2
 8003898:	005a      	lsls	r2, r3, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	441a      	add	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	2b0f      	cmp	r3, #15
 80038b0:	d916      	bls.n	80038e0 <UART_SetConfig+0x508>
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b8:	d212      	bcs.n	80038e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f023 030f 	bic.w	r3, r3, #15
 80038c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	8bfb      	ldrh	r3, [r7, #30]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	8bfa      	ldrh	r2, [r7, #30]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	e062      	b.n	80039a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038e6:	e05e      	b.n	80039a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d828      	bhi.n	8003942 <UART_SetConfig+0x56a>
 80038f0:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <UART_SetConfig+0x520>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	08003925 	.word	0x08003925
 8003900:	0800392d 	.word	0x0800392d
 8003904:	08003943 	.word	0x08003943
 8003908:	08003933 	.word	0x08003933
 800390c:	08003943 	.word	0x08003943
 8003910:	08003943 	.word	0x08003943
 8003914:	08003943 	.word	0x08003943
 8003918:	0800393b 	.word	0x0800393b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391c:	f7fe fdb0 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8003920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003922:	e014      	b.n	800394e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003924:	f7fe fdc2 	bl	80024ac <HAL_RCC_GetPCLK2Freq>
 8003928:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800392a:	e010      	b.n	800394e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800392c:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <UART_SetConfig+0x5c0>)
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003930:	e00d      	b.n	800394e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe fd0d 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8003936:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003938:	e009      	b.n	800394e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003940:	e005      	b.n	800394e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800394c:	bf00      	nop
    }

    if (pclk != 0U)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d028      	beq.n	80039a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	4a10      	ldr	r2, [pc, #64]	; (800399c <UART_SetConfig+0x5c4>)
 800395a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800395e:	461a      	mov	r2, r3
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	fbb3 f2f2 	udiv	r2, r3, r2
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	441a      	add	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	d910      	bls.n	80039a0 <UART_SetConfig+0x5c8>
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003984:	d20c      	bcs.n	80039a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	b29a      	uxth	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60da      	str	r2, [r3, #12]
 8003990:	e009      	b.n	80039a6 <UART_SetConfig+0x5ce>
 8003992:	bf00      	nop
 8003994:	40008000 	.word	0x40008000
 8003998:	00f42400 	.word	0x00f42400
 800399c:	08004620 	.word	0x08004620
      }
      else
      {
        ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80039c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3730      	adds	r7, #48	; 0x30
 80039ca:	46bd      	mov	sp, r7
 80039cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ace:	d10a      	bne.n	8003ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b098      	sub	sp, #96	; 0x60
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b24:	f7fd f9d4 	bl	8000ed0 <HAL_GetTick>
 8003b28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d12f      	bne.n	8003b98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	2200      	movs	r2, #0
 8003b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f88e 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d022      	beq.n	8003b98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	e853 3f00 	ldrex	r3, [r3]
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b66:	653b      	str	r3, [r7, #80]	; 0x50
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
 8003b72:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e6      	bne.n	8003b52 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e063      	b.n	8003c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d149      	bne.n	8003c3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f857 	bl	8003c68 <UART_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d03c      	beq.n	8003c3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bde:	633b      	str	r3, [r7, #48]	; 0x30
 8003be0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e6      	bne.n	8003bc0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c12:	61fa      	str	r2, [r7, #28]
 8003c14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	69b9      	ldr	r1, [r7, #24]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e5      	bne.n	8003bf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e012      	b.n	8003c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3758      	adds	r7, #88	; 0x58
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c78:	e049      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c80:	d045      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c82:	f7fd f925 	bl	8000ed0 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e048      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d031      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d110      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f838 	bl	8003d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e029      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce8:	d111      	bne.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f81e 	bl	8003d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e00f      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4013      	ands	r3, r2
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d0a6      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b095      	sub	sp, #84	; 0x54
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d64:	e841 2300 	strex	r3, r2, [r1]
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e6      	bne.n	8003d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3308      	adds	r3, #8
 8003d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e3      	bne.n	8003d70 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d118      	bne.n	8003de2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6979      	ldr	r1, [r7, #20]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	613b      	str	r3, [r7, #16]
   return(result);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e6      	bne.n	8003db0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003df6:	bf00      	nop
 8003df8:	3754      	adds	r7, #84	; 0x54
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e027      	b.n	8003e68 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	; 0x24
 8003e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e02d      	b.n	8003ee8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f84f 	bl	8003f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e02d      	b.n	8003f64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	; 0x24
 8003f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f811 	bl	8003f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d108      	bne.n	8003f8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f8c:	e031      	b.n	8003ff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f8e:	2308      	movs	r3, #8
 8003f90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f92:	2308      	movs	r3, #8
 8003f94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	0e5b      	lsrs	r3, r3, #25
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	0f5b      	lsrs	r3, r3, #29
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fb6:	7bbb      	ldrb	r3, [r7, #14]
 8003fb8:	7b3a      	ldrb	r2, [r7, #12]
 8003fba:	4911      	ldr	r1, [pc, #68]	; (8004000 <UARTEx_SetNbDataToProcess+0x94>)
 8003fbc:	5c8a      	ldrb	r2, [r1, r2]
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fc2:	7b3a      	ldrb	r2, [r7, #12]
 8003fc4:	490f      	ldr	r1, [pc, #60]	; (8004004 <UARTEx_SetNbDataToProcess+0x98>)
 8003fc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	7b7a      	ldrb	r2, [r7, #13]
 8003fd8:	4909      	ldr	r1, [pc, #36]	; (8004000 <UARTEx_SetNbDataToProcess+0x94>)
 8003fda:	5c8a      	ldrb	r2, [r1, r2]
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fe0:	7b7a      	ldrb	r2, [r7, #13]
 8003fe2:	4908      	ldr	r1, [pc, #32]	; (8004004 <UARTEx_SetNbDataToProcess+0x98>)
 8003fe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fe6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	08004638 	.word	0x08004638
 8004004:	08004640 	.word	0x08004640

08004008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004008:	b084      	sub	sp, #16
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	f107 001c 	add.w	r0, r7, #28
 8004016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa66 	bl	80044f8 <USB_CoreReset>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
 8004042:	e005      	b.n	8004050 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800405c:	b004      	add	sp, #16
 800405e:	4770      	bx	lr

08004060 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 0201 	bic.w	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d115      	bne.n	80040d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040b0:	2001      	movs	r0, #1
 80040b2:	f7fc ff19 	bl	8000ee8 <HAL_Delay>
      ms++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3301      	adds	r3, #1
 80040ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa0d 	bl	80044dc <USB_GetMode>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d01e      	beq.n	8004106 <USB_SetCurrentMode+0x84>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b31      	cmp	r3, #49	; 0x31
 80040cc:	d9f0      	bls.n	80040b0 <USB_SetCurrentMode+0x2e>
 80040ce:	e01a      	b.n	8004106 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d115      	bne.n	8004102 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040e2:	2001      	movs	r0, #1
 80040e4:	f7fc ff00 	bl	8000ee8 <HAL_Delay>
      ms++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3301      	adds	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9f4 	bl	80044dc <USB_GetMode>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <USB_SetCurrentMode+0x84>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b31      	cmp	r3, #49	; 0x31
 80040fe:	d9f0      	bls.n	80040e2 <USB_SetCurrentMode+0x60>
 8004100:	e001      	b.n	8004106 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e005      	b.n	8004112 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b32      	cmp	r3, #50	; 0x32
 800410a:	d101      	bne.n	8004110 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800411c:	b084      	sub	sp, #16
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800412a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	e009      	b.n	8004150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	3340      	adds	r3, #64	; 0x40
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	2200      	movs	r2, #0
 8004148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3301      	adds	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b0e      	cmp	r3, #14
 8004154:	d9f2      	bls.n	800413c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d11c      	bne.n	8004196 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416a:	f043 0302 	orr.w	r3, r3, #2
 800416e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e005      	b.n	80041a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041a8:	461a      	mov	r2, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041ae:	2103      	movs	r1, #3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f959 	bl	8004468 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041b6:	2110      	movs	r1, #16
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f8f1 	bl	80043a0 <USB_FlushTxFifo>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f91d 	bl	8004408 <USB_FlushRxFifo>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041de:	461a      	mov	r2, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	461a      	mov	r2, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e043      	b.n	800428a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004218:	d118      	bne.n	800424c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	461a      	mov	r2, r3
 800422e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e013      	b.n	800425e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	461a      	mov	r2, r3
 8004244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e008      	b.n	800425e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	461a      	mov	r2, r3
 800427e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3301      	adds	r3, #1
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	d3b7      	bcc.n	8004202 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	e043      	b.n	8004320 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ae:	d118      	bne.n	80042e2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c2:	461a      	mov	r2, r3
 80042c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e013      	b.n	80042f4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	461a      	mov	r2, r3
 80042da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	e008      	b.n	80042f4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	429a      	cmp	r2, r3
 8004326:	d3b7      	bcc.n	8004298 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004348:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f043 0210 	orr.w	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <USB_DevInit+0x280>)
 800435c:	4313      	orrs	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f043 0208 	orr.w	r2, r3, #8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d107      	bne.n	800438a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800438a:	7dfb      	ldrb	r3, [r7, #23]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004396:	b004      	add	sp, #16
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	803c3800 	.word	0x803c3800

080043a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3301      	adds	r3, #1
 80043b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a13      	ldr	r2, [pc, #76]	; (8004404 <USB_FlushTxFifo+0x64>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e01b      	b.n	80043f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	daf2      	bge.n	80043ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	019b      	lsls	r3, r3, #6
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3301      	adds	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <USB_FlushTxFifo+0x64>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e006      	b.n	80043f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d0f0      	beq.n	80043d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	00030d40 	.word	0x00030d40

08004408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a11      	ldr	r2, [pc, #68]	; (8004464 <USB_FlushRxFifo+0x5c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e018      	b.n	8004458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	daf2      	bge.n	8004414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2210      	movs	r2, #16
 8004436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a08      	ldr	r2, [pc, #32]	; (8004464 <USB_FlushRxFifo+0x5c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e006      	b.n	8004458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d0f0      	beq.n	8004438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	00030d40 	.word	0x00030d40

08004468 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044b4:	f023 0303 	bic.w	r3, r3, #3
 80044b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c8:	f043 0302 	orr.w	r3, r3, #2
 80044cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0301 	and.w	r3, r3, #1
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a13      	ldr	r2, [pc, #76]	; (800455c <USB_CoreReset+0x64>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e01b      	b.n	800454e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	daf2      	bge.n	8004504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <USB_CoreReset+0x64>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e006      	b.n	800454e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b01      	cmp	r3, #1
 800454a:	d0f0      	beq.n	800452e <USB_CoreReset+0x36>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	00030d40 	.word	0x00030d40

08004560 <memset>:
 8004560:	4402      	add	r2, r0
 8004562:	4603      	mov	r3, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <__libc_init_array>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	4d0d      	ldr	r5, [pc, #52]	; (80045a8 <__libc_init_array+0x38>)
 8004574:	4c0d      	ldr	r4, [pc, #52]	; (80045ac <__libc_init_array+0x3c>)
 8004576:	1b64      	subs	r4, r4, r5
 8004578:	10a4      	asrs	r4, r4, #2
 800457a:	2600      	movs	r6, #0
 800457c:	42a6      	cmp	r6, r4
 800457e:	d109      	bne.n	8004594 <__libc_init_array+0x24>
 8004580:	4d0b      	ldr	r5, [pc, #44]	; (80045b0 <__libc_init_array+0x40>)
 8004582:	4c0c      	ldr	r4, [pc, #48]	; (80045b4 <__libc_init_array+0x44>)
 8004584:	f000 f818 	bl	80045b8 <_init>
 8004588:	1b64      	subs	r4, r4, r5
 800458a:	10a4      	asrs	r4, r4, #2
 800458c:	2600      	movs	r6, #0
 800458e:	42a6      	cmp	r6, r4
 8004590:	d105      	bne.n	800459e <__libc_init_array+0x2e>
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	f855 3b04 	ldr.w	r3, [r5], #4
 8004598:	4798      	blx	r3
 800459a:	3601      	adds	r6, #1
 800459c:	e7ee      	b.n	800457c <__libc_init_array+0xc>
 800459e:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a2:	4798      	blx	r3
 80045a4:	3601      	adds	r6, #1
 80045a6:	e7f2      	b.n	800458e <__libc_init_array+0x1e>
 80045a8:	08004650 	.word	0x08004650
 80045ac:	08004650 	.word	0x08004650
 80045b0:	08004650 	.word	0x08004650
 80045b4:	08004654 	.word	0x08004654

080045b8 <_init>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr

080045c4 <_fini>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr
