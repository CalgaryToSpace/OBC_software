
TestingTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004794  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aec  08004aec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af4  08004af4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000070  08004b6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08004b6c  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001343d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232e  00000000  00000000  000334dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00035810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c6a  00000000  00000000  000371b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcb9  00000000  00000000  00060e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001007e2  00000000  00000000  00070adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001712bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  00171310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004938 	.word	0x08004938

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	08004938 	.word	0x08004938

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <receiveImage.9295>:
  MX_USB_OTG_FS_PCD_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */


  void receiveImage(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	f5ad 5d49 	sub.w	sp, sp, #12864	; 0x3240
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000502:	3b24      	subs	r3, #36	; 0x24
 8000504:	f8c3 c000 	str.w	ip, [r3]
  	 // receive first sentence, get total number of sentences and send
  		  char sentence[64];
  		  // create group of 100 sentences
  		  char group[100][64];
  		  // create counter for number of sentences
  		  int SentencesNum = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 800050e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000512:	6013      	str	r3, [r2, #0]
  		  // Declaration of enum for bool for loop
  		  typedef enum { F, T } boolean;
  		  boolean loop = T;
 8000514:	2301      	movs	r3, #1
 8000516:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 800051a:	f102 0223 	add.w	r2, r2, #35	; 0x23
 800051e:	7013      	strb	r3, [r2, #0]
  		  // initialize chars and ints for hex values
  		  char hexTotal[6];
  		  int totalSentences;

  		  while(loop == T){
 8000520:	e07d      	b.n	800061e <receiveImage.9295+0x12a>

  			  // get sentence
  			  HAL_UART_Receive(&hlpuart1, (uint8_t*)sentence, 64, HAL_MAX_DELAY);
 8000522:	f507 5148 	add.w	r1, r7, #12800	; 0x3200
 8000526:	f101 0118 	add.w	r1, r1, #24
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	2240      	movs	r2, #64	; 0x40
 8000530:	4875      	ldr	r0, [pc, #468]	; (8000708 <receiveImage.9295+0x214>)
 8000532:	f003 f820 	bl	8003576 <HAL_UART_Receive>
//  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)sentence, 10, HAL_MAX_DELAY);

  			  // if no total exists, get it
  			 hexTotal[0] = '0';
 8000536:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800053a:	f103 0308 	add.w	r3, r3, #8
 800053e:	3b18      	subs	r3, #24
 8000540:	2230      	movs	r2, #48	; 0x30
 8000542:	701a      	strb	r2, [r3, #0]
  			 hexTotal[1] = 'x';
 8000544:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8000548:	f103 0308 	add.w	r3, r3, #8
 800054c:	3b18      	subs	r3, #24
 800054e:	2278      	movs	r2, #120	; 0x78
 8000550:	705a      	strb	r2, [r3, #1]
  				  strncpy(&hexTotal[2], &sentence[4], 4);
 8000552:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8000556:	f103 0318 	add.w	r3, r3, #24
 800055a:	1d19      	adds	r1, r3, #4
 800055c:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8000560:	f103 0308 	add.w	r3, r3, #8
 8000564:	3b18      	subs	r3, #24
 8000566:	3302      	adds	r3, #2
 8000568:	2204      	movs	r2, #4
 800056a:	4618      	mov	r0, r3
 800056c:	f004 f942 	bl	80047f4 <strncpy>

//  		  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)hexTotal, 5, HAL_MAX_DELAY);

  		    		  char *ptr;

  				  	  totalSentences = (int)strtol(hexTotal, &ptr, 0);
 8000570:	f507 51c9 	add.w	r1, r7, #6432	; 0x1920
 8000574:	f101 0108 	add.w	r1, r1, #8
 8000578:	391c      	subs	r1, #28
 800057a:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800057e:	f103 0308 	add.w	r3, r3, #8
 8000582:	3b18      	subs	r3, #24
 8000584:	2200      	movs	r2, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 f9cc 	bl	8004924 <strtol>
 800058c:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 8000590:	f103 031c 	add.w	r3, r3, #28
 8000594:	6018      	str	r0, [r3, #0]


  			  // add sentence to group at index SentenceNum(starts at 0 and increases by 1 every iteration)
  			  strcpy(group[SentencesNum],sentence);
 8000596:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800059a:	f103 0308 	add.w	r3, r3, #8
 800059e:	3b10      	subs	r3, #16
 80005a0:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 80005a4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80005a8:	6812      	ldr	r2, [r2, #0]
 80005aa:	0192      	lsls	r2, r2, #6
 80005ac:	4413      	add	r3, r2
 80005ae:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 80005b2:	f102 0218 	add.w	r2, r2, #24
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f004 f913 	bl	80047e4 <strcpy>
  			  SentencesNum += 1;
 80005be:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 80005c2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 80005ce:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80005d2:	6013      	str	r3, [r2, #0]
  			  //if SentencesNum becomes = to 100, write group to mem, and subtract 100 from totalSentences and make SentencesNum =0
  			  if(SentencesNum == 100){
 80005d4:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 80005d8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b64      	cmp	r3, #100	; 0x64
 80005e0:	d110      	bne.n	8000604 <receiveImage.9295+0x110>
//  				  HAL_UART_Transmit(&hlpuart1, (uint8_t*)sentence, 64, HAL_MAX_DELAY);
  				  //memWrite(CAMERA_DATA, group, ((sentencesNum)*67));
  				  totalSentences -= 100;
 80005e2:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 80005e6:	f103 031c 	add.w	r3, r3, #28
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b64      	subs	r3, #100	; 0x64
 80005ee:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 80005f2:	f102 021c 	add.w	r2, r2, #28
 80005f6:	6013      	str	r3, [r2, #0]
  				  SentencesNum = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 80005fe:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000602:	6013      	str	r3, [r2, #0]
  				  // re initialize group to empty it
  				  char group[100][64];
  			  }

  			  // if totalSentences becomes less than 100 then break out of loop and use for loop to get the remaining sentences
  			  if(totalSentences < 100){
 8000604:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 8000608:	f103 031c 	add.w	r3, r3, #28
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b63      	cmp	r3, #99	; 0x63
 8000610:	dc05      	bgt.n	800061e <receiveImage.9295+0x12a>
  				  loop = F;
 8000612:	2300      	movs	r3, #0
 8000614:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 8000618:	f102 0223 	add.w	r2, r2, #35	; 0x23
 800061c:	7013      	strb	r3, [r2, #0]
  		  while(loop == T){
 800061e:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 8000622:	f103 0323 	add.w	r3, r3, #35	; 0x23
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	f43f af7a 	beq.w	8000522 <receiveImage.9295+0x2e>
  			  }
  		  }

  		  // if totalSetences is less than 100, add the rest to group and write to mem
  		  	  if(totalSentences < 100){
 800062e:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 8000632:	f103 031c 	add.w	r3, r3, #28
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b63      	cmp	r3, #99	; 0x63
 800063a:	dc54      	bgt.n	80006e6 <receiveImage.9295+0x1f2>
  		  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"L", 1, HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2201      	movs	r2, #1
 8000642:	4932      	ldr	r1, [pc, #200]	; (800070c <receiveImage.9295+0x218>)
 8000644:	4830      	ldr	r0, [pc, #192]	; (8000708 <receiveImage.9295+0x214>)
 8000646:	f002 feff 	bl	8003448 <HAL_UART_Transmit>
  		  		  for(int i=0; i<totalSentences; i++){
 800064a:	2300      	movs	r3, #0
 800064c:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 8000650:	f102 0218 	add.w	r2, r2, #24
 8000654:	6013      	str	r3, [r2, #0]
 8000656:	e033      	b.n	80006c0 <receiveImage.9295+0x1cc>
  		  			// get sentence
  		  			HAL_UART_Receive(&hlpuart1, (uint8_t*)sentence, 64, HAL_MAX_DELAY);
 8000658:	f507 5148 	add.w	r1, r7, #12800	; 0x3200
 800065c:	f101 0118 	add.w	r1, r1, #24
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2240      	movs	r2, #64	; 0x40
 8000666:	4828      	ldr	r0, [pc, #160]	; (8000708 <receiveImage.9295+0x214>)
 8000668:	f002 ff85 	bl	8003576 <HAL_UART_Receive>
  		  			// add to group
  		  			strcpy(group[i],sentence);
 800066c:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8000670:	f103 0308 	add.w	r3, r3, #8
 8000674:	3b10      	subs	r3, #16
 8000676:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 800067a:	f102 0218 	add.w	r2, r2, #24
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	0192      	lsls	r2, r2, #6
 8000682:	4413      	add	r3, r2
 8000684:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8000688:	f102 0218 	add.w	r2, r2, #24
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f004 f8a8 	bl	80047e4 <strcpy>
  		  			SentencesNum += 1;
 8000694:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 8000698:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 80006a4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80006a8:	6013      	str	r3, [r2, #0]
  		  		  for(int i=0; i<totalSentences; i++){
 80006aa:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 80006ae:	f103 0318 	add.w	r3, r3, #24
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	f507 5249 	add.w	r2, r7, #12864	; 0x3240
 80006ba:	f102 0218 	add.w	r2, r2, #24
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 80006c4:	f103 0318 	add.w	r3, r3, #24
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	f507 5349 	add.w	r3, r7, #12864	; 0x3240
 80006ce:	f103 031c 	add.w	r3, r3, #28
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbbf      	blt.n	8000658 <receiveImage.9295+0x164>
  		  		  }
  		  		  // once all are added then write group to mem
  		  		//memWrite(CAMERA_DATA, group, ((sentencesNum)*67));
  		  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"D", 1, HAL_MAX_DELAY);
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	2201      	movs	r2, #1
 80006de:	490c      	ldr	r1, [pc, #48]	; (8000710 <receiveImage.9295+0x21c>)
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <receiveImage.9295+0x214>)
 80006e2:	f002 feb1 	bl	8003448 <HAL_UART_Transmit>
  		  	  }

  		  // receive final telemetry sentence
  		  	HAL_UART_Receive(&hlpuart1, (uint8_t*)sentence, 64, HAL_MAX_DELAY);
 80006e6:	f507 5148 	add.w	r1, r7, #12800	; 0x3200
 80006ea:	f101 0118 	add.w	r1, r1, #24
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	2240      	movs	r2, #64	; 0x40
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <receiveImage.9295+0x214>)
 80006f6:	f002 ff3e 	bl	8003576 <HAL_UART_Receive>
  		  	//memWrite(CAMERA_DATA, group, 67);
  }
 80006fa:	bf00      	nop
 80006fc:	f507 5749 	add.w	r7, r7, #12864	; 0x3240
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000524 	.word	0x20000524
 800070c:	08004950 	.word	0x08004950
 8000710:	08004954 	.word	0x08004954

08000714 <main>:
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
int main(void)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	60bb      	str	r3, [r7, #8]
  HAL_Init();
 8000720:	f000 fcfd 	bl	800111e <HAL_Init>
  SystemClock_Config();
 8000724:	f000 f8ec 	bl	8000900 <SystemClock_Config>
  MX_GPIO_Init();
 8000728:	f000 fa4e 	bl	8000bc8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800072c:	f000 f93c 	bl	80009a8 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000730:	f000 f9d4 	bl	8000adc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000734:	f000 fa1e 	bl	8000b74 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000738:	f000 f982 	bl	8000a40 <MX_USART1_UART_Init>





uint8_t noFT[3] = {3,1,8};
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <main+0x5c>)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	4611      	mov	r1, r2
 8000744:	8019      	strh	r1, [r3, #0]
 8000746:	3302      	adds	r3, #2
 8000748:	0c12      	lsrs	r2, r2, #16
 800074a:	701a      	strb	r2, [r3, #0]
const char *m = "m";
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <main+0x60>)
 800074e:	60fb      	str	r3, [r7, #12]

//HAL_UART_Transmit(&hlpuart1, (uint8_t*)m, 1, HAL_MAX_DELAY);

//HAL_UART_Receive(&hlpuart1, (uint8_t*)dataRec, 64, HAL_MAX_DELAY);
//HAL_UART_Receive_DMA(&hlpuart1, dataRec, 65);
Capture_Image(true, 'm');
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	469c      	mov	ip, r3
 8000756:	216d      	movs	r1, #109	; 0x6d
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f811 	bl	8000780 <Capture_Image.9323>
    /* USER CODE BEGIN 3 */
//	  HAL_UART_Receive(&hlpuart1, (uint8_t*)dataRec, 4, HAL_MAX_DELAY);



	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)dataRec, 4, HAL_MAX_DELAY);
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	2204      	movs	r2, #4
 8000764:	4904      	ldr	r1, [pc, #16]	; (8000778 <main+0x64>)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <main+0x68>)
 8000768:	f002 fe6e 	bl	8003448 <HAL_UART_Transmit>
 800076c:	e7f7      	b.n	800075e <main+0x4a>
 800076e:	bf00      	nop
 8000770:	0800495c 	.word	0x0800495c
 8000774:	08004958 	.word	0x08004958
 8000778:	20000644 	.word	0x20000644
 800077c:	20000524 	.word	0x20000524

08000780 <Capture_Image.9323>:
    enum Capture_Status Capture_Image(bool flash, char lighting){
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	460a      	mov	r2, r1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	71bb      	strb	r3, [r7, #6]
 8000790:	4664      	mov	r4, ip
 8000792:	f8c7 c000 	str.w	ip, [r7]
  	  switch(lighting){
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	3b64      	subs	r3, #100	; 0x64
 800079a:	2b0f      	cmp	r3, #15
 800079c:	f200 8098 	bhi.w	80008d0 <Capture_Image.9323+0x150>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <Capture_Image.9323+0x28>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007e9 	.word	0x080007e9
 80007ac:	080008d1 	.word	0x080008d1
 80007b0:	080008d1 	.word	0x080008d1
 80007b4:	080008d1 	.word	0x080008d1
 80007b8:	080008d1 	.word	0x080008d1
 80007bc:	080008d1 	.word	0x080008d1
 80007c0:	080008d1 	.word	0x080008d1
 80007c4:	080008d1 	.word	0x080008d1
 80007c8:	080008d1 	.word	0x080008d1
 80007cc:	08000823 	.word	0x08000823
 80007d0:	0800085d 	.word	0x0800085d
 80007d4:	080008d1 	.word	0x080008d1
 80007d8:	080008d1 	.word	0x080008d1
 80007dc:	080008d1 	.word	0x080008d1
 80007e0:	080008d1 	.word	0x080008d1
 80007e4:	08000897 	.word	0x08000897
  		  if(flash){
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00a      	beq.n	8000804 <Capture_Image.9323+0x84>
  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"D", 1, HAL_MAX_DELAY);
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	2201      	movs	r2, #1
 80007f4:	4939      	ldr	r1, [pc, #228]	; (80008dc <Capture_Image.9323+0x15c>)
 80007f6:	483a      	ldr	r0, [pc, #232]	; (80008e0 <Capture_Image.9323+0x160>)
 80007f8:	f002 fe26 	bl	8003448 <HAL_UART_Transmit>
  			  HAL_Delay(25);
 80007fc:	2019      	movs	r0, #25
 80007fe:	f000 fd03 	bl	8001208 <HAL_Delay>
 8000802:	e009      	b.n	8000818 <Capture_Image.9323+0x98>
  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"d", 1, HAL_MAX_DELAY);
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	2201      	movs	r2, #1
 800080a:	4936      	ldr	r1, [pc, #216]	; (80008e4 <Capture_Image.9323+0x164>)
 800080c:	4834      	ldr	r0, [pc, #208]	; (80008e0 <Capture_Image.9323+0x160>)
 800080e:	f002 fe1b 	bl	8003448 <HAL_UART_Transmit>
  			  HAL_Delay(25);
 8000812:	2019      	movs	r0, #25
 8000814:	f000 fcf8 	bl	8001208 <HAL_Delay>
  		  receiveImage();
 8000818:	46a4      	mov	ip, r4
 800081a:	f7ff fe6b 	bl	80004f4 <receiveImage.9295>
  		  return Transmit_Success;
 800081e:	2300      	movs	r3, #0
 8000820:	e057      	b.n	80008d2 <Capture_Image.9323+0x152>
  	  		  if(flash){
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00a      	beq.n	800083e <Capture_Image.9323+0xbe>
  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"M", 1, HAL_MAX_DELAY);
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2201      	movs	r2, #1
 800082e:	492e      	ldr	r1, [pc, #184]	; (80008e8 <Capture_Image.9323+0x168>)
 8000830:	482b      	ldr	r0, [pc, #172]	; (80008e0 <Capture_Image.9323+0x160>)
 8000832:	f002 fe09 	bl	8003448 <HAL_UART_Transmit>
  	  			  HAL_Delay(25);
 8000836:	2019      	movs	r0, #25
 8000838:	f000 fce6 	bl	8001208 <HAL_Delay>
 800083c:	e009      	b.n	8000852 <Capture_Image.9323+0xd2>
  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"m", 1, HAL_MAX_DELAY);
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	2201      	movs	r2, #1
 8000844:	4929      	ldr	r1, [pc, #164]	; (80008ec <Capture_Image.9323+0x16c>)
 8000846:	4826      	ldr	r0, [pc, #152]	; (80008e0 <Capture_Image.9323+0x160>)
 8000848:	f002 fdfe 	bl	8003448 <HAL_UART_Transmit>
  	  			  HAL_Delay(25);
 800084c:	2019      	movs	r0, #25
 800084e:	f000 fcdb 	bl	8001208 <HAL_Delay>
  	  		receiveImage();
 8000852:	46a4      	mov	ip, r4
 8000854:	f7ff fe4e 	bl	80004f4 <receiveImage.9295>
  	  		return Transmit_Success;
 8000858:	2300      	movs	r3, #0
 800085a:	e03a      	b.n	80008d2 <Capture_Image.9323+0x152>
  	  		  if(flash){
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00a      	beq.n	8000878 <Capture_Image.9323+0xf8>
  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"N", 1, HAL_MAX_DELAY);
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	2201      	movs	r2, #1
 8000868:	4921      	ldr	r1, [pc, #132]	; (80008f0 <Capture_Image.9323+0x170>)
 800086a:	481d      	ldr	r0, [pc, #116]	; (80008e0 <Capture_Image.9323+0x160>)
 800086c:	f002 fdec 	bl	8003448 <HAL_UART_Transmit>
  	  			  HAL_Delay(25);
 8000870:	2019      	movs	r0, #25
 8000872:	f000 fcc9 	bl	8001208 <HAL_Delay>
 8000876:	e009      	b.n	800088c <Capture_Image.9323+0x10c>
  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"n", 1, HAL_MAX_DELAY);
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	2201      	movs	r2, #1
 800087e:	491d      	ldr	r1, [pc, #116]	; (80008f4 <Capture_Image.9323+0x174>)
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <Capture_Image.9323+0x160>)
 8000882:	f002 fde1 	bl	8003448 <HAL_UART_Transmit>
  	  			  HAL_Delay(25);
 8000886:	2019      	movs	r0, #25
 8000888:	f000 fcbe 	bl	8001208 <HAL_Delay>
  	  		receiveImage();
 800088c:	46a4      	mov	ip, r4
 800088e:	f7ff fe31 	bl	80004f4 <receiveImage.9295>
  	  		return Transmit_Success;
 8000892:	2300      	movs	r3, #0
 8000894:	e01d      	b.n	80008d2 <Capture_Image.9323+0x152>
  	  		  if(flash){
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00a      	beq.n	80008b2 <Capture_Image.9323+0x132>
  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"S", 1, HAL_MAX_DELAY);
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	2201      	movs	r2, #1
 80008a2:	4915      	ldr	r1, [pc, #84]	; (80008f8 <Capture_Image.9323+0x178>)
 80008a4:	480e      	ldr	r0, [pc, #56]	; (80008e0 <Capture_Image.9323+0x160>)
 80008a6:	f002 fdcf 	bl	8003448 <HAL_UART_Transmit>
  	  			  HAL_Delay(25);
 80008aa:	2019      	movs	r0, #25
 80008ac:	f000 fcac 	bl	8001208 <HAL_Delay>
 80008b0:	e009      	b.n	80008c6 <Capture_Image.9323+0x146>
  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"s", 1, HAL_MAX_DELAY);
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2201      	movs	r2, #1
 80008b8:	4910      	ldr	r1, [pc, #64]	; (80008fc <Capture_Image.9323+0x17c>)
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <Capture_Image.9323+0x160>)
 80008bc:	f002 fdc4 	bl	8003448 <HAL_UART_Transmit>
  	  			  HAL_Delay(25);
 80008c0:	2019      	movs	r0, #25
 80008c2:	f000 fca1 	bl	8001208 <HAL_Delay>
  	  		  receiveImage();
 80008c6:	46a4      	mov	ip, r4
 80008c8:	f7ff fe14 	bl	80004f4 <receiveImage.9295>
  	  		return Transmit_Success;
 80008cc:	2300      	movs	r3, #0
 80008ce:	e000      	b.n	80008d2 <Capture_Image.9323+0x152>
  		  return Wrong_input;
 80008d0:	2301      	movs	r3, #1
    }
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	bf00      	nop
 80008dc:	08004954 	.word	0x08004954
 80008e0:	20000524 	.word	0x20000524
 80008e4:	08004960 	.word	0x08004960
 80008e8:	08004964 	.word	0x08004964
 80008ec:	08004958 	.word	0x08004958
 80008f0:	08004968 	.word	0x08004968
 80008f4:	0800496c 	.word	0x0800496c
 80008f8:	08004970 	.word	0x08004970
 80008fc:	08004974 	.word	0x08004974

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b096      	sub	sp, #88	; 0x58
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2244      	movs	r2, #68	; 0x44
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f003 ff60 	bl	80047d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000922:	2000      	movs	r0, #0
 8000924:	f001 f88c 	bl	8001a40 <HAL_PWREx_ControlVoltageScaling>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800092e:	f000 f9ef 	bl	8000d10 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000932:	2322      	movs	r3, #34	; 0x22
 8000934:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800093c:	2301      	movs	r3, #1
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000940:	2340      	movs	r3, #64	; 0x40
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000948:	2302      	movs	r3, #2
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000950:	231e      	movs	r3, #30
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4618      	mov	r0, r3
 8000966:	f001 f92f 	bl	8001bc8 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000970:	f000 f9ce 	bl	8000d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2303      	movs	r3, #3
 800097a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	2105      	movs	r1, #5
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fd40 	bl	8002414 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800099a:	f000 f9b9 	bl	8000d10 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3758      	adds	r7, #88	; 0x58
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_LPUART1_UART_Init+0x94>)
 80009b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009b4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80009b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009f2:	f002 fcd9 	bl	80033a8 <HAL_UART_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80009fc:	f000 f988 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 8000a04:	f003 fb42 	bl	800408c <HAL_UARTEx_SetTxFifoThreshold>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a0e:	f000 f97f 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 8000a16:	f003 fb77 	bl	8004108 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f000 f976 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 8000a26:	f003 faf8 	bl	800401a <HAL_UARTEx_DisableFifoMode>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a30:	f000 f96e 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000524 	.word	0x20000524
 8000a3c:	40008000 	.word	0x40008000

08000a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <MX_USART1_UART_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 209700;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a4c:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <MX_USART1_UART_Init+0x98>)
 8000a4e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a64:	220c      	movs	r2, #12
 8000a66:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a88:	f002 fc8e 	bl	80033a8 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000a92:	f000 f93d 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a9a:	f003 faf7 	bl	800408c <HAL_UARTEx_SetTxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000aa4:	f000 f934 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000aac:	f003 fb2c 	bl	8004108 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000ab6:	f000 f92b 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000abc:	f003 faad 	bl	800401a <HAL_UARTEx_DisableFifoMode>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000ac6:	f000 f923 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200005b4 	.word	0x200005b4
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	00033324 	.word	0x00033324

08000adc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_USART3_UART_Init+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b26:	f002 fc3f 	bl	80033a8 <HAL_UART_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b30:	f000 f8ee 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b38:	f003 faa8 	bl	800408c <HAL_UARTEx_SetTxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b42:	f000 f8e5 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b4a:	f003 fadd 	bl	8004108 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b54:	f000 f8dc 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_USART3_UART_Init+0x90>)
 8000b5a:	f003 fa5e 	bl	800401a <HAL_UARTEx_DisableFifoMode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b64:	f000 f8d4 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	40004800 	.word	0x40004800

08000b74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b82:	2206      	movs	r2, #6
 8000b84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000bb2:	f000 fddd 	bl	8001770 <HAL_PCD_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f000 f8a8 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000011c 	.word	0x2000011c

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	; 0x30
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b48      	ldr	r3, [pc, #288]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a47      	ldr	r2, [pc, #284]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b45      	ldr	r3, [pc, #276]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf6:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a41      	ldr	r2, [pc, #260]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a35      	ldr	r2, [pc, #212]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a2f      	ldr	r2, [pc, #188]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000c56:	f000 ffa7 	bl	8001ba8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a28      	ldr	r2, [pc, #160]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_GPIO_Init+0x138>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c78:	4822      	ldr	r0, [pc, #136]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000c7a:	f000 fd61 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	4821      	ldr	r0, [pc, #132]	; (8000d08 <MX_GPIO_Init+0x140>)
 8000c84:	f000 fd5c 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481b      	ldr	r0, [pc, #108]	; (8000d0c <MX_GPIO_Init+0x144>)
 8000ca0:	f000 fbbc 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ca4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4811      	ldr	r0, [pc, #68]	; (8000d04 <MX_GPIO_Init+0x13c>)
 8000cbe:	f000 fbad 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_GPIO_Init+0x140>)
 8000cda:	f000 fb9f 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cde:	2340      	movs	r3, #64	; 0x40
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_GPIO_Init+0x140>)
 8000cf2:	f000 fb93 	bl	800141c <HAL_GPIO_Init>

}
 8000cf6:	bf00      	nop
 8000cf8:	3730      	adds	r7, #48	; 0x30
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000400 	.word	0x48000400
 8000d08:	48001800 	.word	0x48001800
 8000d0c:	48000800 	.word	0x48000800

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_MspInit+0x44>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x44>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x44>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x44>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0b2      	sub	sp, #200	; 0xc8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	2294      	movs	r2, #148	; 0x94
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fd25 	bl	80047d4 <memset>
  if(huart->Instance==LPUART1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a65      	ldr	r2, [pc, #404]	; (8000f24 <HAL_UART_MspInit+0x1c0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d13e      	bne.n	8000e12 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d94:	2320      	movs	r3, #32
 8000d96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fde9 	bl	8002978 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff ffb0 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000db0:	4b5d      	ldr	r3, [pc, #372]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db4:	4a5c      	ldr	r2, [pc, #368]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	4b57      	ldr	r3, [pc, #348]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a56      	ldr	r2, [pc, #344]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8000de0:	f000 fee2 	bl	8001ba8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000de4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4848      	ldr	r0, [pc, #288]	; (8000f2c <HAL_UART_MspInit+0x1c8>)
 8000e0c:	f000 fb06 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e10:	e084      	b.n	8000f1c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a46      	ldr	r2, [pc, #280]	; (8000f30 <HAL_UART_MspInit+0x1cc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d13e      	bne.n	8000e9a <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e20:	2300      	movs	r3, #0
 8000e22:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fda5 	bl	8002978 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e34:	f7ff ff6c 	bl	8000d10 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e38:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3c:	4a3a      	ldr	r2, [pc, #232]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6613      	str	r3, [r2, #96]	; 0x60
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a34      	ldr	r2, [pc, #208]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000e68:	f000 fe9e 	bl	8001ba8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e86:	2307      	movs	r3, #7
 8000e88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4826      	ldr	r0, [pc, #152]	; (8000f2c <HAL_UART_MspInit+0x1c8>)
 8000e94:	f000 fac2 	bl	800141c <HAL_GPIO_Init>
}
 8000e98:	e040      	b.n	8000f1c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <HAL_UART_MspInit+0x1d0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d13b      	bne.n	8000f1c <HAL_UART_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fd61 	bl	8002978 <HAL_RCCEx_PeriphCLKConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8000ebc:	f7ff ff28 	bl	8000d10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_UART_MspInit+0x1c4>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <HAL_UART_MspInit+0x1d4>)
 8000f18:	f000 fa80 	bl	800141c <HAL_GPIO_Init>
}
 8000f1c:	bf00      	nop
 8000f1e:	37c8      	adds	r7, #200	; 0xc8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40008000 	.word	0x40008000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40004800 	.word	0x40004800
 8000f38:	48000c00 	.word	0x48000c00

08000f3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0b0      	sub	sp, #192	; 0xc0
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	2294      	movs	r2, #148	; 0x94
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fc39 	bl	80047d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f6a:	d16c      	bne.n	8001046 <HAL_PCD_MspInit+0x10a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f70:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fcfb 	bl	8002978 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f88:	f7ff fec2 	bl	8000d10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HAL_PCD_MspInit+0x114>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f90:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <HAL_PCD_MspInit+0x114>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_PCD_MspInit+0x114>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fa4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f000 fa25 	bl	800141c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f000 fa14 	bl	800141c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_PCD_MspInit+0x114>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <HAL_PCD_MspInit+0x114>)
 8000ffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_PCD_MspInit+0x114>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_PCD_MspInit+0x114>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d114      	bne.n	8001042 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_PCD_MspInit+0x114>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <HAL_PCD_MspInit+0x114>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_PCD_MspInit+0x114>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001030:	f000 fdaa 	bl	8001b88 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_PCD_MspInit+0x114>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001038:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_PCD_MspInit+0x114>)
 800103a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800103e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001040:	e001      	b.n	8001046 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001042:	f000 fda1 	bl	8001b88 <HAL_PWREx_EnableVddUSB>
}
 8001046:	bf00      	nop
 8001048:	37c0      	adds	r7, #192	; 0xc0
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f892 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d0:	f7ff ffea 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopForever+0xe>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopForever+0x16>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fa:	f003 fb47 	bl	800478c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010fe:	f7ff fb09 	bl	8000714 <main>

08001102 <LoopForever>:

LoopForever:
    b LoopForever
 8001102:	e7fe      	b.n	8001102 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001104:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001110:	08004afc 	.word	0x08004afc
  ldr r2, =_sbss
 8001114:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001118:	2000068c 	.word	0x2000068c

0800111c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_IRQHandler>

0800111e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f943 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f80e 	bl	8001150 <HAL_InitTick>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	e001      	b.n	8001144 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001140:	f7ff fdec 	bl	8000d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001144:	79fb      	ldrb	r3, [r7, #7]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_InitTick+0x6c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_InitTick+0x70>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_InitTick+0x6c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f941 	bl	8001402 <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10f      	bne.n	80011a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d809      	bhi.n	80011a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f919 	bl	80013ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_InitTick+0x74>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e007      	b.n	80011b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e004      	b.n	80011b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	e001      	b.n	80011b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000688 	.word	0x20000688

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000688 	.word	0x20000688

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff47 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff5c 	bl	8001298 <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff8e 	bl	8001308 <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5d 	bl	80012b4 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffb0 	bl	8001370 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e166      	b.n	80016fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2101      	movs	r1, #1
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8158 	beq.w	80016f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d005      	beq.n	800145c <HAL_GPIO_Init+0x40>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d130      	bne.n	80014be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001492:	2201      	movs	r2, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 0201 	and.w	r2, r3, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d017      	beq.n	80014fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d123      	bne.n	800154e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0203 	and.w	r2, r3, #3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80b2 	beq.w	80016f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001590:	4b61      	ldr	r3, [pc, #388]	; (8001718 <HAL_GPIO_Init+0x2fc>)
 8001592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001594:	4a60      	ldr	r2, [pc, #384]	; (8001718 <HAL_GPIO_Init+0x2fc>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6613      	str	r3, [r2, #96]	; 0x60
 800159c:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <HAL_GPIO_Init+0x2fc>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a8:	4a5c      	ldr	r2, [pc, #368]	; (800171c <HAL_GPIO_Init+0x300>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015d2:	d02b      	beq.n	800162c <HAL_GPIO_Init+0x210>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a52      	ldr	r2, [pc, #328]	; (8001720 <HAL_GPIO_Init+0x304>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d025      	beq.n	8001628 <HAL_GPIO_Init+0x20c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a51      	ldr	r2, [pc, #324]	; (8001724 <HAL_GPIO_Init+0x308>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d01f      	beq.n	8001624 <HAL_GPIO_Init+0x208>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a50      	ldr	r2, [pc, #320]	; (8001728 <HAL_GPIO_Init+0x30c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d019      	beq.n	8001620 <HAL_GPIO_Init+0x204>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4f      	ldr	r2, [pc, #316]	; (800172c <HAL_GPIO_Init+0x310>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d013      	beq.n	800161c <HAL_GPIO_Init+0x200>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4e      	ldr	r2, [pc, #312]	; (8001730 <HAL_GPIO_Init+0x314>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00d      	beq.n	8001618 <HAL_GPIO_Init+0x1fc>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4d      	ldr	r2, [pc, #308]	; (8001734 <HAL_GPIO_Init+0x318>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_Init+0x1f8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a4c      	ldr	r2, [pc, #304]	; (8001738 <HAL_GPIO_Init+0x31c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_Init+0x1f4>
 800160c:	2307      	movs	r3, #7
 800160e:	e00e      	b.n	800162e <HAL_GPIO_Init+0x212>
 8001610:	2308      	movs	r3, #8
 8001612:	e00c      	b.n	800162e <HAL_GPIO_Init+0x212>
 8001614:	2306      	movs	r3, #6
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x212>
 8001618:	2305      	movs	r3, #5
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x212>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x212>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x212>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x212>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x212>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x300>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164c:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_GPIO_Init+0x320>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001670:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_GPIO_Init+0x320>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_GPIO_Init+0x320>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169a:	4a28      	ldr	r2, [pc, #160]	; (800173c <HAL_GPIO_Init+0x320>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016a0:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_GPIO_Init+0x320>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c4:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_GPIO_Init+0x320>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_GPIO_Init+0x320>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_GPIO_Init+0x320>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae91 	bne.w	800142c <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	48001800 	.word	0x48001800
 8001738:	48001c00 	.word	0x48001c00
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800175c:	e002      	b.n	8001764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001772:	b08f      	sub	sp, #60	; 0x3c
 8001774:	af0a      	add	r7, sp, #40	; 0x28
 8001776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e116      	b.n	80019b0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fbcd 	bl	8000f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fd59 	bl	8004278 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	687e      	ldr	r6, [r7, #4]
 80017ce:	466d      	mov	r5, sp
 80017d0:	f106 0410 	add.w	r4, r6, #16
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80017e4:	1d33      	adds	r3, r6, #4
 80017e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e8:	6838      	ldr	r0, [r7, #0]
 80017ea:	f002 fd19 	bl	8004220 <USB_CoreInit>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0d7      	b.n	80019b0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fd47 	bl	800429a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e04a      	b.n	80018a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	333d      	adds	r3, #61	; 0x3d
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	333c      	adds	r3, #60	; 0x3c
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	b298      	uxth	r0, r3
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	4602      	mov	r2, r0
 8001850:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	333f      	adds	r3, #63	; 0x3f
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	3344      	adds	r3, #68	; 0x44
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	3348      	adds	r3, #72	; 0x48
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	3350      	adds	r3, #80	; 0x50
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	3301      	adds	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3af      	bcc.n	8001812 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e044      	b.n	8001942 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	3301      	adds	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	d3b5      	bcc.n	80018b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	687e      	ldr	r6, [r7, #4]
 8001954:	466d      	mov	r5, sp
 8001956:	f106 0410 	add.w	r4, r6, #16
 800195a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001966:	e885 0003 	stmia.w	r5, {r0, r1}
 800196a:	1d33      	adds	r3, r6, #4
 800196c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196e:	6838      	ldr	r0, [r7, #0]
 8001970:	f002 fce0 	bl	8004334 <USB_DevInit>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2202      	movs	r2, #2
 800197e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e014      	b.n	80019b0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2b01      	cmp	r3, #1
 800199c:	d102      	bne.n	80019a4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f80a 	bl	80019b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fe88 	bl	80046be <USB_DevDisconnect>

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ea:	f043 0303 	orr.w	r3, r3, #3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a10:	d102      	bne.n	8001a18 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a16:	e00b      	b.n	8001a30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a26:	d102      	bne.n	8001a2e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2c:	e000      	b.n	8001a30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a2e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40007000 	.word	0x40007000

08001a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d141      	bne.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d131      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a62:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a74:	4a41      	ldr	r2, [pc, #260]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a7c:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2232      	movs	r2, #50	; 0x32
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a3f      	ldr	r2, [pc, #252]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9b      	lsrs	r3, r3, #18
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a92:	e002      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	d102      	bne.n	8001aae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f2      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aae:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d158      	bne.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e057      	b.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac6:	4a2d      	ldr	r2, [pc, #180]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ad0:	e04d      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad8:	d141      	bne.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d131      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aee:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b00:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2232      	movs	r2, #50	; 0x32
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	0c9b      	lsrs	r3, r3, #18
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1e:	e002      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b32:	d102      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f2      	bne.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d112      	bne.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e011      	b.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b5c:	e007      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	20000000 	.word	0x20000000
 8001b84:	431bde83 	.word	0x431bde83

08001b88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b96:	6053      	str	r3, [r2, #4]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6053      	str	r3, [r2, #4]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40007000 	.word	0x40007000

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f000 bc16 	b.w	8002408 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bdc:	4ba0      	ldr	r3, [pc, #640]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be6:	4b9e      	ldr	r3, [pc, #632]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80e4 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <HAL_RCC_OscConfig+0x4c>
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	f040 808b 	bne.w	8001d22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	f040 8087 	bne.w	8001d22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c14:	4b92      	ldr	r3, [pc, #584]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x64>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e3ed      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1a      	ldr	r2, [r3, #32]
 8001c30:	4b8b      	ldr	r3, [pc, #556]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_RCC_OscConfig+0x7e>
 8001c3c:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c44:	e005      	b.n	8001c52 <HAL_RCC_OscConfig+0x8a>
 8001c46:	4b86      	ldr	r3, [pc, #536]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d223      	bcs.n	8001c9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fdca 	bl	80027f4 <RCC_SetFlashLatencyFromMSIRange>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e3ce      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6a:	4b7d      	ldr	r3, [pc, #500]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7c      	ldr	r2, [pc, #496]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4977      	ldr	r1, [pc, #476]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c88:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	4972      	ldr	r1, [pc, #456]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e025      	b.n	8001cea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9e:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6f      	ldr	r2, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	496a      	ldr	r1, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	4965      	ldr	r1, [pc, #404]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fd8a 	bl	80027f4 <RCC_SetFlashLatencyFromMSIRange>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e38e      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cea:	f000 fcbf 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	495a      	ldr	r1, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x29c>)
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_OscConfig+0x2a0>)
 8001d08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d0a:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x2a4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fa1e 	bl	8001150 <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d052      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	e372      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d032      	beq.n	8001d90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fa5b 	bl	80011f0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fa57 	bl	80011f0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e35b      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5c:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a3f      	ldr	r2, [pc, #252]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	493a      	ldr	r1, [pc, #232]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7a:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4935      	ldr	r1, [pc, #212]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
 8001d8e:	e01a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d90:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fa28 	bl	80011f0 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da4:	f7ff fa24 	bl	80011f0 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e328      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1dc>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d073      	beq.n	8001eba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_OscConfig+0x21c>
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d10e      	bne.n	8001dfc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d063      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d15f      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e305      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x24c>
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0x288>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x270>
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x288>
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <HAL_RCC_OscConfig+0x298>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01b      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff f9ca 	bl	80011f0 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	e010      	b.n	8001e82 <HAL_RCC_OscConfig+0x2ba>
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08004978 	.word	0x08004978
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff f9be 	bl	80011f0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e2c2      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	4baf      	ldr	r3, [pc, #700]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x2a8>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f9ae 	bl	80011f0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f9aa 	bl	80011f0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e2ae      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	4ba5      	ldr	r3, [pc, #660]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2d0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d060      	beq.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x310>
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d119      	bne.n	8001f06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d116      	bne.n	8001f06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed8:	4b99      	ldr	r3, [pc, #612]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x328>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e28b      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	4b93      	ldr	r3, [pc, #588]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	4990      	ldr	r1, [pc, #576]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f04:	e040      	b.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d023      	beq.n	8001f56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0e:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a8b      	ldr	r2, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f969 	bl	80011f0 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f22:	f7ff f965 	bl	80011f0 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e269      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	497c      	ldr	r1, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e018      	b.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b7a      	ldr	r3, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a79      	ldr	r2, [pc, #484]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff f945 	bl	80011f0 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f941 	bl	80011f0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e245      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f7c:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d03c      	beq.n	800200e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	4a67      	ldr	r2, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7ff f920 	bl	80011f0 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7ff f91c 	bl	80011f0 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e220      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc6:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x3ec>
 8001fd4:	e01b      	b.n	800200e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe6:	f7ff f903 	bl	80011f0 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fee:	f7ff f8ff 	bl	80011f0 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e203      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ef      	bne.n	8001fee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80a6 	beq.w	8002168 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002020:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a43      	ldr	r2, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002044:	2301      	movs	r3, #1
 8002046:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_OscConfig+0x57c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d118      	bne.n	8002086 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x57c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a3a      	ldr	r2, [pc, #232]	; (8002144 <HAL_RCC_OscConfig+0x57c>)
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002060:	f7ff f8c6 	bl	80011f0 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002068:	f7ff f8c2 	bl	80011f0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1c6      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCC_OscConfig+0x57c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d108      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4d8>
 800208e:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800209e:	e024      	b.n	80020ea <HAL_RCC_OscConfig+0x522>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d110      	bne.n	80020ca <HAL_RCC_OscConfig+0x502>
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a24      	ldr	r2, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a20      	ldr	r2, [pc, #128]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c8:	e00f      	b.n	80020ea <HAL_RCC_OscConfig+0x522>
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	4a17      	ldr	r2, [pc, #92]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 80020e2:	f023 0304 	bic.w	r3, r3, #4
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff f87d 	bl	80011f0 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff f879 	bl	80011f0 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e17b      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x578>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ed      	beq.n	80020fa <HAL_RCC_OscConfig+0x532>
 800211e:	e01a      	b.n	8002156 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7ff f866 	bl	80011f0 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002126:	e00f      	b.n	8002148 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff f862 	bl	80011f0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d906      	bls.n	8002148 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e164      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002148:	4ba8      	ldr	r3, [pc, #672]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1e8      	bne.n	8002128 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002156:	7ffb      	ldrb	r3, [r7, #31]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215c:	4ba3      	ldr	r3, [pc, #652]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4aa2      	ldr	r2, [pc, #648]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d03c      	beq.n	80021ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800217c:	4b9b      	ldr	r3, [pc, #620]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800217e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002182:	4a9a      	ldr	r2, [pc, #616]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff f830 	bl	80011f0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002194:	f7ff f82c 	bl	80011f0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e130      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021a6:	4b91      	ldr	r3, [pc, #580]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80021a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ef      	beq.n	8002194 <HAL_RCC_OscConfig+0x5cc>
 80021b4:	e01b      	b.n	80021ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021b6:	4b8d      	ldr	r3, [pc, #564]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80021b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021bc:	4a8b      	ldr	r2, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7ff f813 	bl	80011f0 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ce:	f7ff f80f 	bl	80011f0 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e113      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e0:	4b82      	ldr	r3, [pc, #520]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80021e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ef      	bne.n	80021ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8107 	beq.w	8002406 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	f040 80cb 	bne.w	8002398 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002202:	4b7a      	ldr	r3, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0203 	and.w	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	429a      	cmp	r2, r3
 8002214:	d12c      	bne.n	8002270 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	3b01      	subs	r3, #1
 8002222:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d123      	bne.n	8002270 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d11b      	bne.n	8002270 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d113      	bne.n	8002270 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	3b01      	subs	r3, #1
 8002256:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d109      	bne.n	8002270 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	3b01      	subs	r3, #1
 800226a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d06d      	beq.n	800234c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d068      	beq.n	8002348 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002276:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002282:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0ba      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002292:	4b56      	ldr	r3, [pc, #344]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a55      	ldr	r2, [pc, #340]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800229e:	f7fe ffa7 	bl	80011f0 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7fe ffa3 	bl	80011f0 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0a7      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c4:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCC_OscConfig+0x828>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022d4:	3a01      	subs	r2, #1
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	4311      	orrs	r1, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022de:	0212      	lsls	r2, r2, #8
 80022e0:	4311      	orrs	r1, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022e6:	0852      	lsrs	r2, r2, #1
 80022e8:	3a01      	subs	r2, #1
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	4311      	orrs	r1, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022f2:	0852      	lsrs	r2, r2, #1
 80022f4:	3a01      	subs	r2, #1
 80022f6:	0652      	lsls	r2, r2, #25
 80022f8:	4311      	orrs	r1, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022fe:	06d2      	lsls	r2, r2, #27
 8002300:	430a      	orrs	r2, r1
 8002302:	493a      	ldr	r1, [pc, #232]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002304:	4313      	orrs	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002308:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a37      	ldr	r2, [pc, #220]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002312:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a34      	ldr	r2, [pc, #208]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800231a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002320:	f7fe ff66 	bl	80011f0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe ff62 	bl	80011f0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e066      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002346:	e05e      	b.n	8002406 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e05d      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d156      	bne.n	8002406 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a23      	ldr	r2, [pc, #140]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002362:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a20      	ldr	r2, [pc, #128]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800236a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800236e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002370:	f7fe ff3e 	bl	80011f0 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe ff3a 	bl	80011f0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e03e      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x7b0>
 8002396:	e036      	b.n	8002406 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d031      	beq.n	8002402 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80023a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80023bc:	f023 0303 	bic.w	r3, r3, #3
 80023c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_OscConfig+0x824>)
 80023c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe ff0d 	bl	80011f0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d8:	e00c      	b.n	80023f4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe ff09 	bl	80011f0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d905      	bls.n	80023f4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e00d      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_OscConfig+0x848>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ec      	bne.n	80023da <HAL_RCC_OscConfig+0x812>
 8002400:	e001      	b.n	8002406 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e10f      	b.n	800264c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b89      	ldr	r3, [pc, #548]	; (8002654 <HAL_RCC_ClockConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b86      	ldr	r3, [pc, #536]	; (8002654 <HAL_RCC_ClockConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 020f 	bic.w	r2, r3, #15
 8002442:	4984      	ldr	r1, [pc, #528]	; (8002654 <HAL_RCC_ClockConfig+0x240>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b82      	ldr	r3, [pc, #520]	; (8002654 <HAL_RCC_ClockConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0f7      	b.n	800264c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8089 	beq.w	800257c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d133      	bne.n	80024da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	4b79      	ldr	r3, [pc, #484]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0e4      	b.n	800264c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002482:	f000 fa11 	bl	80028a8 <RCC_GetSysClockFreqFromPLLSource>
 8002486:	4603      	mov	r3, r0
 8002488:	4a74      	ldr	r2, [pc, #464]	; (800265c <HAL_RCC_ClockConfig+0x248>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d955      	bls.n	800253a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800249a:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024a2:	4a6d      	ldr	r2, [pc, #436]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e044      	b.n	800253a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03e      	beq.n	800253a <HAL_RCC_ClockConfig+0x126>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d13a      	bne.n	800253a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024c4:	4b64      	ldr	r3, [pc, #400]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024cc:	4a62      	ldr	r2, [pc, #392]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e02f      	b.n	800253a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d115      	bne.n	800251a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0ac      	b.n	800264c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fa:	4b57      	ldr	r3, [pc, #348]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0a0      	b.n	800264c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e098      	b.n	800264c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800251a:	f000 f8a7 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800251e:	4603      	mov	r3, r0
 8002520:	4a4e      	ldr	r2, [pc, #312]	; (800265c <HAL_RCC_ClockConfig+0x248>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d909      	bls.n	800253a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800252e:	4a4a      	ldr	r2, [pc, #296]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 8002530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4944      	ldr	r1, [pc, #272]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fe50 	bl	80011f0 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fe4c 	bl	80011f0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e070      	b.n	800264c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b33      	ldr	r3, [pc, #204]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4930      	ldr	r1, [pc, #192]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
 800259a:	e008      	b.n	80025ae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b80      	cmp	r3, #128	; 0x80
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4a2c      	ldr	r2, [pc, #176]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80025a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCC_ClockConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d210      	bcs.n	80025de <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_RCC_ClockConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 020f 	bic.w	r2, r3, #15
 80025c4:	4923      	ldr	r1, [pc, #140]	; (8002654 <HAL_RCC_ClockConfig+0x240>)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_ClockConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e036      	b.n	800264c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4918      	ldr	r1, [pc, #96]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4910      	ldr	r1, [pc, #64]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800261c:	f000 f826 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCC_ClockConfig+0x244>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <HAL_RCC_ClockConfig+0x24c>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_RCC_ClockConfig+0x250>)
 800263a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_RCC_ClockConfig+0x254>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fd85 	bl	8001150 <HAL_InitTick>
 8002646:	4603      	mov	r3, r0
 8002648:	73fb      	strb	r3, [r7, #15]

  return status;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40022000 	.word	0x40022000
 8002658:	40021000 	.word	0x40021000
 800265c:	04c4b400 	.word	0x04c4b400
 8002660:	08004978 	.word	0x08004978
 8002664:	20000000 	.word	0x20000000
 8002668:	20000004 	.word	0x20000004

0800266c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d121      	bne.n	80026de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d11e      	bne.n	80026de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	e005      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026c8:	4a2b      	ldr	r2, [pc, #172]	; (8002778 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCC_GetSysClockFreq+0x110>)
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e004      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f0:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_RCC_GetSysClockFreq+0x114>)
 80026f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d134      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0xa6>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d003      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0xac>
 8002710:	e005      	b.n	800271e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002712:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_RCC_GetSysClockFreq+0x110>)
 8002714:	617b      	str	r3, [r7, #20]
      break;
 8002716:	e005      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_GetSysClockFreq+0x114>)
 800271a:	617b      	str	r3, [r7, #20]
      break;
 800271c:	e002      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	617b      	str	r3, [r7, #20]
      break;
 8002722:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	3301      	adds	r3, #1
 8002730:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	fb02 f203 	mul.w	r2, r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	0e5b      	lsrs	r3, r3, #25
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	3301      	adds	r3, #1
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002764:	69bb      	ldr	r3, [r7, #24]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	08004990 	.word	0x08004990
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200

08002784 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a0:	f7ff fff0 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4904      	ldr	r1, [pc, #16]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08004988 	.word	0x08004988

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027cc:	f7ff ffda 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0adb      	lsrs	r3, r3, #11
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4904      	ldr	r1, [pc, #16]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08004988 	.word	0x08004988

080027f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800280c:	f7ff f8f8 	bl	8001a00 <HAL_PWREx_GetVoltageRange>
 8002810:	6178      	str	r0, [r7, #20]
 8002812:	e014      	b.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281e:	6593      	str	r3, [r2, #88]	; 0x58
 8002820:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800282c:	f7ff f8e8 	bl	8001a00 <HAL_PWREx_GetVoltageRange>
 8002830:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002844:	d10b      	bne.n	800285e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d913      	bls.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2ba0      	cmp	r3, #160	; 0xa0
 8002850:	d902      	bls.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002852:	2302      	movs	r3, #2
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	e00d      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002858:	2301      	movs	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	e00a      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b7f      	cmp	r3, #127	; 0x7f
 8002862:	d902      	bls.n	800286a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002864:	2302      	movs	r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	e004      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b70      	cmp	r3, #112	; 0x70
 800286e:	d101      	bne.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 020f 	bic.w	r2, r3, #15
 800287c:	4909      	ldr	r1, [pc, #36]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40022000 	.word	0x40022000

080028a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80028b2:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d118      	bne.n	80028f0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028be:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e005      	b.n	80028e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028da:	4b23      	ldr	r3, [pc, #140]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028e6:	4a21      	ldr	r2, [pc, #132]	; (800296c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ee:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d003      	beq.n	8002908 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d003      	beq.n	800290e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002906:	e005      	b.n	8002914 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800290a:	613b      	str	r3, [r7, #16]
    break;
 800290c:	e005      	b.n	800291a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002910:	613b      	str	r3, [r7, #16]
    break;
 8002912:	e002      	b.n	800291a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
    break;
 8002918:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	3301      	adds	r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	fb02 f203 	mul.w	r2, r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0e5b      	lsrs	r3, r3, #25
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800295a:	683b      	ldr	r3, [r7, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40021000 	.word	0x40021000
 800296c:	08004990 	.word	0x08004990
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200

08002978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002980:	2300      	movs	r3, #0
 8002982:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002984:	2300      	movs	r3, #0
 8002986:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002990:	2b00      	cmp	r3, #0
 8002992:	d040      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d02a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d825      	bhi.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029a0:	2b60      	cmp	r3, #96	; 0x60
 80029a2:	d026      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029a4:	2b60      	cmp	r3, #96	; 0x60
 80029a6:	d821      	bhi.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d006      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d81d      	bhi.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d010      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x62>
 80029b8:	e018      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029ba:	4b89      	ldr	r3, [pc, #548]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4a88      	ldr	r2, [pc, #544]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c6:	e015      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fb02 	bl	8002fd8 <RCCEx_PLLSAI1_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d8:	e00c      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3320      	adds	r3, #32
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fbed 	bl	80031c0 <RCCEx_PLLSAI2_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ea:	e003      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	74fb      	strb	r3, [r7, #19]
      break;
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80029f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029fa:	4b79      	ldr	r3, [pc, #484]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a00:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a08:	4975      	ldr	r1, [pc, #468]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a10:	e001      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d047      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2a:	d030      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d82a      	bhi.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a36:	d02a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a3c:	d824      	bhi.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a42:	d008      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a48:	d81e      	bhi.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a52:	d010      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a54:	e018      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a56:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4a61      	ldr	r2, [pc, #388]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a62:	e015      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fab4 	bl	8002fd8 <RCCEx_PLLSAI1_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a74:	e00c      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3320      	adds	r3, #32
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fb9f 	bl	80031c0 <RCCEx_PLLSAI2_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a86:	e003      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	74fb      	strb	r3, [r7, #19]
      break;
 8002a8c:	e000      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a96:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	494e      	ldr	r1, [pc, #312]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002aac:	e001      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 809f 	beq.w	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	4a40      	ldr	r2, [pc, #256]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a3a      	ldr	r2, [pc, #232]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b02:	f7fe fb75 	bl	80011f0 <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b08:	e009      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7fe fb71 	bl	80011f0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d902      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b1c:	e005      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ef      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d15b      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01f      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d019      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b7a:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d016      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fb30 	bl	80011f0 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b92:	e00b      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fb2c 	bl	80011f0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d902      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	74fb      	strb	r3, [r7, #19]
            break;
 8002baa:	e006      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0ec      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bd8:	e008      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	74bb      	strb	r3, [r7, #18]
 8002bde:	e005      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bec:	7c7b      	ldrb	r3, [r7, #17]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4ba0      	ldr	r3, [pc, #640]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a9f      	ldr	r2, [pc, #636]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c0a:	4b9a      	ldr	r3, [pc, #616]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f023 0203 	bic.w	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	4996      	ldr	r1, [pc, #600]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c2c:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 020c 	bic.w	r2, r3, #12
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	498e      	ldr	r1, [pc, #568]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c4e:	4b89      	ldr	r3, [pc, #548]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	4985      	ldr	r1, [pc, #532]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c70:	4b80      	ldr	r3, [pc, #512]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	497d      	ldr	r1, [pc, #500]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c92:	4b78      	ldr	r3, [pc, #480]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	4974      	ldr	r1, [pc, #464]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	496c      	ldr	r1, [pc, #432]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce4:	4963      	ldr	r1, [pc, #396]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d06:	495b      	ldr	r1, [pc, #364]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d1a:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	4952      	ldr	r1, [pc, #328]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	494a      	ldr	r1, [pc, #296]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d5e:	4b45      	ldr	r3, [pc, #276]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	4941      	ldr	r1, [pc, #260]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d80:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8e:	4939      	ldr	r1, [pc, #228]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d028      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db0:	4930      	ldr	r1, [pc, #192]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dcc:	60d3      	str	r3, [r2, #12]
 8002dce:	e011      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2101      	movs	r1, #1
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f8f9 	bl	8002fd8 <RCCEx_PLLSAI1_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d04d      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e08:	d108      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e16:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e1a:	e012      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e22:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e28:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3a:	490e      	ldr	r1, [pc, #56]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e56:	60d3      	str	r3, [r2, #12]
 8002e58:	e020      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e62:	d109      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a02      	ldr	r2, [pc, #8]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	60d3      	str	r3, [r2, #12]
 8002e70:	e014      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f8a5 	bl	8002fd8 <RCCEx_PLLSAI1_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d028      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb6:	4947      	ldr	r1, [pc, #284]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
 8002ed4:	e011      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ede:	d10c      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f876 	bl	8002fd8 <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01e      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f06:	4b33      	ldr	r3, [pc, #204]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f16:	492f      	ldr	r1, [pc, #188]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f851 	bl	8002fd8 <RCCEx_PLLSAI1_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f56:	f023 0204 	bic.w	r2, r3, #4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f60:	491c      	ldr	r1, [pc, #112]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f7a:	f023 0218 	bic.w	r2, r3, #24
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	4913      	ldr	r1, [pc, #76]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa8:	490a      	ldr	r1, [pc, #40]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fe6:	4b72      	ldr	r3, [pc, #456]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00e      	beq.n	8003010 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ff2:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0203 	and.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d103      	bne.n	800300a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
       ||
 8003006:	2b00      	cmp	r3, #0
 8003008:	d142      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e03f      	b.n	8003090 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d018      	beq.n	800304a <RCCEx_PLLSAI1_Config+0x72>
 8003018:	2b03      	cmp	r3, #3
 800301a:	d825      	bhi.n	8003068 <RCCEx_PLLSAI1_Config+0x90>
 800301c:	2b01      	cmp	r3, #1
 800301e:	d002      	beq.n	8003026 <RCCEx_PLLSAI1_Config+0x4e>
 8003020:	2b02      	cmp	r3, #2
 8003022:	d009      	beq.n	8003038 <RCCEx_PLLSAI1_Config+0x60>
 8003024:	e020      	b.n	8003068 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003026:	4b62      	ldr	r3, [pc, #392]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11d      	bne.n	800306e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003036:	e01a      	b.n	800306e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003038:	4b5d      	ldr	r3, [pc, #372]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003048:	e013      	b.n	8003072 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800304a:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003056:	4b56      	ldr	r3, [pc, #344]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003066:	e006      	b.n	8003076 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      break;
 800306c:	e004      	b.n	8003078 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800306e:	bf00      	nop
 8003070:	e002      	b.n	8003078 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003076:	bf00      	nop
    }

    if(status == HAL_OK)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800307e:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4949      	ldr	r1, [pc, #292]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800308c:	4313      	orrs	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 8086 	bne.w	80031a4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003098:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a44      	ldr	r2, [pc, #272]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800309e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a4:	f7fe f8a4 	bl	80011f0 <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030aa:	e009      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ac:	f7fe f8a0 	bl	80011f0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	73fb      	strb	r3, [r7, #15]
        break;
 80030be:	e005      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030c0:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ef      	bne.n	80030ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d168      	bne.n	80031a4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d113      	bne.n	8003100 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6892      	ldr	r2, [r2, #8]
 80030e4:	0211      	lsls	r1, r2, #8
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68d2      	ldr	r2, [r2, #12]
 80030ea:	06d2      	lsls	r2, r2, #27
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6852      	ldr	r2, [r2, #4]
 80030f2:	3a01      	subs	r2, #1
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	430a      	orrs	r2, r1
 80030f8:	492d      	ldr	r1, [pc, #180]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	610b      	str	r3, [r1, #16]
 80030fe:	e02d      	b.n	800315c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d115      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6892      	ldr	r2, [r2, #8]
 8003112:	0211      	lsls	r1, r2, #8
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6912      	ldr	r2, [r2, #16]
 8003118:	0852      	lsrs	r2, r2, #1
 800311a:	3a01      	subs	r2, #1
 800311c:	0552      	lsls	r2, r2, #21
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6852      	ldr	r2, [r2, #4]
 8003124:	3a01      	subs	r2, #1
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	430a      	orrs	r2, r1
 800312a:	4921      	ldr	r1, [pc, #132]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800312c:	4313      	orrs	r3, r2
 800312e:	610b      	str	r3, [r1, #16]
 8003130:	e014      	b.n	800315c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003132:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6892      	ldr	r2, [r2, #8]
 800313e:	0211      	lsls	r1, r2, #8
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6952      	ldr	r2, [r2, #20]
 8003144:	0852      	lsrs	r2, r2, #1
 8003146:	3a01      	subs	r2, #1
 8003148:	0652      	lsls	r2, r2, #25
 800314a:	4311      	orrs	r1, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	3a01      	subs	r2, #1
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	430a      	orrs	r2, r1
 8003156:	4916      	ldr	r1, [pc, #88]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003158:	4313      	orrs	r3, r2
 800315a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003166:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe f842 	bl	80011f0 <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800316e:	e009      	b.n	8003184 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003170:	f7fe f83e 	bl	80011f0 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d902      	bls.n	8003184 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	73fb      	strb	r3, [r7, #15]
          break;
 8003182:	e005      	b.n	8003190 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ef      	beq.n	8003170 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	4904      	ldr	r1, [pc, #16]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	07ff800f 	.word	0x07ff800f
 80031b8:	ff9f800f 	.word	0xff9f800f
 80031bc:	f9ff800f 	.word	0xf9ff800f

080031c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ce:	4b72      	ldr	r3, [pc, #456]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00e      	beq.n	80031f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031da:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0203 	and.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d103      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
       ||
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d142      	bne.n	8003278 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	e03f      	b.n	8003278 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d018      	beq.n	8003232 <RCCEx_PLLSAI2_Config+0x72>
 8003200:	2b03      	cmp	r3, #3
 8003202:	d825      	bhi.n	8003250 <RCCEx_PLLSAI2_Config+0x90>
 8003204:	2b01      	cmp	r3, #1
 8003206:	d002      	beq.n	800320e <RCCEx_PLLSAI2_Config+0x4e>
 8003208:	2b02      	cmp	r3, #2
 800320a:	d009      	beq.n	8003220 <RCCEx_PLLSAI2_Config+0x60>
 800320c:	e020      	b.n	8003250 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800320e:	4b62      	ldr	r3, [pc, #392]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11d      	bne.n	8003256 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321e:	e01a      	b.n	8003256 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003220:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003230:	e013      	b.n	800325a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003232:	4b59      	ldr	r3, [pc, #356]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800323e:	4b56      	ldr	r3, [pc, #344]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800324e:	e006      	b.n	800325e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e004      	b.n	8003260 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003256:	bf00      	nop
 8003258:	e002      	b.n	8003260 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800325e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003266:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4949      	ldr	r1, [pc, #292]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 8086 	bne.w	800338c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003280:	4b45      	ldr	r3, [pc, #276]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a44      	ldr	r2, [pc, #272]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328c:	f7fd ffb0 	bl	80011f0 <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003292:	e009      	b.n	80032a8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003294:	f7fd ffac 	bl	80011f0 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d902      	bls.n	80032a8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	73fb      	strb	r3, [r7, #15]
        break;
 80032a6:	e005      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032a8:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ef      	bne.n	8003294 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d168      	bne.n	800338c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d113      	bne.n	80032e8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	4b35      	ldr	r3, [pc, #212]	; (800339c <RCCEx_PLLSAI2_Config+0x1dc>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6892      	ldr	r2, [r2, #8]
 80032cc:	0211      	lsls	r1, r2, #8
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	06d2      	lsls	r2, r2, #27
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6852      	ldr	r2, [r2, #4]
 80032da:	3a01      	subs	r2, #1
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	430a      	orrs	r2, r1
 80032e0:	492d      	ldr	r1, [pc, #180]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	614b      	str	r3, [r1, #20]
 80032e6:	e02d      	b.n	8003344 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d115      	bne.n	800331a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ee:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <RCCEx_PLLSAI2_Config+0x1e0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6892      	ldr	r2, [r2, #8]
 80032fa:	0211      	lsls	r1, r2, #8
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6912      	ldr	r2, [r2, #16]
 8003300:	0852      	lsrs	r2, r2, #1
 8003302:	3a01      	subs	r2, #1
 8003304:	0552      	lsls	r2, r2, #21
 8003306:	4311      	orrs	r1, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6852      	ldr	r2, [r2, #4]
 800330c:	3a01      	subs	r2, #1
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	430a      	orrs	r2, r1
 8003312:	4921      	ldr	r1, [pc, #132]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003314:	4313      	orrs	r3, r2
 8003316:	614b      	str	r3, [r1, #20]
 8003318:	e014      	b.n	8003344 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800331a:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6892      	ldr	r2, [r2, #8]
 8003326:	0211      	lsls	r1, r2, #8
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6952      	ldr	r2, [r2, #20]
 800332c:	0852      	lsrs	r2, r2, #1
 800332e:	3a01      	subs	r2, #1
 8003330:	0652      	lsls	r2, r2, #25
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	3a01      	subs	r2, #1
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	430a      	orrs	r2, r1
 800333e:	4916      	ldr	r1, [pc, #88]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003340:	4313      	orrs	r3, r2
 8003342:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd ff4e 	bl	80011f0 <HAL_GetTick>
 8003354:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003356:	e009      	b.n	800336c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003358:	f7fd ff4a 	bl	80011f0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d902      	bls.n	800336c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	73fb      	strb	r3, [r7, #15]
          break;
 800336a:	e005      	b.n	8003378 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ef      	beq.n	8003358 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	4904      	ldr	r1, [pc, #16]	; (8003398 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	07ff800f 	.word	0x07ff800f
 80033a0:	ff9f800f 	.word	0xff9f800f
 80033a4:	f9ff800f 	.word	0xf9ff800f

080033a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e042      	b.n	8003440 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fd fcc9 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2224      	movs	r2, #36	; 0x24
 80033d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f998 	bl	8003720 <UART_SetConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e022      	b.n	8003440 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fc54 	bl	8003cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fcdb 	bl	8003df4 <UART_CheckIdleState>
 800343e:	4603      	mov	r3, r0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800345e:	2b20      	cmp	r3, #32
 8003460:	f040 8084 	bne.w	800356c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_UART_Transmit+0x28>
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e07c      	b.n	800356e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_UART_Transmit+0x3a>
 800347e:	2302      	movs	r3, #2
 8003480:	e075      	b.n	800356e <HAL_UART_Transmit+0x126>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349a:	f7fd fea9 	bl	80011f0 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b8:	d108      	bne.n	80034cc <HAL_UART_Transmit+0x84>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	e003      	b.n	80034d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80034dc:	e02d      	b.n	800353a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	2180      	movs	r1, #128	; 0x80
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fcce 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e03a      	b.n	800356e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800350a:	b292      	uxth	r2, r2
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3302      	adds	r3, #2
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	e008      	b.n	8003528 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b292      	uxth	r2, r2
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3301      	adds	r3, #1
 8003526:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1cb      	bne.n	80034de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	2140      	movs	r1, #64	; 0x40
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fc9a 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e006      	b.n	800356e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b08a      	sub	sp, #40	; 0x28
 800357a:	af02      	add	r7, sp, #8
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	2b20      	cmp	r3, #32
 800358e:	f040 80c1 	bne.w	8003714 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_UART_Receive+0x28>
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0b9      	b.n	8003716 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_UART_Receive+0x3a>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0b2      	b.n	8003716 <HAL_UART_Receive+0x1a0>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2222      	movs	r2, #34	; 0x22
 80035c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ce:	f7fd fe0f 	bl	80011f0 <HAL_GetTick>
 80035d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ec:	d10e      	bne.n	800360c <HAL_UART_Receive+0x96>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <HAL_UART_Receive+0x8c>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003600:	e02d      	b.n	800365e <HAL_UART_Receive+0xe8>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	22ff      	movs	r2, #255	; 0xff
 8003606:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800360a:	e028      	b.n	800365e <HAL_UART_Receive+0xe8>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10d      	bne.n	8003630 <HAL_UART_Receive+0xba>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <HAL_UART_Receive+0xb0>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	22ff      	movs	r2, #255	; 0xff
 8003620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003624:	e01b      	b.n	800365e <HAL_UART_Receive+0xe8>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	227f      	movs	r2, #127	; 0x7f
 800362a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800362e:	e016      	b.n	800365e <HAL_UART_Receive+0xe8>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003638:	d10d      	bne.n	8003656 <HAL_UART_Receive+0xe0>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <HAL_UART_Receive+0xd6>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	227f      	movs	r2, #127	; 0x7f
 8003646:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800364a:	e008      	b.n	800365e <HAL_UART_Receive+0xe8>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	223f      	movs	r2, #63	; 0x3f
 8003650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003654:	e003      	b.n	800365e <HAL_UART_Receive+0xe8>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003664:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	d108      	bne.n	8003682 <HAL_UART_Receive+0x10c>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d104      	bne.n	8003682 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	e003      	b.n	800368a <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003692:	e033      	b.n	80036fc <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2200      	movs	r2, #0
 800369c:	2120      	movs	r1, #32
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fbf3 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e033      	b.n	8003716 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10c      	bne.n	80036ce <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	8a7b      	ldrh	r3, [r7, #18]
 80036be:	4013      	ands	r3, r2
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	3302      	adds	r3, #2
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e00d      	b.n	80036ea <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	8a7b      	ldrh	r3, [r7, #18]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	4013      	ands	r3, r2
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1c5      	bne.n	8003694 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4313      	orrs	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4bb1      	ldr	r3, [pc, #708]	; (8003a10 <UART_SetConfig+0x2f0>)
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	69f9      	ldr	r1, [r7, #28]
 8003754:	430b      	orrs	r3, r1
 8003756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4aa6      	ldr	r2, [pc, #664]	; (8003a14 <UART_SetConfig+0x2f4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	4313      	orrs	r3, r2
 8003786:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003792:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	69f9      	ldr	r1, [r7, #28]
 800379c:	430b      	orrs	r3, r1
 800379e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	f023 010f 	bic.w	r1, r3, #15
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a97      	ldr	r2, [pc, #604]	; (8003a18 <UART_SetConfig+0x2f8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d120      	bne.n	8003802 <UART_SetConfig+0xe2>
 80037c0:	4b96      	ldr	r3, [pc, #600]	; (8003a1c <UART_SetConfig+0x2fc>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d816      	bhi.n	80037fc <UART_SetConfig+0xdc>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0xb4>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037f1 	.word	0x080037f1
 80037dc:	080037eb 	.word	0x080037eb
 80037e0:	080037f7 	.word	0x080037f7
 80037e4:	2301      	movs	r3, #1
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	e0e7      	b.n	80039ba <UART_SetConfig+0x29a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	76fb      	strb	r3, [r7, #27]
 80037ee:	e0e4      	b.n	80039ba <UART_SetConfig+0x29a>
 80037f0:	2304      	movs	r3, #4
 80037f2:	76fb      	strb	r3, [r7, #27]
 80037f4:	e0e1      	b.n	80039ba <UART_SetConfig+0x29a>
 80037f6:	2308      	movs	r3, #8
 80037f8:	76fb      	strb	r3, [r7, #27]
 80037fa:	e0de      	b.n	80039ba <UART_SetConfig+0x29a>
 80037fc:	2310      	movs	r3, #16
 80037fe:	76fb      	strb	r3, [r7, #27]
 8003800:	e0db      	b.n	80039ba <UART_SetConfig+0x29a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a86      	ldr	r2, [pc, #536]	; (8003a20 <UART_SetConfig+0x300>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d132      	bne.n	8003872 <UART_SetConfig+0x152>
 800380c:	4b83      	ldr	r3, [pc, #524]	; (8003a1c <UART_SetConfig+0x2fc>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d828      	bhi.n	800386c <UART_SetConfig+0x14c>
 800381a:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <UART_SetConfig+0x100>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003855 	.word	0x08003855
 8003824:	0800386d 	.word	0x0800386d
 8003828:	0800386d 	.word	0x0800386d
 800382c:	0800386d 	.word	0x0800386d
 8003830:	08003861 	.word	0x08003861
 8003834:	0800386d 	.word	0x0800386d
 8003838:	0800386d 	.word	0x0800386d
 800383c:	0800386d 	.word	0x0800386d
 8003840:	0800385b 	.word	0x0800385b
 8003844:	0800386d 	.word	0x0800386d
 8003848:	0800386d 	.word	0x0800386d
 800384c:	0800386d 	.word	0x0800386d
 8003850:	08003867 	.word	0x08003867
 8003854:	2300      	movs	r3, #0
 8003856:	76fb      	strb	r3, [r7, #27]
 8003858:	e0af      	b.n	80039ba <UART_SetConfig+0x29a>
 800385a:	2302      	movs	r3, #2
 800385c:	76fb      	strb	r3, [r7, #27]
 800385e:	e0ac      	b.n	80039ba <UART_SetConfig+0x29a>
 8003860:	2304      	movs	r3, #4
 8003862:	76fb      	strb	r3, [r7, #27]
 8003864:	e0a9      	b.n	80039ba <UART_SetConfig+0x29a>
 8003866:	2308      	movs	r3, #8
 8003868:	76fb      	strb	r3, [r7, #27]
 800386a:	e0a6      	b.n	80039ba <UART_SetConfig+0x29a>
 800386c:	2310      	movs	r3, #16
 800386e:	76fb      	strb	r3, [r7, #27]
 8003870:	e0a3      	b.n	80039ba <UART_SetConfig+0x29a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6b      	ldr	r2, [pc, #428]	; (8003a24 <UART_SetConfig+0x304>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d120      	bne.n	80038be <UART_SetConfig+0x19e>
 800387c:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <UART_SetConfig+0x2fc>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003886:	2b30      	cmp	r3, #48	; 0x30
 8003888:	d013      	beq.n	80038b2 <UART_SetConfig+0x192>
 800388a:	2b30      	cmp	r3, #48	; 0x30
 800388c:	d814      	bhi.n	80038b8 <UART_SetConfig+0x198>
 800388e:	2b20      	cmp	r3, #32
 8003890:	d009      	beq.n	80038a6 <UART_SetConfig+0x186>
 8003892:	2b20      	cmp	r3, #32
 8003894:	d810      	bhi.n	80038b8 <UART_SetConfig+0x198>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <UART_SetConfig+0x180>
 800389a:	2b10      	cmp	r3, #16
 800389c:	d006      	beq.n	80038ac <UART_SetConfig+0x18c>
 800389e:	e00b      	b.n	80038b8 <UART_SetConfig+0x198>
 80038a0:	2300      	movs	r3, #0
 80038a2:	76fb      	strb	r3, [r7, #27]
 80038a4:	e089      	b.n	80039ba <UART_SetConfig+0x29a>
 80038a6:	2302      	movs	r3, #2
 80038a8:	76fb      	strb	r3, [r7, #27]
 80038aa:	e086      	b.n	80039ba <UART_SetConfig+0x29a>
 80038ac:	2304      	movs	r3, #4
 80038ae:	76fb      	strb	r3, [r7, #27]
 80038b0:	e083      	b.n	80039ba <UART_SetConfig+0x29a>
 80038b2:	2308      	movs	r3, #8
 80038b4:	76fb      	strb	r3, [r7, #27]
 80038b6:	e080      	b.n	80039ba <UART_SetConfig+0x29a>
 80038b8:	2310      	movs	r3, #16
 80038ba:	76fb      	strb	r3, [r7, #27]
 80038bc:	e07d      	b.n	80039ba <UART_SetConfig+0x29a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a59      	ldr	r2, [pc, #356]	; (8003a28 <UART_SetConfig+0x308>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d120      	bne.n	800390a <UART_SetConfig+0x1ea>
 80038c8:	4b54      	ldr	r3, [pc, #336]	; (8003a1c <UART_SetConfig+0x2fc>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038d2:	2bc0      	cmp	r3, #192	; 0xc0
 80038d4:	d013      	beq.n	80038fe <UART_SetConfig+0x1de>
 80038d6:	2bc0      	cmp	r3, #192	; 0xc0
 80038d8:	d814      	bhi.n	8003904 <UART_SetConfig+0x1e4>
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d009      	beq.n	80038f2 <UART_SetConfig+0x1d2>
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d810      	bhi.n	8003904 <UART_SetConfig+0x1e4>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <UART_SetConfig+0x1cc>
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d006      	beq.n	80038f8 <UART_SetConfig+0x1d8>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x1e4>
 80038ec:	2300      	movs	r3, #0
 80038ee:	76fb      	strb	r3, [r7, #27]
 80038f0:	e063      	b.n	80039ba <UART_SetConfig+0x29a>
 80038f2:	2302      	movs	r3, #2
 80038f4:	76fb      	strb	r3, [r7, #27]
 80038f6:	e060      	b.n	80039ba <UART_SetConfig+0x29a>
 80038f8:	2304      	movs	r3, #4
 80038fa:	76fb      	strb	r3, [r7, #27]
 80038fc:	e05d      	b.n	80039ba <UART_SetConfig+0x29a>
 80038fe:	2308      	movs	r3, #8
 8003900:	76fb      	strb	r3, [r7, #27]
 8003902:	e05a      	b.n	80039ba <UART_SetConfig+0x29a>
 8003904:	2310      	movs	r3, #16
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e057      	b.n	80039ba <UART_SetConfig+0x29a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a47      	ldr	r2, [pc, #284]	; (8003a2c <UART_SetConfig+0x30c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d125      	bne.n	8003960 <UART_SetConfig+0x240>
 8003914:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <UART_SetConfig+0x2fc>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003922:	d017      	beq.n	8003954 <UART_SetConfig+0x234>
 8003924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003928:	d817      	bhi.n	800395a <UART_SetConfig+0x23a>
 800392a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392e:	d00b      	beq.n	8003948 <UART_SetConfig+0x228>
 8003930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003934:	d811      	bhi.n	800395a <UART_SetConfig+0x23a>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <UART_SetConfig+0x222>
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d006      	beq.n	800394e <UART_SetConfig+0x22e>
 8003940:	e00b      	b.n	800395a <UART_SetConfig+0x23a>
 8003942:	2300      	movs	r3, #0
 8003944:	76fb      	strb	r3, [r7, #27]
 8003946:	e038      	b.n	80039ba <UART_SetConfig+0x29a>
 8003948:	2302      	movs	r3, #2
 800394a:	76fb      	strb	r3, [r7, #27]
 800394c:	e035      	b.n	80039ba <UART_SetConfig+0x29a>
 800394e:	2304      	movs	r3, #4
 8003950:	76fb      	strb	r3, [r7, #27]
 8003952:	e032      	b.n	80039ba <UART_SetConfig+0x29a>
 8003954:	2308      	movs	r3, #8
 8003956:	76fb      	strb	r3, [r7, #27]
 8003958:	e02f      	b.n	80039ba <UART_SetConfig+0x29a>
 800395a:	2310      	movs	r3, #16
 800395c:	76fb      	strb	r3, [r7, #27]
 800395e:	e02c      	b.n	80039ba <UART_SetConfig+0x29a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <UART_SetConfig+0x2f4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d125      	bne.n	80039b6 <UART_SetConfig+0x296>
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <UART_SetConfig+0x2fc>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003978:	d017      	beq.n	80039aa <UART_SetConfig+0x28a>
 800397a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397e:	d817      	bhi.n	80039b0 <UART_SetConfig+0x290>
 8003980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003984:	d00b      	beq.n	800399e <UART_SetConfig+0x27e>
 8003986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398a:	d811      	bhi.n	80039b0 <UART_SetConfig+0x290>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <UART_SetConfig+0x278>
 8003990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003994:	d006      	beq.n	80039a4 <UART_SetConfig+0x284>
 8003996:	e00b      	b.n	80039b0 <UART_SetConfig+0x290>
 8003998:	2300      	movs	r3, #0
 800399a:	76fb      	strb	r3, [r7, #27]
 800399c:	e00d      	b.n	80039ba <UART_SetConfig+0x29a>
 800399e:	2302      	movs	r3, #2
 80039a0:	76fb      	strb	r3, [r7, #27]
 80039a2:	e00a      	b.n	80039ba <UART_SetConfig+0x29a>
 80039a4:	2304      	movs	r3, #4
 80039a6:	76fb      	strb	r3, [r7, #27]
 80039a8:	e007      	b.n	80039ba <UART_SetConfig+0x29a>
 80039aa:	2308      	movs	r3, #8
 80039ac:	76fb      	strb	r3, [r7, #27]
 80039ae:	e004      	b.n	80039ba <UART_SetConfig+0x29a>
 80039b0:	2310      	movs	r3, #16
 80039b2:	76fb      	strb	r3, [r7, #27]
 80039b4:	e001      	b.n	80039ba <UART_SetConfig+0x29a>
 80039b6:	2310      	movs	r3, #16
 80039b8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <UART_SetConfig+0x2f4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	f040 809f 	bne.w	8003b04 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039c6:	7efb      	ldrb	r3, [r7, #27]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d837      	bhi.n	8003a3c <UART_SetConfig+0x31c>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0x2b4>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a3d 	.word	0x08003a3d
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a3d 	.word	0x08003a3d
 80039e4:	08003a07 	.word	0x08003a07
 80039e8:	08003a3d 	.word	0x08003a3d
 80039ec:	08003a3d 	.word	0x08003a3d
 80039f0:	08003a3d 	.word	0x08003a3d
 80039f4:	08003a35 	.word	0x08003a35
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f8:	f7fe fed0 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80039fc:	6178      	str	r0, [r7, #20]
        break;
 80039fe:	e022      	b.n	8003a46 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <UART_SetConfig+0x310>)
 8003a02:	617b      	str	r3, [r7, #20]
        break;
 8003a04:	e01f      	b.n	8003a46 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a06:	f7fe fe31 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8003a0a:	6178      	str	r0, [r7, #20]
        break;
 8003a0c:	e01b      	b.n	8003a46 <UART_SetConfig+0x326>
 8003a0e:	bf00      	nop
 8003a10:	cfff69f3 	.word	0xcfff69f3
 8003a14:	40008000 	.word	0x40008000
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40004400 	.word	0x40004400
 8003a24:	40004800 	.word	0x40004800
 8003a28:	40004c00 	.word	0x40004c00
 8003a2c:	40005000 	.word	0x40005000
 8003a30:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a38:	617b      	str	r3, [r7, #20]
        break;
 8003a3a:	e004      	b.n	8003a46 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	76bb      	strb	r3, [r7, #26]
        break;
 8003a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8119 	beq.w	8003c80 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	4a95      	ldr	r2, [pc, #596]	; (8003ca8 <UART_SetConfig+0x588>)
 8003a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a60:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d305      	bcc.n	8003a7e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d902      	bls.n	8003a84 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	76bb      	strb	r3, [r7, #26]
 8003a82:	e0fd      	b.n	8003c80 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	4a85      	ldr	r2, [pc, #532]	; (8003ca8 <UART_SetConfig+0x588>)
 8003a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	f7fc fbae 	bl	80001fc <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	020b      	lsls	r3, r1, #8
 8003ab2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ab6:	0202      	lsls	r2, r0, #8
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	6849      	ldr	r1, [r1, #4]
 8003abc:	0849      	lsrs	r1, r1, #1
 8003abe:	4608      	mov	r0, r1
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	1814      	adds	r4, r2, r0
 8003ac6:	eb43 0501 	adc.w	r5, r3, r1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc fb90 	bl	80001fc <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aea:	d308      	bcc.n	8003afe <UART_SetConfig+0x3de>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d204      	bcs.n	8003afe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	60da      	str	r2, [r3, #12]
 8003afc:	e0c0      	b.n	8003c80 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	76bb      	strb	r3, [r7, #26]
 8003b02:	e0bd      	b.n	8003c80 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0c:	d164      	bne.n	8003bd8 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8003b0e:	7efb      	ldrb	r3, [r7, #27]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d828      	bhi.n	8003b66 <UART_SetConfig+0x446>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0x3fc>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b49 	.word	0x08003b49
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b67 	.word	0x08003b67
 8003b2c:	08003b57 	.word	0x08003b57
 8003b30:	08003b67 	.word	0x08003b67
 8003b34:	08003b67 	.word	0x08003b67
 8003b38:	08003b67 	.word	0x08003b67
 8003b3c:	08003b5f 	.word	0x08003b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b40:	f7fe fe2c 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8003b44:	6178      	str	r0, [r7, #20]
        break;
 8003b46:	e013      	b.n	8003b70 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7fe fe3e 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003b4c:	6178      	str	r0, [r7, #20]
        break;
 8003b4e:	e00f      	b.n	8003b70 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b50:	4b56      	ldr	r3, [pc, #344]	; (8003cac <UART_SetConfig+0x58c>)
 8003b52:	617b      	str	r3, [r7, #20]
        break;
 8003b54:	e00c      	b.n	8003b70 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b56:	f7fe fd89 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8003b5a:	6178      	str	r0, [r7, #20]
        break;
 8003b5c:	e008      	b.n	8003b70 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b62:	617b      	str	r3, [r7, #20]
        break;
 8003b64:	e004      	b.n	8003b70 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	76bb      	strb	r3, [r7, #26]
        break;
 8003b6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8084 	beq.w	8003c80 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <UART_SetConfig+0x588>)
 8003b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b82:	461a      	mov	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b8a:	005a      	lsls	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	441a      	add	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b0f      	cmp	r3, #15
 8003ba2:	d916      	bls.n	8003bd2 <UART_SetConfig+0x4b2>
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003baa:	d212      	bcs.n	8003bd2 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f023 030f 	bic.w	r3, r3, #15
 8003bb4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	89fb      	ldrh	r3, [r7, #14]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	89fa      	ldrh	r2, [r7, #14]
 8003bce:	60da      	str	r2, [r3, #12]
 8003bd0:	e056      	b.n	8003c80 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	76bb      	strb	r3, [r7, #26]
 8003bd6:	e053      	b.n	8003c80 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd8:	7efb      	ldrb	r3, [r7, #27]
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d827      	bhi.n	8003c2e <UART_SetConfig+0x50e>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0x4c4>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7fe fdc8 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8003c0c:	6178      	str	r0, [r7, #20]
        break;
 8003c0e:	e013      	b.n	8003c38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fe fdda 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003c14:	6178      	str	r0, [r7, #20]
        break;
 8003c16:	e00f      	b.n	8003c38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <UART_SetConfig+0x58c>)
 8003c1a:	617b      	str	r3, [r7, #20]
        break;
 8003c1c:	e00c      	b.n	8003c38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe fd25 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8003c22:	6178      	str	r0, [r7, #20]
        break;
 8003c24:	e008      	b.n	8003c38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	617b      	str	r3, [r7, #20]
        break;
 8003c2c:	e004      	b.n	8003c38 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	76bb      	strb	r3, [r7, #26]
        break;
 8003c36:	bf00      	nop
    }

    if (pclk != 0U)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d020      	beq.n	8003c80 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <UART_SetConfig+0x588>)
 8003c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	441a      	add	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d909      	bls.n	8003c7c <UART_SetConfig+0x55c>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d205      	bcs.n	8003c7c <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	e001      	b.n	8003c80 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	080049c0 	.word	0x080049c0
 8003cac:	00f42400 	.word	0x00f42400

08003cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01a      	beq.n	8003dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dae:	d10a      	bne.n	8003dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e04:	f7fd f9f4 	bl	80011f0 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d10e      	bne.n	8003e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f82f 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e025      	b.n	8003e82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d10e      	bne.n	8003e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f819 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e00f      	b.n	8003e82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b09c      	sub	sp, #112	; 0x70
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9a:	e0a9      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	f000 80a5 	beq.w	8003ff0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fd f9a3 	bl	80011f0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x32>
 8003eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d140      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003edc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e6      	bne.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	663b      	str	r3, [r7, #96]	; 0x60
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e069      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d051      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5a:	d149      	bne.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
 8003f86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e6      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fb8:	623a      	str	r2, [r7, #32]
 8003fba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	69f9      	ldr	r1, [r7, #28]
 8003fbe:	6a3a      	ldr	r2, [r7, #32]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e5      	bne.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e010      	b.n	8004012 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	429a      	cmp	r2, r3
 800400c:	f43f af46 	beq.w	8003e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3770      	adds	r7, #112	; 0x70
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_UARTEx_DisableFifoMode+0x16>
 800402c:	2302      	movs	r3, #2
 800402e:	e027      	b.n	8004080 <HAL_UARTEx_DisableFifoMode+0x66>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	; 0x24
 800403c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800405e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e02d      	b.n	8004100 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	; 0x24
 80040b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f84f 	bl	8004184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800411c:	2302      	movs	r3, #2
 800411e:	e02d      	b.n	800417c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2224      	movs	r2, #36	; 0x24
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f811 	bl	8004184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004190:	2b00      	cmp	r3, #0
 8004192:	d108      	bne.n	80041a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041a4:	e031      	b.n	800420a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041a6:	2308      	movs	r3, #8
 80041a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041aa:	2308      	movs	r3, #8
 80041ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	0e5b      	lsrs	r3, r3, #25
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	0f5b      	lsrs	r3, r3, #29
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ce:	7bbb      	ldrb	r3, [r7, #14]
 80041d0:	7b3a      	ldrb	r2, [r7, #12]
 80041d2:	4911      	ldr	r1, [pc, #68]	; (8004218 <UARTEx_SetNbDataToProcess+0x94>)
 80041d4:	5c8a      	ldrb	r2, [r1, r2]
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041da:	7b3a      	ldrb	r2, [r7, #12]
 80041dc:	490f      	ldr	r1, [pc, #60]	; (800421c <UARTEx_SetNbDataToProcess+0x98>)
 80041de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	7b7a      	ldrb	r2, [r7, #13]
 80041f0:	4909      	ldr	r1, [pc, #36]	; (8004218 <UARTEx_SetNbDataToProcess+0x94>)
 80041f2:	5c8a      	ldrb	r2, [r1, r2]
 80041f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80041f8:	7b7a      	ldrb	r2, [r7, #13]
 80041fa:	4908      	ldr	r1, [pc, #32]	; (800421c <UARTEx_SetNbDataToProcess+0x98>)
 80041fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	080049d8 	.word	0x080049d8
 800421c:	080049e0 	.word	0x080049e0

08004220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004220:	b084      	sub	sp, #16
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	f107 001c 	add.w	r0, r7, #28
 800422e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fa6c 	bl	800471c <USB_CoreReset>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
 800425a:	e005      	b.n	8004268 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004274:	b004      	add	sp, #16
 8004276:	4770      	bx	lr

08004278 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 0201 	bic.w	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d115      	bne.n	80042e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042c8:	2001      	movs	r0, #1
 80042ca:	f7fc ff9d 	bl	8001208 <HAL_Delay>
      ms++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3301      	adds	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fa13 	bl	8004700 <USB_GetMode>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d01e      	beq.n	800431e <USB_SetCurrentMode+0x84>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b31      	cmp	r3, #49	; 0x31
 80042e4:	d9f0      	bls.n	80042c8 <USB_SetCurrentMode+0x2e>
 80042e6:	e01a      	b.n	800431e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d115      	bne.n	800431a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042fa:	2001      	movs	r0, #1
 80042fc:	f7fc ff84 	bl	8001208 <HAL_Delay>
      ms++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f9fa 	bl	8004700 <USB_GetMode>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <USB_SetCurrentMode+0x84>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b31      	cmp	r3, #49	; 0x31
 8004316:	d9f0      	bls.n	80042fa <USB_SetCurrentMode+0x60>
 8004318:	e001      	b.n	800431e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e005      	b.n	800432a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b32      	cmp	r3, #50	; 0x32
 8004322:	d101      	bne.n	8004328 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004334:	b084      	sub	sp, #16
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	e009      	b.n	8004368 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	3340      	adds	r3, #64	; 0x40
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	2200      	movs	r2, #0
 8004360:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3301      	adds	r3, #1
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b0e      	cmp	r3, #14
 800436c:	d9f2      	bls.n	8004354 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11c      	bne.n	80043ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004382:	f043 0302 	orr.w	r3, r3, #2
 8004386:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e005      	b.n	80043ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043c0:	461a      	mov	r2, r3
 80043c2:	2300      	movs	r3, #0
 80043c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043cc:	4619      	mov	r1, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d4:	461a      	mov	r2, r3
 80043d6:	680b      	ldr	r3, [r1, #0]
 80043d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043da:	2103      	movs	r1, #3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f955 	bl	800468c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043e2:	2110      	movs	r1, #16
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8f1 	bl	80045cc <USB_FlushTxFifo>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f91b 	bl	8004630 <USB_FlushRxFifo>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	461a      	mov	r2, r3
 800440c:	2300      	movs	r3, #0
 800440e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004416:	461a      	mov	r2, r3
 8004418:	2300      	movs	r3, #0
 800441a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e043      	b.n	80044b6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004444:	d118      	bne.n	8004478 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004458:	461a      	mov	r2, r3
 800445a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e013      	b.n	800448a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	461a      	mov	r2, r3
 8004470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e008      	b.n	800448a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	461a      	mov	r2, r3
 8004486:	2300      	movs	r3, #0
 8004488:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	461a      	mov	r2, r3
 80044aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3301      	adds	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d3b7      	bcc.n	800442e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	e043      	b.n	800454c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044da:	d118      	bne.n	800450e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	461a      	mov	r2, r3
 80044f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e013      	b.n	8004520 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	e008      	b.n	8004520 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	461a      	mov	r2, r3
 800451c:	2300      	movs	r3, #0
 800451e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	461a      	mov	r2, r3
 8004540:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004544:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3301      	adds	r3, #1
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d3b7      	bcc.n	80044c4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004566:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004574:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f043 0210 	orr.w	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <USB_DevInit+0x294>)
 8004588:	4313      	orrs	r3, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800458e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f043 0208 	orr.w	r2, r3, #8
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ae:	f043 0304 	orr.w	r3, r3, #4
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045c2:	b004      	add	sp, #16
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	803c3800 	.word	0x803c3800

080045cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	4a12      	ldr	r2, [pc, #72]	; (800462c <USB_FlushTxFifo+0x60>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e01a      	b.n	8004620 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	daf3      	bge.n	80045da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	4a08      	ldr	r2, [pc, #32]	; (800462c <USB_FlushTxFifo+0x60>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e006      	b.n	8004620 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d0f1      	beq.n	8004602 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	00030d40 	.word	0x00030d40

08004630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4a11      	ldr	r2, [pc, #68]	; (8004688 <USB_FlushRxFifo+0x58>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e017      	b.n	800467c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	daf3      	bge.n	800463c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2210      	movs	r2, #16
 800465c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	4a08      	ldr	r2, [pc, #32]	; (8004688 <USB_FlushRxFifo+0x58>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e006      	b.n	800467c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d0f1      	beq.n	800465e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	00030d40 	.word	0x00030d40

0800468c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046d8:	f023 0303 	bic.w	r3, r3, #3
 80046dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	f003 0301 	and.w	r3, r3, #1
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3301      	adds	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <USB_CoreReset+0x60>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e01a      	b.n	800476e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	daf3      	bge.n	8004728 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <USB_CoreReset+0x60>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e006      	b.n	800476e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d0f1      	beq.n	8004750 <USB_CoreReset+0x34>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	00030d40 	.word	0x00030d40

08004780 <__errno>:
 8004780:	4b01      	ldr	r3, [pc, #4]	; (8004788 <__errno+0x8>)
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	2000000c 	.word	0x2000000c

0800478c <__libc_init_array>:
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	4d0d      	ldr	r5, [pc, #52]	; (80047c4 <__libc_init_array+0x38>)
 8004790:	4c0d      	ldr	r4, [pc, #52]	; (80047c8 <__libc_init_array+0x3c>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	2600      	movs	r6, #0
 8004798:	42a6      	cmp	r6, r4
 800479a:	d109      	bne.n	80047b0 <__libc_init_array+0x24>
 800479c:	4d0b      	ldr	r5, [pc, #44]	; (80047cc <__libc_init_array+0x40>)
 800479e:	4c0c      	ldr	r4, [pc, #48]	; (80047d0 <__libc_init_array+0x44>)
 80047a0:	f000 f8ca 	bl	8004938 <_init>
 80047a4:	1b64      	subs	r4, r4, r5
 80047a6:	10a4      	asrs	r4, r4, #2
 80047a8:	2600      	movs	r6, #0
 80047aa:	42a6      	cmp	r6, r4
 80047ac:	d105      	bne.n	80047ba <__libc_init_array+0x2e>
 80047ae:	bd70      	pop	{r4, r5, r6, pc}
 80047b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b4:	4798      	blx	r3
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7ee      	b.n	8004798 <__libc_init_array+0xc>
 80047ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80047be:	4798      	blx	r3
 80047c0:	3601      	adds	r6, #1
 80047c2:	e7f2      	b.n	80047aa <__libc_init_array+0x1e>
 80047c4:	08004af4 	.word	0x08004af4
 80047c8:	08004af4 	.word	0x08004af4
 80047cc:	08004af4 	.word	0x08004af4
 80047d0:	08004af8 	.word	0x08004af8

080047d4 <memset>:
 80047d4:	4402      	add	r2, r0
 80047d6:	4603      	mov	r3, r0
 80047d8:	4293      	cmp	r3, r2
 80047da:	d100      	bne.n	80047de <memset+0xa>
 80047dc:	4770      	bx	lr
 80047de:	f803 1b01 	strb.w	r1, [r3], #1
 80047e2:	e7f9      	b.n	80047d8 <memset+0x4>

080047e4 <strcpy>:
 80047e4:	4603      	mov	r3, r0
 80047e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ea:	f803 2b01 	strb.w	r2, [r3], #1
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	d1f9      	bne.n	80047e6 <strcpy+0x2>
 80047f2:	4770      	bx	lr

080047f4 <strncpy>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	3901      	subs	r1, #1
 80047f8:	4603      	mov	r3, r0
 80047fa:	b132      	cbz	r2, 800480a <strncpy+0x16>
 80047fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004800:	f803 4b01 	strb.w	r4, [r3], #1
 8004804:	3a01      	subs	r2, #1
 8004806:	2c00      	cmp	r4, #0
 8004808:	d1f7      	bne.n	80047fa <strncpy+0x6>
 800480a:	441a      	add	r2, r3
 800480c:	2100      	movs	r1, #0
 800480e:	4293      	cmp	r3, r2
 8004810:	d100      	bne.n	8004814 <strncpy+0x20>
 8004812:	bd10      	pop	{r4, pc}
 8004814:	f803 1b01 	strb.w	r1, [r3], #1
 8004818:	e7f9      	b.n	800480e <strncpy+0x1a>
	...

0800481c <_strtol_l.isra.0>:
 800481c:	2b01      	cmp	r3, #1
 800481e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004822:	d001      	beq.n	8004828 <_strtol_l.isra.0+0xc>
 8004824:	2b24      	cmp	r3, #36	; 0x24
 8004826:	d906      	bls.n	8004836 <_strtol_l.isra.0+0x1a>
 8004828:	f7ff ffaa 	bl	8004780 <__errno>
 800482c:	2316      	movs	r3, #22
 800482e:	6003      	str	r3, [r0, #0]
 8004830:	2000      	movs	r0, #0
 8004832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004836:	4f3a      	ldr	r7, [pc, #232]	; (8004920 <_strtol_l.isra.0+0x104>)
 8004838:	468e      	mov	lr, r1
 800483a:	4676      	mov	r6, lr
 800483c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004840:	5de5      	ldrb	r5, [r4, r7]
 8004842:	f015 0508 	ands.w	r5, r5, #8
 8004846:	d1f8      	bne.n	800483a <_strtol_l.isra.0+0x1e>
 8004848:	2c2d      	cmp	r4, #45	; 0x2d
 800484a:	d134      	bne.n	80048b6 <_strtol_l.isra.0+0x9a>
 800484c:	f89e 4000 	ldrb.w	r4, [lr]
 8004850:	f04f 0801 	mov.w	r8, #1
 8004854:	f106 0e02 	add.w	lr, r6, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d05c      	beq.n	8004916 <_strtol_l.isra.0+0xfa>
 800485c:	2b10      	cmp	r3, #16
 800485e:	d10c      	bne.n	800487a <_strtol_l.isra.0+0x5e>
 8004860:	2c30      	cmp	r4, #48	; 0x30
 8004862:	d10a      	bne.n	800487a <_strtol_l.isra.0+0x5e>
 8004864:	f89e 4000 	ldrb.w	r4, [lr]
 8004868:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800486c:	2c58      	cmp	r4, #88	; 0x58
 800486e:	d14d      	bne.n	800490c <_strtol_l.isra.0+0xf0>
 8004870:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004874:	2310      	movs	r3, #16
 8004876:	f10e 0e02 	add.w	lr, lr, #2
 800487a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800487e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004882:	2600      	movs	r6, #0
 8004884:	fbbc f9f3 	udiv	r9, ip, r3
 8004888:	4635      	mov	r5, r6
 800488a:	fb03 ca19 	mls	sl, r3, r9, ip
 800488e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004892:	2f09      	cmp	r7, #9
 8004894:	d818      	bhi.n	80048c8 <_strtol_l.isra.0+0xac>
 8004896:	463c      	mov	r4, r7
 8004898:	42a3      	cmp	r3, r4
 800489a:	dd24      	ble.n	80048e6 <_strtol_l.isra.0+0xca>
 800489c:	2e00      	cmp	r6, #0
 800489e:	db1f      	blt.n	80048e0 <_strtol_l.isra.0+0xc4>
 80048a0:	45a9      	cmp	r9, r5
 80048a2:	d31d      	bcc.n	80048e0 <_strtol_l.isra.0+0xc4>
 80048a4:	d101      	bne.n	80048aa <_strtol_l.isra.0+0x8e>
 80048a6:	45a2      	cmp	sl, r4
 80048a8:	db1a      	blt.n	80048e0 <_strtol_l.isra.0+0xc4>
 80048aa:	fb05 4503 	mla	r5, r5, r3, r4
 80048ae:	2601      	movs	r6, #1
 80048b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80048b4:	e7eb      	b.n	800488e <_strtol_l.isra.0+0x72>
 80048b6:	2c2b      	cmp	r4, #43	; 0x2b
 80048b8:	bf08      	it	eq
 80048ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 80048be:	46a8      	mov	r8, r5
 80048c0:	bf08      	it	eq
 80048c2:	f106 0e02 	addeq.w	lr, r6, #2
 80048c6:	e7c7      	b.n	8004858 <_strtol_l.isra.0+0x3c>
 80048c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80048cc:	2f19      	cmp	r7, #25
 80048ce:	d801      	bhi.n	80048d4 <_strtol_l.isra.0+0xb8>
 80048d0:	3c37      	subs	r4, #55	; 0x37
 80048d2:	e7e1      	b.n	8004898 <_strtol_l.isra.0+0x7c>
 80048d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80048d8:	2f19      	cmp	r7, #25
 80048da:	d804      	bhi.n	80048e6 <_strtol_l.isra.0+0xca>
 80048dc:	3c57      	subs	r4, #87	; 0x57
 80048de:	e7db      	b.n	8004898 <_strtol_l.isra.0+0x7c>
 80048e0:	f04f 36ff 	mov.w	r6, #4294967295
 80048e4:	e7e4      	b.n	80048b0 <_strtol_l.isra.0+0x94>
 80048e6:	2e00      	cmp	r6, #0
 80048e8:	da05      	bge.n	80048f6 <_strtol_l.isra.0+0xda>
 80048ea:	2322      	movs	r3, #34	; 0x22
 80048ec:	6003      	str	r3, [r0, #0]
 80048ee:	4665      	mov	r5, ip
 80048f0:	b942      	cbnz	r2, 8004904 <_strtol_l.isra.0+0xe8>
 80048f2:	4628      	mov	r0, r5
 80048f4:	e79d      	b.n	8004832 <_strtol_l.isra.0+0x16>
 80048f6:	f1b8 0f00 	cmp.w	r8, #0
 80048fa:	d000      	beq.n	80048fe <_strtol_l.isra.0+0xe2>
 80048fc:	426d      	negs	r5, r5
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d0f7      	beq.n	80048f2 <_strtol_l.isra.0+0xd6>
 8004902:	b10e      	cbz	r6, 8004908 <_strtol_l.isra.0+0xec>
 8004904:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004908:	6011      	str	r1, [r2, #0]
 800490a:	e7f2      	b.n	80048f2 <_strtol_l.isra.0+0xd6>
 800490c:	2430      	movs	r4, #48	; 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1b3      	bne.n	800487a <_strtol_l.isra.0+0x5e>
 8004912:	2308      	movs	r3, #8
 8004914:	e7b1      	b.n	800487a <_strtol_l.isra.0+0x5e>
 8004916:	2c30      	cmp	r4, #48	; 0x30
 8004918:	d0a4      	beq.n	8004864 <_strtol_l.isra.0+0x48>
 800491a:	230a      	movs	r3, #10
 800491c:	e7ad      	b.n	800487a <_strtol_l.isra.0+0x5e>
 800491e:	bf00      	nop
 8004920:	080049e9 	.word	0x080049e9

08004924 <strtol>:
 8004924:	4613      	mov	r3, r2
 8004926:	460a      	mov	r2, r1
 8004928:	4601      	mov	r1, r0
 800492a:	4802      	ldr	r0, [pc, #8]	; (8004934 <strtol+0x10>)
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f7ff bf75 	b.w	800481c <_strtol_l.isra.0>
 8004932:	bf00      	nop
 8004934:	2000000c 	.word	0x2000000c

08004938 <_init>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr

08004944 <_fini>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr
