
PizzaTime8D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006434  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800667c  0800667c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006684  08006684  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800668c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  2000000c  08006698  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08006698  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dda  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257e  00000000  00000000  00035e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00038398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000392f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b94d  00000000  00000000  0003a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011da4  00000000  00000000  00065abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011190e  00000000  00000000  00077861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018916f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  001891c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080065dc 	.word	0x080065dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080065dc 	.word	0x080065dc

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000a00:	f000 b96e 	b.w	8000ce0 <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	4604      	mov	r4, r0
 8000a24:	468c      	mov	ip, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8083 	bne.w	8000b32 <__udivmoddi4+0x116>
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	4617      	mov	r7, r2
 8000a30:	d947      	bls.n	8000ac2 <__udivmoddi4+0xa6>
 8000a32:	fab2 f282 	clz	r2, r2
 8000a36:	b142      	cbz	r2, 8000a4a <__udivmoddi4+0x2e>
 8000a38:	f1c2 0020 	rsb	r0, r2, #32
 8000a3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a40:	4091      	lsls	r1, r2
 8000a42:	4097      	lsls	r7, r2
 8000a44:	ea40 0c01 	orr.w	ip, r0, r1
 8000a48:	4094      	lsls	r4, r2
 8000a4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a4e:	0c23      	lsrs	r3, r4, #16
 8000a50:	fbbc f6f8 	udiv	r6, ip, r8
 8000a54:	fa1f fe87 	uxth.w	lr, r7
 8000a58:	fb08 c116 	mls	r1, r8, r6, ip
 8000a5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a60:	fb06 f10e 	mul.w	r1, r6, lr
 8000a64:	4299      	cmp	r1, r3
 8000a66:	d909      	bls.n	8000a7c <__udivmoddi4+0x60>
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a6e:	f080 8119 	bcs.w	8000ca4 <__udivmoddi4+0x288>
 8000a72:	4299      	cmp	r1, r3
 8000a74:	f240 8116 	bls.w	8000ca4 <__udivmoddi4+0x288>
 8000a78:	3e02      	subs	r6, #2
 8000a7a:	443b      	add	r3, r7
 8000a7c:	1a5b      	subs	r3, r3, r1
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a84:	fb08 3310 	mls	r3, r8, r0, r3
 8000a88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x8c>
 8000a94:	193c      	adds	r4, r7, r4
 8000a96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a9a:	f080 8105 	bcs.w	8000ca8 <__udivmoddi4+0x28c>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	f240 8102 	bls.w	8000ca8 <__udivmoddi4+0x28c>
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	443c      	add	r4, r7
 8000aa8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aac:	eba4 040e 	sub.w	r4, r4, lr
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	b11d      	cbz	r5, 8000abc <__udivmoddi4+0xa0>
 8000ab4:	40d4      	lsrs	r4, r2
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e9c5 4300 	strd	r4, r3, [r5]
 8000abc:	4631      	mov	r1, r6
 8000abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac2:	b902      	cbnz	r2, 8000ac6 <__udivmoddi4+0xaa>
 8000ac4:	deff      	udf	#255	; 0xff
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d150      	bne.n	8000b70 <__udivmoddi4+0x154>
 8000ace:	1bcb      	subs	r3, r1, r7
 8000ad0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad4:	fa1f f887 	uxth.w	r8, r7
 8000ad8:	2601      	movs	r6, #1
 8000ada:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ade:	0c21      	lsrs	r1, r4, #16
 8000ae0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ae4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aec:	428b      	cmp	r3, r1
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0xe4>
 8000af0:	1879      	adds	r1, r7, r1
 8000af2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0xe2>
 8000af8:	428b      	cmp	r3, r1
 8000afa:	f200 80e9 	bhi.w	8000cd0 <__udivmoddi4+0x2b4>
 8000afe:	4684      	mov	ip, r0
 8000b00:	1ac9      	subs	r1, r1, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b10:	fb08 f800 	mul.w	r8, r8, r0
 8000b14:	45a0      	cmp	r8, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x10c>
 8000b18:	193c      	adds	r4, r7, r4
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x10a>
 8000b20:	45a0      	cmp	r8, r4
 8000b22:	f200 80d9 	bhi.w	8000cd8 <__udivmoddi4+0x2bc>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 0408 	sub.w	r4, r4, r8
 8000b2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b30:	e7bf      	b.n	8000ab2 <__udivmoddi4+0x96>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0x12e>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	f000 80b1 	beq.w	8000c9e <__udivmoddi4+0x282>
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b42:	4630      	mov	r0, r6
 8000b44:	4631      	mov	r1, r6
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f683 	clz	r6, r3
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d14a      	bne.n	8000be8 <__udivmoddi4+0x1cc>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0x140>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80b8 	bhi.w	8000ccc <__udivmoddi4+0x2b0>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	468c      	mov	ip, r1
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d0a8      	beq.n	8000abc <__udivmoddi4+0xa0>
 8000b6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0xa0>
 8000b70:	f1c2 0320 	rsb	r3, r2, #32
 8000b74:	fa20 f603 	lsr.w	r6, r0, r3
 8000b78:	4097      	lsls	r7, r2
 8000b7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b82:	40d9      	lsrs	r1, r3
 8000b84:	4330      	orrs	r0, r6
 8000b86:	0c03      	lsrs	r3, r0, #16
 8000b88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b8c:	fa1f f887 	uxth.w	r8, r7
 8000b90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb06 f108 	mul.w	r1, r6, r8
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x19c>
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000baa:	f080 808d 	bcs.w	8000cc8 <__udivmoddi4+0x2ac>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 808a 	bls.w	8000cc8 <__udivmoddi4+0x2ac>
 8000bb4:	3e02      	subs	r6, #2
 8000bb6:	443b      	add	r3, r7
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b281      	uxth	r1, r0
 8000bbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc8:	fb00 f308 	mul.w	r3, r0, r8
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x1c4>
 8000bd0:	1879      	adds	r1, r7, r1
 8000bd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bd6:	d273      	bcs.n	8000cc0 <__udivmoddi4+0x2a4>
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d971      	bls.n	8000cc0 <__udivmoddi4+0x2a4>
 8000bdc:	3802      	subs	r0, #2
 8000bde:	4439      	add	r1, r7
 8000be0:	1acb      	subs	r3, r1, r3
 8000be2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000be6:	e778      	b.n	8000ada <__udivmoddi4+0xbe>
 8000be8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bec:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bf4:	431c      	orrs	r4, r3
 8000bf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c06:	431f      	orrs	r7, r3
 8000c08:	0c3b      	lsrs	r3, r7, #16
 8000c0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c0e:	fa1f f884 	uxth.w	r8, r4
 8000c12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c1e:	458a      	cmp	sl, r1
 8000c20:	fa02 f206 	lsl.w	r2, r2, r6
 8000c24:	fa00 f306 	lsl.w	r3, r0, r6
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x220>
 8000c2a:	1861      	adds	r1, r4, r1
 8000c2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c30:	d248      	bcs.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c32:	458a      	cmp	sl, r1
 8000c34:	d946      	bls.n	8000cc4 <__udivmoddi4+0x2a8>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4421      	add	r1, r4
 8000c3c:	eba1 010a 	sub.w	r1, r1, sl
 8000c40:	b2bf      	uxth	r7, r7
 8000c42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c4e:	fb00 f808 	mul.w	r8, r0, r8
 8000c52:	45b8      	cmp	r8, r7
 8000c54:	d907      	bls.n	8000c66 <__udivmoddi4+0x24a>
 8000c56:	19e7      	adds	r7, r4, r7
 8000c58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5c:	d22e      	bcs.n	8000cbc <__udivmoddi4+0x2a0>
 8000c5e:	45b8      	cmp	r8, r7
 8000c60:	d92c      	bls.n	8000cbc <__udivmoddi4+0x2a0>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4427      	add	r7, r4
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	eba7 0708 	sub.w	r7, r7, r8
 8000c6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c72:	454f      	cmp	r7, r9
 8000c74:	46c6      	mov	lr, r8
 8000c76:	4649      	mov	r1, r9
 8000c78:	d31a      	bcc.n	8000cb0 <__udivmoddi4+0x294>
 8000c7a:	d017      	beq.n	8000cac <__udivmoddi4+0x290>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x27a>
 8000c7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c82:	eb67 0701 	sbc.w	r7, r7, r1
 8000c86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c8a:	40f2      	lsrs	r2, r6
 8000c8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c90:	40f7      	lsrs	r7, r6
 8000c92:	e9c5 2700 	strd	r2, r7, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	462e      	mov	r6, r5
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	e70b      	b.n	8000abc <__udivmoddi4+0xa0>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	e6e9      	b.n	8000a7c <__udivmoddi4+0x60>
 8000ca8:	4618      	mov	r0, r3
 8000caa:	e6fd      	b.n	8000aa8 <__udivmoddi4+0x8c>
 8000cac:	4543      	cmp	r3, r8
 8000cae:	d2e5      	bcs.n	8000c7c <__udivmoddi4+0x260>
 8000cb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cb8:	3801      	subs	r0, #1
 8000cba:	e7df      	b.n	8000c7c <__udivmoddi4+0x260>
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e7d2      	b.n	8000c66 <__udivmoddi4+0x24a>
 8000cc0:	4660      	mov	r0, ip
 8000cc2:	e78d      	b.n	8000be0 <__udivmoddi4+0x1c4>
 8000cc4:	4681      	mov	r9, r0
 8000cc6:	e7b9      	b.n	8000c3c <__udivmoddi4+0x220>
 8000cc8:	4666      	mov	r6, ip
 8000cca:	e775      	b.n	8000bb8 <__udivmoddi4+0x19c>
 8000ccc:	4630      	mov	r0, r6
 8000cce:	e74a      	b.n	8000b66 <__udivmoddi4+0x14a>
 8000cd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd4:	4439      	add	r1, r7
 8000cd6:	e713      	b.n	8000b00 <__udivmoddi4+0xe4>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	e724      	b.n	8000b28 <__udivmoddi4+0x10c>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	0000      	movs	r0, r0
	...

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f000 fd82 	bl	80017f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf2:	f000 f87f 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf6:	f000 fa6b 	bl	80011d0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000cfa:	f000 f957 	bl	8000fac <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000cfe:	f000 f9f1 	bl	80010e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d02:	f000 fa3b 	bl	800117c <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000d06:	f000 f99f 	bl	8001048 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d0a:	f000 f8c7 	bl	8000e9c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000d0e:	4830      	ldr	r0, [pc, #192]	; (8000dd0 <main+0xe8>)
 8000d10:	f001 fa56 	bl	80021c0 <HAL_ADC_Start>
  int data;
  double voltage;
  double celsius;
  double br = 14;
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <main+0xec>)
 8000d1a:	e9c7 2306 	strd	r2, r3, [r7, #24]





uint8_t noFT[3] = {3,1,8};
 8000d1e:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <main+0xf0>)
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	6812      	ldr	r2, [r2, #0]
 8000d26:	4611      	mov	r1, r2
 8000d28:	8019      	strh	r1, [r3, #0]
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	0c12      	lsrs	r2, r2, #16
 8000d2e:	701a      	strb	r2, [r3, #0]
const char *m = "hmmmmmmmm";
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <main+0xf4>)
 8000d32:	617b      	str	r3, [r7, #20]
const char *me = "tinngs";
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <main+0xf8>)
 8000d36:	613b      	str	r3, [r7, #16]
char bruh[4];
uint16_t temp_value = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	81fb      	strh	r3, [r7, #14]
	      tCelsius = ((1.43-3.3/4096*readValue)/0.0043)+25;
	  HAL_ADC_Stop( &hadc1 );
	  gcvt(tCelsius, 3, bruh);
*/

	  HAL_ADC_Start( &hadc1 );
 8000d3c:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <main+0xe8>)
 8000d3e:	f001 fa3f 	bl	80021c0 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000d42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d46:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <main+0xe8>)
 8000d48:	f001 fad0 	bl	80022ec <HAL_ADC_PollForConversion>
	  	      readValue = HAL_ADC_GetValue(&hadc1);
 8000d4c:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <main+0xe8>)
 8000d4e:	f001 fb5c 	bl	800240a <HAL_ADC_GetValue>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <main+0xfc>)
 8000d58:	801a      	strh	r2, [r3, #0]

	  temperature = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(Avg_Slope, v30, vtemp, vrefplus, readValue, LL_ADC_RESOLUTION_12B);
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <main+0xfc>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fba0 	bl	80004a4 <__aeabi_i2d>
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <main+0x100>)
 8000d6a:	f7ff fc05 	bl	8000578 <__aeabi_dmul>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	4610      	mov	r0, r2
 8000d74:	4619      	mov	r1, r3
 8000d76:	a314      	add	r3, pc, #80	; (adr r3, 8000dc8 <main+0xe0>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fd26 	bl	80007cc <__aeabi_ddiv>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <main+0x104>)
 8000d8e:	f7ff fbf3 	bl	8000578 <__aeabi_dmul>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f7ff fdff 	bl	800099c <__aeabi_d2iz>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8000da4:	0fda      	lsrs	r2, r3, #31
 8000da6:	4413      	add	r3, r2
 8000da8:	105b      	asrs	r3, r3, #1
 8000daa:	331e      	adds	r3, #30
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <main+0x108>)
 8000db6:	edc3 7a00 	vstr	s15, [r3]

  	  HAL_ADC_Stop( &hadc1 );
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <main+0xe8>)
 8000dbc:	f001 fa63 	bl	8002286 <HAL_ADC_Stop>
	  HAL_ADC_Start( &hadc1 );
 8000dc0:	e7bc      	b.n	8000d3c <main+0x54>
 8000dc2:	bf00      	nop
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	40affe00 	.word	0x40affe00
 8000dd0:	2000055c 	.word	0x2000055c
 8000dd4:	402c0000 	.word	0x402c0000
 8000dd8:	08006608 	.word	0x08006608
 8000ddc:	080065f4 	.word	0x080065f4
 8000de0:	08006600 	.word	0x08006600
 8000de4:	2000069a 	.word	0x2000069a
 8000de8:	400c0000 	.word	0x400c0000
 8000dec:	408f4000 	.word	0x408f4000
 8000df0:	200004c8 	.word	0x200004c8

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b096      	sub	sp, #88	; 0x58
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2244      	movs	r2, #68	; 0x44
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fbe2 	bl	80065cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e16:	2000      	movs	r0, #0
 8000e18:	f002 fe80 	bl	8003b1c <HAL_PWREx_ControlVoltageScaling>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000e22:	f000 fa79 	bl	8001318 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000e26:	2322      	movs	r3, #34	; 0x22
 8000e28:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e30:	2301      	movs	r3, #1
 8000e32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e34:	2340      	movs	r3, #64	; 0x40
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000e44:	231e      	movs	r3, #30
 8000e46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 ff23 	bl	8003ca4 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e64:	f000 fa58 	bl	8001318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2105      	movs	r1, #5
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 fb34 	bl	80044f0 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e8e:	f000 fa43 	bl	8001318 <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3758      	adds	r7, #88	; 0x58
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec4:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000ec6:	4a36      	ldr	r2, [pc, #216]	; (8000fa0 <MX_ADC1_Init+0x104>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eca:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed0:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000edc:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	481d      	ldr	r0, [pc, #116]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000f26:	f000 ffff 	bl	8001f28 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f30:	f000 f9f2 	bl	8001318 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_ADC1_Init+0x108>)
 8000f36:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000f38:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000f3c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_ADC1_Init+0x10c>)
 8000f40:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.ITMode = DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.LowThreshold = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4619      	mov	r1, r3
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000f58:	f001 fe60 	bl	8002c1c <HAL_ADC_AnalogWDGConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000f62:	f000 f9d9 	bl	8001318 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_ADC1_Init+0x10c>)
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f72:	237f      	movs	r3, #127	; 0x7f
 8000f74:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f76:	2304      	movs	r3, #4
 8000f78:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_ADC1_Init+0x100>)
 8000f84:	f001 fa4e 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f8e:	f000 f9c3 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000055c 	.word	0x2000055c
 8000fa0:	50040000 	.word	0x50040000
 8000fa4:	7dc00000 	.word	0x7dc00000
 8000fa8:	c7520000 	.word	0xc7520000

08000fac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fb2:	4a23      	ldr	r2, [pc, #140]	; (8001040 <MX_LPUART1_UART_Init+0x94>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fb8:	4a22      	ldr	r2, [pc, #136]	; (8001044 <MX_LPUART1_UART_Init+0x98>)
 8000fba:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fd0:	220c      	movs	r2, #12
 8000fd2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ff2:	4812      	ldr	r0, [pc, #72]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8000ff4:	f004 fa46 	bl	8005484 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000ffe:	f000 f98b 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8001006:	f004 ff43 	bl	8005e90 <HAL_UARTEx_SetTxFifoThreshold>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001010:	f000 f982 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001014:	2100      	movs	r1, #0
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8001018:	f004 ff78 	bl	8005f0c <HAL_UARTEx_SetRxFifoThreshold>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001022:	f000 f979 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_LPUART1_UART_Init+0x90>)
 8001028:	f004 fef9 	bl	8005e1e <HAL_UARTEx_DisableFifoMode>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001032:	f000 f971 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200004cc 	.word	0x200004cc
 8001040:	40008000 	.word	0x40008000
 8001044:	00033324 	.word	0x00033324

08001048 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <MX_USART1_UART_Init+0x94>)
 8001050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 209700;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <MX_USART1_UART_Init+0x98>)
 8001056:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800106c:	220c      	movs	r2, #12
 800106e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 8001090:	f004 f9f8 	bl	8005484 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800109a:	f000 f93d 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 80010a2:	f004 fef5 	bl	8005e90 <HAL_UARTEx_SetTxFifoThreshold>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80010ac:	f000 f934 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 80010b4:	f004 ff2a 	bl	8005f0c <HAL_UARTEx_SetRxFifoThreshold>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80010be:	f000 f92b 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_USART1_UART_Init+0x90>)
 80010c4:	f004 feab 	bl	8005e1e <HAL_UARTEx_DisableFifoMode>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80010ce:	f000 f923 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200005c4 	.word	0x200005c4
 80010dc:	40013800 	.word	0x40013800
 80010e0:	00033324 	.word	0x00033324

080010e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_USART3_UART_Init+0x90>)
 80010ea:	4a23      	ldr	r2, [pc, #140]	; (8001178 <MX_USART3_UART_Init+0x94>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_USART3_UART_Init+0x90>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_USART3_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_USART3_UART_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_USART3_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_USART3_UART_Init+0x90>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_USART3_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_USART3_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_USART3_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_USART3_UART_Init+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_USART3_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800112c:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_USART3_UART_Init+0x90>)
 800112e:	f004 f9a9 	bl	8005484 <HAL_UART_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001138:	f000 f8ee 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_USART3_UART_Init+0x90>)
 8001140:	f004 fea6 	bl	8005e90 <HAL_UARTEx_SetTxFifoThreshold>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800114a:	f000 f8e5 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <MX_USART3_UART_Init+0x90>)
 8001152:	f004 fedb 	bl	8005f0c <HAL_UARTEx_SetRxFifoThreshold>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800115c:	f000 f8dc 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_USART3_UART_Init+0x90>)
 8001162:	f004 fe5c 	bl	8005e1e <HAL_UARTEx_DisableFifoMode>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800116c:	f000 f8d4 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000028 	.word	0x20000028
 8001178:	40004800 	.word	0x40004800

0800117c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001182:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001186:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 800118a:	2206      	movs	r2, #6
 800118c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001190:	2202      	movs	r2, #2
 8001192:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001196:	2201      	movs	r2, #1
 8001198:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011ba:	f002 fb47 	bl	800384c <HAL_PCD_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 f8a8 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200000bc 	.word	0x200000bc

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b48      	ldr	r3, [pc, #288]	; (8001308 <MX_GPIO_Init+0x138>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a47      	ldr	r2, [pc, #284]	; (8001308 <MX_GPIO_Init+0x138>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <MX_GPIO_Init+0x138>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	4b42      	ldr	r3, [pc, #264]	; (8001308 <MX_GPIO_Init+0x138>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a41      	ldr	r2, [pc, #260]	; (8001308 <MX_GPIO_Init+0x138>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <MX_GPIO_Init+0x138>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <MX_GPIO_Init+0x138>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a3b      	ldr	r2, [pc, #236]	; (8001308 <MX_GPIO_Init+0x138>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <MX_GPIO_Init+0x138>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <MX_GPIO_Init+0x138>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a35      	ldr	r2, [pc, #212]	; (8001308 <MX_GPIO_Init+0x138>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <MX_GPIO_Init+0x138>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <MX_GPIO_Init+0x138>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <MX_GPIO_Init+0x138>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <MX_GPIO_Init+0x138>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <MX_GPIO_Init+0x138>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <MX_GPIO_Init+0x138>)
 8001264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <MX_GPIO_Init+0x138>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001276:	f002 fd05 	bl	8003c84 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001280:	4822      	ldr	r0, [pc, #136]	; (800130c <MX_GPIO_Init+0x13c>)
 8001282:	f002 facb 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2120      	movs	r1, #32
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <MX_GPIO_Init+0x140>)
 800128c:	f002 fac6 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001296:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	481b      	ldr	r0, [pc, #108]	; (8001314 <MX_GPIO_Init+0x144>)
 80012a8:	f002 f926 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80012ac:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <MX_GPIO_Init+0x13c>)
 80012c6:	f002 f917 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012ca:	2320      	movs	r3, #32
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <MX_GPIO_Init+0x140>)
 80012e2:	f002 f909 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012e6:	2340      	movs	r3, #64	; 0x40
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_GPIO_Init+0x140>)
 80012fa:	f002 f8fd 	bl	80034f8 <HAL_GPIO_Init>

}
 80012fe:	bf00      	nop
 8001300:	3730      	adds	r7, #48	; 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	48000400 	.word	0x48000400
 8001310:	48001800 	.word	0x48001800
 8001314:	48000800 	.word	0x48000800

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_MspInit+0x44>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_MspInit+0x44>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6613      	str	r3, [r2, #96]	; 0x60
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x44>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x44>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0ae      	sub	sp, #184	; 0xb8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2294      	movs	r2, #148	; 0x94
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f005 f91d 	bl	80065cc <memset>
  if(hadc->Instance==ADC1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a27      	ldr	r2, [pc, #156]	; (8001434 <HAL_ADC_MspInit+0xc8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d147      	bne.n	800142c <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800139c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80013aa:	2302      	movs	r3, #2
 80013ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80013b2:	230c      	movs	r3, #12
 80013b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fb41 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80013d8:	f7ff ff9e 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_ADC_MspInit+0xcc>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <HAL_ADC_MspInit+0xcc>)
 80013e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_ADC_MspInit+0xcc>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_ADC_MspInit+0xcc>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_ADC_MspInit+0xcc>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_ADC_MspInit+0xcc>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800140c:	230c      	movs	r3, #12
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001412:	230b      	movs	r3, #11
 8001414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f002 f866 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	37b8      	adds	r7, #184	; 0xb8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	50040000 	.word	0x50040000
 8001438:	40021000 	.word	0x40021000

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0b2      	sub	sp, #200	; 0xc8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	2294      	movs	r2, #148	; 0x94
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f005 f8b5 	bl	80065cc <memset>
  if(huart->Instance==LPUART1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a65      	ldr	r2, [pc, #404]	; (80015fc <HAL_UART_MspInit+0x1c0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d13e      	bne.n	80014ea <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800146c:	2320      	movs	r3, #32
 800146e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001470:	2300      	movs	r3, #0
 8001472:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	4618      	mov	r0, r3
 800147a:	f003 faeb 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001484:	f7ff ff48 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001488:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	4a5c      	ldr	r2, [pc, #368]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001494:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 8001496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a0:	4b57      	ldr	r3, [pc, #348]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	4a56      	ldr	r2, [pc, #344]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 80014a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ac:	4b54      	ldr	r3, [pc, #336]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80014b8:	f002 fbe4 	bl	8003c84 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80014bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014d6:	2308      	movs	r3, #8
 80014d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4848      	ldr	r0, [pc, #288]	; (8001604 <HAL_UART_MspInit+0x1c8>)
 80014e4:	f002 f808 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014e8:	e084      	b.n	80015f4 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a46      	ldr	r2, [pc, #280]	; (8001608 <HAL_UART_MspInit+0x1cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d13e      	bne.n	8001572 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014f8:	2300      	movs	r3, #0
 80014fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4618      	mov	r0, r3
 8001502:	f003 faa7 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800150c:	f7ff ff04 	bl	8001318 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001510:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001514:	4a3a      	ldr	r2, [pc, #232]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151a:	6613      	str	r3, [r2, #96]	; 0x60
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 800151e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001528:	4b35      	ldr	r3, [pc, #212]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	4a34      	ldr	r2, [pc, #208]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 800152e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001540:	f002 fba0 	bl	8003c84 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001544:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800155e:	2307      	movs	r3, #7
 8001560:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001564:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001568:	4619      	mov	r1, r3
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <HAL_UART_MspInit+0x1c8>)
 800156c:	f001 ffc4 	bl	80034f8 <HAL_GPIO_Init>
}
 8001570:	e040      	b.n	80015f4 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <HAL_UART_MspInit+0x1d0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d13b      	bne.n	80015f4 <HAL_UART_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800157c:	2304      	movs	r3, #4
 800157e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001580:	2300      	movs	r3, #0
 8001582:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fa63 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8001594:	f7ff fec0 	bl	8001318 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 800159e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a2:	6593      	str	r3, [r2, #88]	; 0x58
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_UART_MspInit+0x1c4>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e2:	2307      	movs	r3, #7
 80015e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4808      	ldr	r0, [pc, #32]	; (8001610 <HAL_UART_MspInit+0x1d4>)
 80015f0:	f001 ff82 	bl	80034f8 <HAL_GPIO_Init>
}
 80015f4:	bf00      	nop
 80015f6:	37c8      	adds	r7, #200	; 0xc8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40008000 	.word	0x40008000
 8001600:	40021000 	.word	0x40021000
 8001604:	48001800 	.word	0x48001800
 8001608:	40013800 	.word	0x40013800
 800160c:	40004800 	.word	0x40004800
 8001610:	48000c00 	.word	0x48000c00

08001614 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0b0      	sub	sp, #192	; 0xc0
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	2294      	movs	r2, #148	; 0x94
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f004 ffc9 	bl	80065cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001642:	d16c      	bne.n	800171e <HAL_PCD_MspInit+0x10a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001648:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	4618      	mov	r0, r3
 8001656:	f003 f9fd 	bl	8004a54 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001660:	f7ff fe5a 	bl	8001318 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_PCD_MspInit+0x114>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <HAL_PCD_MspInit+0x114>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_PCD_MspInit+0x114>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800167c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001696:	230a      	movs	r3, #10
 8001698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f001 ff27 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c8:	f001 ff16 	bl	80034f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d114      	bne.n	800171a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6593      	str	r3, [r2, #88]	; 0x58
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001708:	f002 faac 	bl	8003c64 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_PCD_MspInit+0x114>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a05      	ldr	r2, [pc, #20]	; (8001728 <HAL_PCD_MspInit+0x114>)
 8001712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001718:	e001      	b.n	800171e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800171a:	f002 faa3 	bl	8003c64 <HAL_PWREx_EnableVddUSB>
}
 800171e:	bf00      	nop
 8001720:	37c0      	adds	r7, #192	; 0xc0
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f892 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a8:	f7ff ffea 	bl	8001780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	; (80017e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LoopForever+0xe>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <LoopForever+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d2:	f004 fed7 	bl	8006584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d6:	f7ff fa87 	bl	8000ce8 <main>

080017da <LoopForever>:

LoopForever:
    b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017dc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017e8:	0800668c 	.word	0x0800668c
  ldr r2, =_sbss
 80017ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017f0:	200006a0 	.word	0x200006a0

080017f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_IRQHandler>

080017f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f001 fe45 	bl	8003490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f80e 	bl	8001828 <HAL_InitTick>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	e001      	b.n	800181c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001818:	f7ff fd84 	bl	8001324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800181c:	79fb      	ldrb	r3, [r7, #7]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_InitTick+0x6c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d023      	beq.n	8001884 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_InitTick+0x70>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_InitTick+0x6c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f001 fe43 	bl	80034de <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10f      	bne.n	800187e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d809      	bhi.n	8001878 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f001 fe1b 	bl	80034a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_InitTick+0x74>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e007      	b.n	8001888 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e004      	b.n	8001888 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e001      	b.n	8001888 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	20000000 	.word	0x20000000
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008
 80018c4:	2000069c 	.word	0x2000069c

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000069c 	.word	0x2000069c

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff ffee 	bl	80018c8 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffde 	bl	80018c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008

08001928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3360      	adds	r3, #96	; 0x60
 80019a2:	461a      	mov	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <LL_ADC_SetOffset+0x44>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	4313      	orrs	r3, r2
 80019c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019c8:	bf00      	nop
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	03fff000 	.word	0x03fff000

080019d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3360      	adds	r3, #96	; 0x60
 80019e6:	461a      	mov	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3360      	adds	r3, #96	; 0x60
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	615a      	str	r2, [r3, #20]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b087      	sub	sp, #28
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3330      	adds	r3, #48	; 0x30
 8001a96:	461a      	mov	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	4413      	add	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	211f      	movs	r1, #31
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	f003 011f 	and.w	r1, r3, #31
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad2:	bf00      	nop
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b087      	sub	sp, #28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3314      	adds	r3, #20
 8001aee:	461a      	mov	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	0e5b      	lsrs	r3, r3, #25
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	0d1b      	lsrs	r3, r3, #20
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2107      	movs	r1, #7
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	401a      	ands	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0d1b      	lsrs	r3, r3, #20
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	431a      	orrs	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b28:	bf00      	nop
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0318 	and.w	r3, r3, #24
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b58:	40d9      	lsrs	r1, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b62:	431a      	orrs	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	0007ffff 	.word	0x0007ffff

08001b7c <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	0d1b      	lsrs	r3, r3, #20
 8001b92:	f003 0103 	and.w	r1, r3, #3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f003 0201 	and.w	r2, r3, #1
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4403      	add	r3, r0
 8001baa:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8001bb6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001bca:	bf00      	nop
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b087      	sub	sp, #28
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3320      	adds	r3, #32
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0d1b      	lsrs	r3, r3, #20
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	4413      	add	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0419      	lsls	r1, r3, #16
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6093      	str	r3, [r2, #8]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c52:	d101      	bne.n	8001c58 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <LL_ADC_IsEnabled+0x18>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <LL_ADC_IsEnabled+0x1a>
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d101      	bne.n	8001d44 <LL_ADC_IsDisableOngoing+0x18>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <LL_ADC_IsDisableOngoing+0x1a>
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d66:	f043 0204 	orr.w	r2, r3, #4
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d101      	bne.n	8001dba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d101      	bne.n	8001e08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3e:	601a      	str	r2, [r3, #0]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	605a      	str	r2, [r3, #4]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	605a      	str	r2, [r3, #4]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	605a      	str	r2, [r3, #4]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	605a      	str	r2, [r3, #4]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e12f      	b.n	80021a2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fa0b 	bl	800136c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fe68 	bl	8001c3e <LL_ADC_IsDeepPowerDownEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe4e 	bl	8001c1a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe83 	bl	8001c8e <LL_ADC_IsInternalRegulatorEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe67 	bl	8001c66 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f98:	4b84      	ldr	r3, [pc, #528]	; (80021ac <HAL_ADC_Init+0x284>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	4a84      	ldr	r2, [pc, #528]	; (80021b0 <HAL_ADC_Init+0x288>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fe65 	bl	8001c8e <LL_ADC_IsInternalRegulatorEnabled>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fed9 	bl	8001da2 <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 80c8 	bne.w	8002190 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 80c4 	bne.w	8002190 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002010:	f043 0202 	orr.w	r2, r3, #2
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fe72 	bl	8001d06 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002028:	4862      	ldr	r0, [pc, #392]	; (80021b4 <HAL_ADC_Init+0x28c>)
 800202a:	f7ff fe6c 	bl	8001d06 <LL_ADC_IsEnabled>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4619      	mov	r1, r3
 800203a:	485f      	ldr	r0, [pc, #380]	; (80021b8 <HAL_ADC_Init+0x290>)
 800203c:	f7ff fc74 	bl	8001928 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e5b      	ldrb	r3, [r3, #25]
 8002044:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800204a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002050:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002056:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d106      	bne.n	800207c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	3b01      	subs	r3, #1
 8002074:	045b      	lsls	r3, r3, #17
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_ADC_Init+0x294>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fe76 	bl	8001da2 <LL_ADC_REG_IsConversionOngoing>
 80020b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fe97 	bl	8001df0 <LL_ADC_INJ_IsConversionOngoing>
 80020c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d140      	bne.n	800214c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d13d      	bne.n	800214c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7e1b      	ldrb	r3, [r3, #24]
 80020d8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020da:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f2:	f023 0306 	bic.w	r3, r3, #6
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002106:	2b01      	cmp	r3, #1
 8002108:	d118      	bne.n	800213c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002120:	4311      	orrs	r1, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800212c:	430a      	orrs	r2, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	e007      	b.n	800214c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10c      	bne.n	800216e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f023 010f 	bic.w	r1, r3, #15
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	1e5a      	subs	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
 800216c:	e007      	b.n	800217e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 020f 	bic.w	r2, r2, #15
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	659a      	str	r2, [r3, #88]	; 0x58
 800218e:	e007      	b.n	80021a0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f043 0210 	orr.w	r2, r3, #16
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000
 80021b0:	053e2d63 	.word	0x053e2d63
 80021b4:	50040000 	.word	0x50040000
 80021b8:	50040300 	.word	0x50040300
 80021bc:	fff0c007 	.word	0xfff0c007

080021c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fde8 	bl	8001da2 <LL_ADC_REG_IsConversionOngoing>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d14f      	bne.n	8002278 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_Start+0x26>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e04b      	b.n	800227e <HAL_ADC_Start+0xbe>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 ffda 	bl	80031a8 <ADC_Enable>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d137      	bne.n	800226e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221e:	d106      	bne.n	800222e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	f023 0206 	bic.w	r2, r3, #6
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c
 800222c:	e002      	b.n	8002234 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	221c      	movs	r2, #28
 800223a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800225a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fd73 	bl	8001d52 <LL_ADC_REG_StartConversion>
 800226c:	e006      	b.n	800227c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002276:	e001      	b.n	800227c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002278:	2302      	movs	r3, #2
 800227a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_ADC_Stop+0x16>
 8002298:	2302      	movs	r3, #2
 800229a:	e023      	b.n	80022e4 <HAL_ADC_Stop+0x5e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80022a4:	2103      	movs	r1, #3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fec2 	bl	8003030 <ADC_ConversionStop>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d111      	bne.n	80022da <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 ffd8 	bl	800326c <ADC_Disable>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d102      	bne.n	8002304 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80022fe:	2308      	movs	r3, #8
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e010      	b.n	8002326 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e06f      	b.n	8002402 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002322:	2304      	movs	r3, #4
 8002324:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002326:	f7ff facf 	bl	80018c8 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800232c:	e021      	b.n	8002372 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d01d      	beq.n	8002372 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002336:	f7ff fac7 	bl	80018c8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <HAL_ADC_PollForConversion+0x60>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d112      	bne.n	8002372 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0204 	orr.w	r2, r3, #4
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e047      	b.n	8002402 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0d6      	beq.n	800232e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb65 	bl	8001a60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01c      	beq.n	80023d6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7e5b      	ldrb	r3, [r3, #25]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d118      	bne.n	80023d6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d111      	bne.n	80023d6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d104      	bne.n	80023ee <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2208      	movs	r2, #8
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e008      	b.n	8002400 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	220c      	movs	r2, #12
 80023fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0b6      	sub	sp, #216	; 0xd8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x22>
 8002442:	2302      	movs	r3, #2
 8002444:	e3d5      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x7ce>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fca5 	bl	8001da2 <LL_ADC_REG_IsConversionOngoing>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 83ba 	bne.w	8002bd4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d824      	bhi.n	80024b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	3b02      	subs	r3, #2
 800246e:	2b03      	cmp	r3, #3
 8002470:	d81b      	bhi.n	80024aa <HAL_ADC_ConfigChannel+0x86>
 8002472:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <HAL_ADC_ConfigChannel+0x54>)
 8002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002478:	08002489 	.word	0x08002489
 800247c:	08002491 	.word	0x08002491
 8002480:	08002499 	.word	0x08002499
 8002484:	080024a1 	.word	0x080024a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	220c      	movs	r2, #12
 800248c:	605a      	str	r2, [r3, #4]
          break;
 800248e:	e011      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2212      	movs	r2, #18
 8002494:	605a      	str	r2, [r3, #4]
          break;
 8002496:	e00d      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2218      	movs	r2, #24
 800249c:	605a      	str	r2, [r3, #4]
          break;
 800249e:	e009      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a6:	605a      	str	r2, [r3, #4]
          break;
 80024a8:	e004      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2206      	movs	r2, #6
 80024ae:	605a      	str	r2, [r3, #4]
          break;
 80024b0:	e000      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f7ff fae0 	bl	8001a86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fc69 	bl	8001da2 <LL_ADC_REG_IsConversionOngoing>
 80024d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fc89 	bl	8001df0 <LL_ADC_INJ_IsConversionOngoing>
 80024de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 81c1 	bne.w	800286e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 81bc 	bne.w	800286e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024fe:	d10f      	bne.n	8002520 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	4619      	mov	r1, r3
 800250c:	f7ff fae7 	bl	8001ade <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fa8e 	bl	8001a3a <LL_ADC_SetSamplingTimeCommonConfig>
 800251e:	e00e      	b.n	800253e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6819      	ldr	r1, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	461a      	mov	r2, r3
 800252e:	f7ff fad6 	bl	8001ade <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fa7e 	bl	8001a3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	08db      	lsrs	r3, r3, #3
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d00a      	beq.n	8002576 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6919      	ldr	r1, [r3, #16]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002570:	f7ff fa0e 	bl	8001990 <LL_ADC_SetOffset>
 8002574:	e17b      	b.n	800286e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fa2b 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x17e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fa20 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	0e9b      	lsrs	r3, r3, #26
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	e01e      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x1bc>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fa15 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e004      	b.n	80025de <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80025d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1d4>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	e018      	b.n	800262a <HAL_ADC_ConfigChannel+0x206>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800260c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e004      	b.n	800262a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800262a:	429a      	cmp	r2, r3
 800262c:	d106      	bne.n	800263c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f9e4 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f9c8 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x244>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff f9bd 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	f003 021f 	and.w	r2, r3, #31
 8002666:	e01e      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x282>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff f9b2 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800268a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800268e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e004      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800269a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_ADC_ConfigChannel+0x29a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	0e9b      	lsrs	r3, r3, #26
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	e018      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x2cc>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80026e2:	2320      	movs	r3, #32
 80026e4:	e004      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80026e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d106      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f981 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2102      	movs	r1, #2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f965 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_ADC_ConfigChannel+0x30a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2102      	movs	r1, #2
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff f95a 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	e01e      	b.n	800276c <HAL_ADC_ConfigChannel+0x348>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f94f 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800274c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e004      	b.n	800276a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x360>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	e016      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x38e>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800279c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80027a4:	2320      	movs	r3, #32
 80027a6:	e004      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80027a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d106      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2102      	movs	r1, #2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f920 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2103      	movs	r1, #3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f904 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x3cc>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2103      	movs	r1, #3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff f8f9 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	f003 021f 	and.w	r2, r3, #31
 80027ee:	e017      	b.n	8002820 <HAL_ADC_ConfigChannel+0x3fc>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2103      	movs	r1, #3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f8ee 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800280c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x414>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0e9b      	lsrs	r3, r3, #26
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	e011      	b.n	800285c <HAL_ADC_ConfigChannel+0x438>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002848:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800284a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e003      	b.n	800285c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800285c:	429a      	cmp	r2, r3
 800285e:	d106      	bne.n	800286e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	2103      	movs	r1, #3
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff f8cb 	bl	8001a04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fa47 	bl	8001d06 <LL_ADC_IsEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 8140 	bne.w	8002b00 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	461a      	mov	r2, r3
 800288e:	f7ff f951 	bl	8001b34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	4a8f      	ldr	r2, [pc, #572]	; (8002ad4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	f040 8131 	bne.w	8002b00 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10b      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x4a2>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	0e9b      	lsrs	r3, r3, #26
 80028b4:	3301      	adds	r3, #1
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2b09      	cmp	r3, #9
 80028bc:	bf94      	ite	ls
 80028be:	2301      	movls	r3, #1
 80028c0:	2300      	movhi	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e019      	b.n	80028fa <HAL_ADC_ConfigChannel+0x4d6>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80028de:	2320      	movs	r3, #32
 80028e0:	e003      	b.n	80028ea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80028e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2b09      	cmp	r3, #9
 80028f2:	bf94      	ite	ls
 80028f4:	2301      	movls	r3, #1
 80028f6:	2300      	movhi	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d079      	beq.n	80029f2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d107      	bne.n	800291a <HAL_ADC_ConfigChannel+0x4f6>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	3301      	adds	r3, #1
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002918:	e015      	b.n	8002946 <HAL_ADC_ConfigChannel+0x522>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800292c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002932:	2320      	movs	r3, #32
 8002934:	e003      	b.n	800293e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	3301      	adds	r3, #1
 8002940:	069b      	lsls	r3, r3, #26
 8002942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x542>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	3301      	adds	r3, #1
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	e017      	b.n	8002996 <HAL_ADC_ConfigChannel+0x572>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e003      	b.n	800298a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	ea42 0103 	orr.w	r1, r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x598>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	3301      	adds	r3, #1
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	051b      	lsls	r3, r3, #20
 80029ba:	e018      	b.n	80029ee <HAL_ADC_ConfigChannel+0x5ca>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e003      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ee:	430b      	orrs	r3, r1
 80029f0:	e081      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x5ea>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	3301      	adds	r3, #1
 8002a06:	069b      	lsls	r3, r3, #26
 8002a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0c:	e015      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x616>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e003      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	069b      	lsls	r3, r3, #26
 8002a36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x636>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	e017      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x666>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	61fb      	str	r3, [r7, #28]
  return result;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e003      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	ea42 0103 	orr.w	r1, r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x692>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0e9b      	lsrs	r3, r3, #26
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 021f 	and.w	r2, r3, #31
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b1e      	subs	r3, #30
 8002aae:	051b      	lsls	r3, r3, #20
 8002ab0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	e01e      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x6d0>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	613b      	str	r3, [r7, #16]
  return result;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d104      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e006      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x6bc>
 8002ad2:	bf00      	nop
 8002ad4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 021f 	and.w	r2, r3, #31
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	3b1e      	subs	r3, #30
 8002aee:	051b      	lsls	r3, r3, #20
 8002af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af4:	430b      	orrs	r3, r1
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	6892      	ldr	r2, [r2, #8]
 8002afa:	4619      	mov	r1, r3
 8002afc:	f7fe ffef 	bl	8001ade <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <HAL_ADC_ConfigChannel+0x7d8>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d06c      	beq.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b0c:	483c      	ldr	r0, [pc, #240]	; (8002c00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b0e:	f7fe ff31 	bl	8001974 <LL_ADC_GetCommonPathInternalCh>
 8002b12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a3a      	ldr	r2, [pc, #232]	; (8002c04 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d127      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d121      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a35      	ldr	r2, [pc, #212]	; (8002c08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d157      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b3e:	4619      	mov	r1, r3
 8002b40:	482f      	ldr	r0, [pc, #188]	; (8002c00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b42:	f7fe ff04 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b46:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_ADC_ConfigChannel+0x7e8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	4a30      	ldr	r2, [pc, #192]	; (8002c10 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b60:	e002      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f9      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b6e:	e03a      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <HAL_ADC_ConfigChannel+0x7f0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d113      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x77e>
 8002b7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d12a      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4819      	ldr	r0, [pc, #100]	; (8002c00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b9c:	f7fe fed7 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba0:	e021      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <HAL_ADC_ConfigChannel+0x7f4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d11c      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d111      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480c      	ldr	r0, [pc, #48]	; (8002c00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bce:	f7fe febe 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
 8002bd2:	e008      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002bee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	37d8      	adds	r7, #216	; 0xd8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	80080000 	.word	0x80080000
 8002c00:	50040300 	.word	0x50040300
 8002c04:	c7520000 	.word	0xc7520000
 8002c08:	50040000 	.word	0x50040000
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	053e2d63 	.word	0x053e2d63
 8002c14:	cb840000 	.word	0xcb840000
 8002c18:	80000001 	.word	0x80000001

08002c1c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c34:	d003      	beq.n	8002c3e <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002c3a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_AnalogWDGConfig+0x30>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e1ea      	b.n	8003022 <HAL_ADC_AnalogWDGConfig+0x406>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f8a2 	bl	8001da2 <LL_ADC_REG_IsConversionOngoing>
 8002c5e:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f8c3 	bl	8001df0 <LL_ADC_INJ_IsConversionOngoing>
 8002c6a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 81c8 	bne.w	8003004 <HAL_ADC_AnalogWDGConfig+0x3e8>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 81c4 	bne.w	8003004 <HAL_ADC_AnalogWDGConfig+0x3e8>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4aaa      	ldr	r2, [pc, #680]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	f040 80a2 	bne.w	8002dcc <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002c90:	d034      	beq.n	8002cfc <HAL_ADC_AnalogWDGConfig+0xe0>
 8002c92:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002c96:	d856      	bhi.n	8002d46 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002c98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9c:	d04b      	beq.n	8002d36 <HAL_ADC_AnalogWDGConfig+0x11a>
 8002c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ca2:	d850      	bhi.n	8002d46 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002ca4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002ca8:	d01b      	beq.n	8002ce2 <HAL_ADC_AnalogWDGConfig+0xc6>
 8002caa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cae:	d84a      	bhi.n	8002d46 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb4:	d037      	beq.n	8002d26 <HAL_ADC_AnalogWDGConfig+0x10a>
 8002cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cba:	d844      	bhi.n	8002d46 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc0:	d029      	beq.n	8002d16 <HAL_ADC_AnalogWDGConfig+0xfa>
 8002cc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cc6:	d13e      	bne.n	8002d46 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002cd4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4994      	ldr	r1, [pc, #592]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x310>)
 8002cdc:	f7fe ff4e 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8002ce0:	e039      	b.n	8002d56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002cee:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	498d      	ldr	r1, [pc, #564]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x310>)
 8002cf6:	f7fe ff41 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8002cfa:	e02c      	b.n	8002d56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002d08:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4987      	ldr	r1, [pc, #540]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x310>)
 8002d10:	f7fe ff34 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002d14:	e01f      	b.n	8002d56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a85      	ldr	r2, [pc, #532]	; (8002f30 <HAL_ADC_AnalogWDGConfig+0x314>)
 8002d1c:	4983      	ldr	r1, [pc, #524]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x310>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe ff2c 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d24:	e017      	b.n	8002d56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a82      	ldr	r2, [pc, #520]	; (8002f34 <HAL_ADC_AnalogWDGConfig+0x318>)
 8002d2c:	497f      	ldr	r1, [pc, #508]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x310>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe ff24 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d34:	e00f      	b.n	8002d56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a7f      	ldr	r2, [pc, #508]	; (8002f38 <HAL_ADC_AnalogWDGConfig+0x31c>)
 8002d3c:	497b      	ldr	r1, [pc, #492]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x310>)
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe ff1c 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d44:	e007      	b.n	8002d56 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	4977      	ldr	r1, [pc, #476]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x310>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff14 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d54:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6819      	ldr	r1, [r3, #0]
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d92:	f7fe ff20 	bl	8001bd6 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f835 	bl	8001e16 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	7b1b      	ldrb	r3, [r3, #12]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f855 	bl	8001e68 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002dbe:	e12a      	b.n	8003016 <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f87f 	bl	8001ec8 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002dca:	e124      	b.n	8003016 <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002dd4:	d01b      	beq.n	8002e0e <HAL_ADC_AnalogWDGConfig+0x1f2>
 8002dd6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002dda:	f200 8086 	bhi.w	8002eea <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de2:	d079      	beq.n	8002ed8 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de8:	d87f      	bhi.n	8002eea <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002dea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002dee:	d00e      	beq.n	8002e0e <HAL_ADC_AnalogWDGConfig+0x1f2>
 8002df0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002df4:	d879      	bhi.n	8002eea <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002df6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfa:	d06d      	beq.n	8002ed8 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e00:	d873      	bhi.n	8002eea <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e06:	d067      	beq.n	8002ed8 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002e08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e0c:	d16d      	bne.n	8002eea <HAL_ADC_AnalogWDGConfig+0x2ce>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4a      	ldr	r2, [pc, #296]	; (8002f3c <HAL_ADC_AnalogWDGConfig+0x320>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d12f      	bne.n	8002e78 <HAL_ADC_AnalogWDGConfig+0x25c>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <HAL_ADC_AnalogWDGConfig+0x21a>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2201      	movs	r2, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	e016      	b.n	8002e64 <HAL_ADC_AnalogWDGConfig+0x248>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	61bb      	str	r3, [r7, #24]
  return result;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_AnalogWDGConfig+0x236>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_AnalogWDGConfig+0x23e>
  return __builtin_clz(value);
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2201      	movs	r2, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002e76:	e041      	b.n	8002efc <HAL_ADC_AnalogWDGConfig+0x2e0>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HAL_ADC_AnalogWDGConfig+0x27a>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	2201      	movs	r2, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	e016      	b.n	8002ec4 <HAL_ADC_AnalogWDGConfig+0x2a8>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
  return result;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_AnalogWDGConfig+0x296>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e003      	b.n	8002eba <HAL_ADC_AnalogWDGConfig+0x29e>
  return __builtin_clz(value);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8002ed6:	e011      	b.n	8002efc <HAL_ADC_AnalogWDGConfig+0x2e0>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <HAL_ADC_AnalogWDGConfig+0x31c>)
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f7fe fe4a 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002ee8:	e008      	b.n	8002efc <HAL_ADC_AnalogWDGConfig+0x2e0>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f7fe fe41 	bl	8001b7c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002efa:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0318 	and.w	r3, r3, #24
 8002f06:	2b18      	cmp	r3, #24
 8002f08:	d01a      	beq.n	8002f40 <HAL_ADC_AnalogWDGConfig+0x324>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	f1c3 0302 	rsb	r3, r3, #2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	f003 031e 	and.w	r3, r3, #30
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	e00d      	b.n	8002f46 <HAL_ADC_AnalogWDGConfig+0x32a>
 8002f2a:	bf00      	nop
 8002f2c:	7dc00000 	.word	0x7dc00000
 8002f30:	0087ffff 	.word	0x0087ffff
 8002f34:	0107ffff 	.word	0x0107ffff
 8002f38:	0187ffff 	.word	0x0187ffff
 8002f3c:	0017ffff 	.word	0x0017ffff
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0318 	and.w	r3, r3, #24
 8002f52:	2b18      	cmp	r3, #24
 8002f54:	d00f      	beq.n	8002f76 <HAL_ADC_AnalogWDGConfig+0x35a>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	08db      	lsrs	r3, r3, #3
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	f1c3 0302 	rsb	r3, r3, #2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	f003 031e 	and.w	r3, r3, #30
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
 8002f74:	e002      	b.n	8002f7c <HAL_ADC_AnalogWDGConfig+0x360>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8a:	f7fe fe24 	bl	8001bd6 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a26      	ldr	r2, [pc, #152]	; (800302c <HAL_ADC_AnalogWDGConfig+0x410>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d11a      	bne.n	8002fce <HAL_ADC_AnalogWDGConfig+0x3b2>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe ff41 	bl	8001e30 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	7b1b      	ldrb	r3, [r3, #12]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_ADC_AnalogWDGConfig+0x3a6>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe ff64 	bl	8001e88 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002fc0:	e029      	b.n	8003016 <HAL_ADC_AnalogWDGConfig+0x3fa>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe ff8e 	bl	8001ee8 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002fcc:	e023      	b.n	8003016 <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe ff34 	bl	8001e4c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	7b1b      	ldrb	r3, [r3, #12]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_AnalogWDGConfig+0x3dc>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe ff59 	bl	8001ea8 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ff6:	e00e      	b.n	8003016 <HAL_ADC_AnalogWDGConfig+0x3fa>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe ff83 	bl	8001f08 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003002:	e008      	b.n	8003016 <HAL_ADC_AnalogWDGConfig+0x3fa>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800301e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003022:	4618      	mov	r0, r3
 8003024:	3738      	adds	r7, #56	; 0x38
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	0017ffff 	.word	0x0017ffff

08003030 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe feab 	bl	8001da2 <LL_ADC_REG_IsConversionOngoing>
 800304c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fecc 	bl	8001df0 <LL_ADC_INJ_IsConversionOngoing>
 8003058:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8098 	beq.w	8003198 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02a      	beq.n	80030cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7e5b      	ldrb	r3, [r3, #25]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d126      	bne.n	80030cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7e1b      	ldrb	r3, [r3, #24]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d122      	bne.n	80030cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003086:	2301      	movs	r3, #1
 8003088:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800308a:	e014      	b.n	80030b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4a45      	ldr	r2, [pc, #276]	; (80031a4 <ADC_ConversionStop+0x174>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d90d      	bls.n	80030b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e074      	b.n	800319a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	3301      	adds	r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d1e3      	bne.n	800308c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2240      	movs	r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d014      	beq.n	80030fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fe63 	bl	8001da2 <LL_ADC_REG_IsConversionOngoing>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fe20 	bl	8001d2c <LL_ADC_IsDisableOngoing>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fe3f 	bl	8001d7a <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d014      	beq.n	800312c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fe72 	bl	8001df0 <LL_ADC_INJ_IsConversionOngoing>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fe08 	bl	8001d2c <LL_ADC_IsDisableOngoing>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d104      	bne.n	800312c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fe4e 	bl	8001dc8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d005      	beq.n	800313e <ADC_ConversionStop+0x10e>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d105      	bne.n	8003144 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003138:	230c      	movs	r3, #12
 800313a:	617b      	str	r3, [r7, #20]
        break;
 800313c:	e005      	b.n	800314a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800313e:	2308      	movs	r3, #8
 8003140:	617b      	str	r3, [r7, #20]
        break;
 8003142:	e002      	b.n	800314a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003144:	2304      	movs	r3, #4
 8003146:	617b      	str	r3, [r7, #20]
        break;
 8003148:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800314a:	f7fe fbbd 	bl	80018c8 <HAL_GetTick>
 800314e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003150:	e01b      	b.n	800318a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003152:	f7fe fbb9 	bl	80018c8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b05      	cmp	r3, #5
 800315e:	d914      	bls.n	800318a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e007      	b.n	800319a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1dc      	bne.n	8003152 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	a33fffff 	.word	0xa33fffff

080031a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fda6 	bl	8001d06 <LL_ADC_IsEnabled>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d14d      	bne.n	800325c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	4b28      	ldr	r3, [pc, #160]	; (8003268 <ADC_Enable+0xc0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e039      	b.n	800325e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fd61 	bl	8001cb6 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031f4:	f7fe fb68 	bl	80018c8 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031fa:	e028      	b.n	800324e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fd80 	bl	8001d06 <LL_ADC_IsEnabled>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fd50 	bl	8001cb6 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003216:	f7fe fb57 	bl	80018c8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d914      	bls.n	800324e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00d      	beq.n	800324e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	f043 0210 	orr.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e007      	b.n	800325e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d1cf      	bne.n	80031fc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	8000003f 	.word	0x8000003f

0800326c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe fd57 	bl	8001d2c <LL_ADC_IsDisableOngoing>
 800327e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe fd3e 	bl	8001d06 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d047      	beq.n	8003320 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d144      	bne.n	8003320 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030d 	and.w	r3, r3, #13
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d10c      	bne.n	80032be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fd18 	bl	8001cde <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2203      	movs	r2, #3
 80032b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032b6:	f7fe fb07 	bl	80018c8 <HAL_GetTick>
 80032ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032bc:	e029      	b.n	8003312 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f043 0210 	orr.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	f043 0201 	orr.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e023      	b.n	8003322 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032da:	f7fe faf5 	bl	80018c8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d914      	bls.n	8003312 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f043 0210 	orr.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e007      	b.n	8003322 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1dc      	bne.n	80032da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003348:	4013      	ands	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335e:	4a04      	ldr	r2, [pc, #16]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	60d3      	str	r3, [r2, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <__NVIC_GetPriorityGrouping+0x18>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	f003 0307 	and.w	r3, r3, #7
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db0a      	blt.n	80033ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	490c      	ldr	r1, [pc, #48]	; (80033dc <__NVIC_SetPriority+0x4c>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	440b      	add	r3, r1
 80033b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b8:	e00a      	b.n	80033d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4908      	ldr	r1, [pc, #32]	; (80033e0 <__NVIC_SetPriority+0x50>)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3b04      	subs	r3, #4
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	440b      	add	r3, r1
 80033ce:	761a      	strb	r2, [r3, #24]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000e100 	.word	0xe000e100
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f1c3 0307 	rsb	r3, r3, #7
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf28      	it	cs
 8003402:	2304      	movcs	r3, #4
 8003404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3304      	adds	r3, #4
 800340a:	2b06      	cmp	r3, #6
 800340c:	d902      	bls.n	8003414 <NVIC_EncodePriority+0x30>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3b03      	subs	r3, #3
 8003412:	e000      	b.n	8003416 <NVIC_EncodePriority+0x32>
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800342c:	f04f 31ff 	mov.w	r1, #4294967295
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43d9      	mvns	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	4313      	orrs	r3, r2
         );
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	; 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800345c:	d301      	bcc.n	8003462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345e:	2301      	movs	r3, #1
 8003460:	e00f      	b.n	8003482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <SysTick_Config+0x40>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346a:	210f      	movs	r1, #15
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	f7ff ff8e 	bl	8003390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <SysTick_Config+0x40>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347a:	4b04      	ldr	r3, [pc, #16]	; (800348c <SysTick_Config+0x40>)
 800347c:	2207      	movs	r2, #7
 800347e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	e000e010 	.word	0xe000e010

08003490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff47 	bl	800332c <__NVIC_SetPriorityGrouping>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034b8:	f7ff ff5c 	bl	8003374 <__NVIC_GetPriorityGrouping>
 80034bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff8e 	bl	80033e4 <NVIC_EncodePriority>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff5d 	bl	8003390 <__NVIC_SetPriority>
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ffb0 	bl	800344c <SysTick_Config>
 80034ec:	4603      	mov	r3, r0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003506:	e166      	b.n	80037d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8158 	beq.w	80037d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d005      	beq.n	8003538 <HAL_GPIO_Init+0x40>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d130      	bne.n	800359a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356e:	2201      	movs	r2, #1
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0201 	and.w	r2, r3, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d017      	beq.n	80035d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d123      	bne.n	800362a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	08da      	lsrs	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3208      	adds	r2, #8
 80035ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	6939      	ldr	r1, [r7, #16]
 8003626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0203 	and.w	r2, r3, #3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80b2 	beq.w	80037d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366c:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_GPIO_Init+0x2fc>)
 800366e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003670:	4a60      	ldr	r2, [pc, #384]	; (80037f4 <HAL_GPIO_Init+0x2fc>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6613      	str	r3, [r2, #96]	; 0x60
 8003678:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <HAL_GPIO_Init+0x2fc>)
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003684:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <HAL_GPIO_Init+0x300>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ae:	d02b      	beq.n	8003708 <HAL_GPIO_Init+0x210>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_GPIO_Init+0x304>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d025      	beq.n	8003704 <HAL_GPIO_Init+0x20c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a51      	ldr	r2, [pc, #324]	; (8003800 <HAL_GPIO_Init+0x308>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d01f      	beq.n	8003700 <HAL_GPIO_Init+0x208>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a50      	ldr	r2, [pc, #320]	; (8003804 <HAL_GPIO_Init+0x30c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d019      	beq.n	80036fc <HAL_GPIO_Init+0x204>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a4f      	ldr	r2, [pc, #316]	; (8003808 <HAL_GPIO_Init+0x310>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_GPIO_Init+0x200>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a4e      	ldr	r2, [pc, #312]	; (800380c <HAL_GPIO_Init+0x314>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_GPIO_Init+0x1fc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a4d      	ldr	r2, [pc, #308]	; (8003810 <HAL_GPIO_Init+0x318>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a4c      	ldr	r2, [pc, #304]	; (8003814 <HAL_GPIO_Init+0x31c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_GPIO_Init+0x1f4>
 80036e8:	2307      	movs	r3, #7
 80036ea:	e00e      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036ec:	2308      	movs	r3, #8
 80036ee:	e00c      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036f0:	2306      	movs	r3, #6
 80036f2:	e00a      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036f4:	2305      	movs	r3, #5
 80036f6:	e008      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036f8:	2304      	movs	r3, #4
 80036fa:	e006      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036fc:	2303      	movs	r3, #3
 80036fe:	e004      	b.n	800370a <HAL_GPIO_Init+0x212>
 8003700:	2302      	movs	r3, #2
 8003702:	e002      	b.n	800370a <HAL_GPIO_Init+0x212>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_GPIO_Init+0x212>
 8003708:	2300      	movs	r3, #0
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	f002 0203 	and.w	r2, r2, #3
 8003710:	0092      	lsls	r2, r2, #2
 8003712:	4093      	lsls	r3, r2
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800371a:	4937      	ldr	r1, [pc, #220]	; (80037f8 <HAL_GPIO_Init+0x300>)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003728:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_GPIO_Init+0x320>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	43db      	mvns	r3, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800374c:	4a32      	ldr	r2, [pc, #200]	; (8003818 <HAL_GPIO_Init+0x320>)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_GPIO_Init+0x320>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003776:	4a28      	ldr	r2, [pc, #160]	; (8003818 <HAL_GPIO_Init+0x320>)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800377c:	4b26      	ldr	r3, [pc, #152]	; (8003818 <HAL_GPIO_Init+0x320>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <HAL_GPIO_Init+0x320>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_GPIO_Init+0x320>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037ca:	4a13      	ldr	r2, [pc, #76]	; (8003818 <HAL_GPIO_Init+0x320>)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	3301      	adds	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f47f ae91 	bne.w	8003508 <HAL_GPIO_Init+0x10>
  }
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40010000 	.word	0x40010000
 80037fc:	48000400 	.word	0x48000400
 8003800:	48000800 	.word	0x48000800
 8003804:	48000c00 	.word	0x48000c00
 8003808:	48001000 	.word	0x48001000
 800380c:	48001400 	.word	0x48001400
 8003810:	48001800 	.word	0x48001800
 8003814:	48001c00 	.word	0x48001c00
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003838:	e002      	b.n	8003840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800384c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384e:	b08f      	sub	sp, #60	; 0x3c
 8003850:	af0a      	add	r7, sp, #40	; 0x28
 8003852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e116      	b.n	8003a8c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fd fecb 	bl	8001614 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2203      	movs	r2, #3
 8003882:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f002 fbed 	bl	800607c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	687e      	ldr	r6, [r7, #4]
 80038aa:	466d      	mov	r5, sp
 80038ac:	f106 0410 	add.w	r4, r6, #16
 80038b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80038c0:	1d33      	adds	r3, r6, #4
 80038c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f002 fbad 	bl	8006024 <USB_CoreInit>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0d7      	b.n	8003a8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fbdb 	bl	800609e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e04a      	b.n	8003984 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	333d      	adds	r3, #61	; 0x3d
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	333c      	adds	r3, #60	; 0x3c
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	b298      	uxth	r0, r3
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	3342      	adds	r3, #66	; 0x42
 800392a:	4602      	mov	r2, r0
 800392c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800392e:	7bfa      	ldrb	r2, [r7, #15]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	333f      	adds	r3, #63	; 0x3f
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3344      	adds	r3, #68	; 0x44
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3348      	adds	r3, #72	; 0x48
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3350      	adds	r3, #80	; 0x50
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	3301      	adds	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d3af      	bcc.n	80038ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e044      	b.n	8003a1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a02:	7bfa      	ldrb	r2, [r7, #15]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	7bfa      	ldrb	r2, [r7, #15]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d3b5      	bcc.n	8003994 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	687e      	ldr	r6, [r7, #4]
 8003a30:	466d      	mov	r5, sp
 8003a32:	f106 0410 	add.w	r4, r6, #16
 8003a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a46:	1d33      	adds	r3, r6, #4
 8003a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a4a:	6838      	ldr	r0, [r7, #0]
 8003a4c:	f002 fb74 	bl	8006138 <USB_DevInit>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e014      	b.n	8003a8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d102      	bne.n	8003a80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f80a 	bl	8003a94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 fd1c 	bl	80064c2 <USB_DevDisconnect>

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	f043 0303 	orr.w	r3, r3, #3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aec:	d102      	bne.n	8003af4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af2:	e00b      	b.n	8003b0c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003af4:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b02:	d102      	bne.n	8003b0a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b08:	e000      	b.n	8003b0c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003b0a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40007000 	.word	0x40007000

08003b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d141      	bne.n	8003bae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b2a:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d131      	bne.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b38:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3e:	4a46      	ldr	r2, [pc, #280]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b48:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b50:	4a41      	ldr	r2, [pc, #260]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2232      	movs	r2, #50	; 0x32
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	0c9b      	lsrs	r3, r3, #18
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b6e:	e002      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b76:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d102      	bne.n	8003b8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f2      	bne.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d158      	bne.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e057      	b.n	8003c4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba2:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bac:	e04d      	b.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb4:	d141      	bne.n	8003c3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc2:	d131      	bne.n	8003c28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bca:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bd4:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2232      	movs	r2, #50	; 0x32
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	0c9b      	lsrs	r3, r3, #18
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bfa:	e002      	b.n	8003c02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d102      	bne.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f2      	bne.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d112      	bne.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e011      	b.n	8003c4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c38:	e007      	b.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c48:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	431bde83 	.word	0x431bde83

08003c64 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c72:	6053      	str	r3, [r2, #4]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40007000 	.word	0x40007000

08003c84 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c92:	6053      	str	r3, [r2, #4]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40007000 	.word	0x40007000

08003ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f000 bc16 	b.w	80044e4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb8:	4ba0      	ldr	r3, [pc, #640]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc2:	4b9e      	ldr	r3, [pc, #632]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80e4 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4c>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	f040 808b 	bne.w	8003dfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	f040 8087 	bne.w	8003dfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf0:	4b92      	ldr	r3, [pc, #584]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_OscConfig+0x64>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e3ed      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	4b8b      	ldr	r3, [pc, #556]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <HAL_RCC_OscConfig+0x7e>
 8003d18:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d20:	e005      	b.n	8003d2e <HAL_RCC_OscConfig+0x8a>
 8003d22:	4b86      	ldr	r3, [pc, #536]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d223      	bcs.n	8003d7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fdca 	bl	80048d0 <RCC_SetFlashLatencyFromMSIRange>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e3ce      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d46:	4b7d      	ldr	r3, [pc, #500]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d4c:	f043 0308 	orr.w	r3, r3, #8
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b7a      	ldr	r3, [pc, #488]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	4977      	ldr	r1, [pc, #476]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d64:	4b75      	ldr	r3, [pc, #468]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	4972      	ldr	r1, [pc, #456]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
 8003d78:	e025      	b.n	8003dc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d7a:	4b70      	ldr	r3, [pc, #448]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6f      	ldr	r2, [pc, #444]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d80:	f043 0308 	orr.w	r3, r3, #8
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b6d      	ldr	r3, [pc, #436]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	496a      	ldr	r1, [pc, #424]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d98:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	4965      	ldr	r1, [pc, #404]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fd8a 	bl	80048d0 <RCC_SetFlashLatencyFromMSIRange>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e38e      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dc6:	f000 fcbf 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	495a      	ldr	r1, [pc, #360]	; (8003f40 <HAL_RCC_OscConfig+0x29c>)
 8003dd8:	5ccb      	ldrb	r3, [r1, r3]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	fa22 f303 	lsr.w	r3, r2, r3
 8003de2:	4a58      	ldr	r2, [pc, #352]	; (8003f44 <HAL_RCC_OscConfig+0x2a0>)
 8003de4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003de6:	4b58      	ldr	r3, [pc, #352]	; (8003f48 <HAL_RCC_OscConfig+0x2a4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fd1c 	bl	8001828 <HAL_InitTick>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d052      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	e372      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d032      	beq.n	8003e6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e06:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a4c      	ldr	r2, [pc, #304]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e12:	f7fd fd59 	bl	80018c8 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e1a:	f7fd fd55 	bl	80018c8 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e35b      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e2c:	4b43      	ldr	r3, [pc, #268]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e38:	4b40      	ldr	r3, [pc, #256]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a3f      	ldr	r2, [pc, #252]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e3e:	f043 0308 	orr.w	r3, r3, #8
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	493a      	ldr	r1, [pc, #232]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	4935      	ldr	r1, [pc, #212]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	604b      	str	r3, [r1, #4]
 8003e6a:	e01a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e6c:	4b33      	ldr	r3, [pc, #204]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e78:	f7fd fd26 	bl	80018c8 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e80:	f7fd fd22 	bl	80018c8 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e328      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1dc>
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d073      	beq.n	8003f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x21c>
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d063      	beq.n	8003f94 <HAL_RCC_OscConfig+0x2f0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d15f      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e305      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d106      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e01d      	b.n	8003f2c <HAL_RCC_OscConfig+0x288>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x270>
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a0f      	ldr	r2, [pc, #60]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e00b      	b.n	8003f2c <HAL_RCC_OscConfig+0x288>
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <HAL_RCC_OscConfig+0x298>)
 8003f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01b      	beq.n	8003f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd fcc8 	bl	80018c8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	e010      	b.n	8003f5e <HAL_RCC_OscConfig+0x2ba>
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	0800660c 	.word	0x0800660c
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fd fcbc 	bl	80018c8 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e2c2      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f5e:	4baf      	ldr	r3, [pc, #700]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x2a8>
 8003f6a:	e014      	b.n	8003f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fcac 	bl	80018c8 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fd fca8 	bl	80018c8 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e2ae      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f86:	4ba5      	ldr	r3, [pc, #660]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x2d0>
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d060      	beq.n	8004064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x310>
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d119      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d116      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb4:	4b99      	ldr	r3, [pc, #612]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_OscConfig+0x328>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e28b      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b93      	ldr	r3, [pc, #588]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	4990      	ldr	r1, [pc, #576]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe0:	e040      	b.n	8004064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d023      	beq.n	8004032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fea:	4b8c      	ldr	r3, [pc, #560]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a8b      	ldr	r2, [pc, #556]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fc67 	bl	80018c8 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffe:	f7fd fc63 	bl	80018c8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e269      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004010:	4b82      	ldr	r3, [pc, #520]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401c:	4b7f      	ldr	r3, [pc, #508]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	497c      	ldr	r1, [pc, #496]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
 8004030:	e018      	b.n	8004064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004032:	4b7a      	ldr	r3, [pc, #488]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a79      	ldr	r2, [pc, #484]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8004038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd fc43 	bl	80018c8 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004046:	f7fd fc3f 	bl	80018c8 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e245      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004058:	4b70      	ldr	r3, [pc, #448]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d03c      	beq.n	80040ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01c      	beq.n	80040b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800407a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407e:	4a67      	ldr	r2, [pc, #412]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7fd fc1e 	bl	80018c8 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004090:	f7fd fc1a 	bl	80018c8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e220      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a2:	4b5e      	ldr	r3, [pc, #376]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ef      	beq.n	8004090 <HAL_RCC_OscConfig+0x3ec>
 80040b0:	e01b      	b.n	80040ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b2:	4b5a      	ldr	r3, [pc, #360]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80040b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b8:	4a58      	ldr	r2, [pc, #352]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fd fc01 	bl	80018c8 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ca:	f7fd fbfd 	bl	80018c8 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e203      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040dc:	4b4f      	ldr	r3, [pc, #316]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ef      	bne.n	80040ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80a6 	beq.w	8004244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f8:	2300      	movs	r3, #0
 80040fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040fc:	4b47      	ldr	r3, [pc, #284]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10d      	bne.n	8004124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004108:	4b44      	ldr	r3, [pc, #272]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	4a43      	ldr	r2, [pc, #268]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6593      	str	r3, [r2, #88]	; 0x58
 8004114:	4b41      	ldr	r3, [pc, #260]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004120:	2301      	movs	r3, #1
 8004122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004124:	4b3e      	ldr	r3, [pc, #248]	; (8004220 <HAL_RCC_OscConfig+0x57c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d118      	bne.n	8004162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004130:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_OscConfig+0x57c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a3a      	ldr	r2, [pc, #232]	; (8004220 <HAL_RCC_OscConfig+0x57c>)
 8004136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413c:	f7fd fbc4 	bl	80018c8 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004144:	f7fd fbc0 	bl	80018c8 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1c6      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004156:	4b32      	ldr	r3, [pc, #200]	; (8004220 <HAL_RCC_OscConfig+0x57c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d108      	bne.n	800417c <HAL_RCC_OscConfig+0x4d8>
 800416a:	4b2c      	ldr	r3, [pc, #176]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	4a2a      	ldr	r2, [pc, #168]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800417a:	e024      	b.n	80041c6 <HAL_RCC_OscConfig+0x522>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b05      	cmp	r3, #5
 8004182:	d110      	bne.n	80041a6 <HAL_RCC_OscConfig+0x502>
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4a24      	ldr	r2, [pc, #144]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004194:	4b21      	ldr	r3, [pc, #132]	; (800421c <HAL_RCC_OscConfig+0x578>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	4a20      	ldr	r2, [pc, #128]	; (800421c <HAL_RCC_OscConfig+0x578>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a4:	e00f      	b.n	80041c6 <HAL_RCC_OscConfig+0x522>
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	4a1b      	ldr	r2, [pc, #108]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b6:	4b19      	ldr	r3, [pc, #100]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80041be:	f023 0304 	bic.w	r3, r3, #4
 80041c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ce:	f7fd fb7b 	bl	80018c8 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d4:	e00a      	b.n	80041ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fd fb77 	bl	80018c8 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e17b      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_OscConfig+0x578>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ed      	beq.n	80041d6 <HAL_RCC_OscConfig+0x532>
 80041fa:	e01a      	b.n	8004232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fd fb64 	bl	80018c8 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004202:	e00f      	b.n	8004224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fd fb60 	bl	80018c8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d906      	bls.n	8004224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e164      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004224:	4ba8      	ldr	r3, [pc, #672]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e8      	bne.n	8004204 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004232:	7ffb      	ldrb	r3, [r7, #31]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004238:	4ba3      	ldr	r3, [pc, #652]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4aa2      	ldr	r2, [pc, #648]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 800423e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d03c      	beq.n	80042ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01c      	beq.n	8004292 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004258:	4b9b      	ldr	r3, [pc, #620]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 800425a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800425e:	4a9a      	ldr	r2, [pc, #616]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fd fb2e 	bl	80018c8 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004270:	f7fd fb2a 	bl	80018c8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e130      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004282:	4b91      	ldr	r3, [pc, #580]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0ef      	beq.n	8004270 <HAL_RCC_OscConfig+0x5cc>
 8004290:	e01b      	b.n	80042ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004292:	4b8d      	ldr	r3, [pc, #564]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004298:	4a8b      	ldr	r2, [pc, #556]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fd fb11 	bl	80018c8 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042aa:	f7fd fb0d 	bl	80018c8 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e113      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042bc:	4b82      	ldr	r3, [pc, #520]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80042be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ef      	bne.n	80042aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8107 	beq.w	80044e2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	2b02      	cmp	r3, #2
 80042da:	f040 80cb 	bne.w	8004474 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042de:	4b7a      	ldr	r3, [pc, #488]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 0203 	and.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d12c      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	3b01      	subs	r3, #1
 80042fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d123      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d11b      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d113      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	3b01      	subs	r3, #1
 8004332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d109      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	3b01      	subs	r3, #1
 8004346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d06d      	beq.n	8004428 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d068      	beq.n	8004424 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004352:	4b5d      	ldr	r3, [pc, #372]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800435e:	4b5a      	ldr	r3, [pc, #360]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0ba      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800436e:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a55      	ldr	r2, [pc, #340]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800437a:	f7fd faa5 	bl	80018c8 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fd faa1 	bl	80018c8 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0a7      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	4b4c      	ldr	r3, [pc, #304]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a0:	4b49      	ldr	r3, [pc, #292]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4b49      	ldr	r3, [pc, #292]	; (80044cc <HAL_RCC_OscConfig+0x828>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043b0:	3a01      	subs	r2, #1
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	4311      	orrs	r1, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ba:	0212      	lsls	r2, r2, #8
 80043bc:	4311      	orrs	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043c2:	0852      	lsrs	r2, r2, #1
 80043c4:	3a01      	subs	r2, #1
 80043c6:	0552      	lsls	r2, r2, #21
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043ce:	0852      	lsrs	r2, r2, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0652      	lsls	r2, r2, #25
 80043d4:	4311      	orrs	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043da:	06d2      	lsls	r2, r2, #27
 80043dc:	430a      	orrs	r2, r1
 80043de:	493a      	ldr	r1, [pc, #232]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043e4:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a37      	ldr	r2, [pc, #220]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80043ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043f0:	4b35      	ldr	r3, [pc, #212]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a34      	ldr	r2, [pc, #208]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043fc:	f7fd fa64 	bl	80018c8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fa60 	bl	80018c8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e066      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004422:	e05e      	b.n	80044e2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e05d      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004428:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d156      	bne.n	80044e2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004440:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800444a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800444c:	f7fd fa3c 	bl	80018c8 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004454:	f7fd fa38 	bl	80018c8 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e03e      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x7b0>
 8004472:	e036      	b.n	80044e2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d031      	beq.n	80044de <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004484:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	4a0c      	ldr	r2, [pc, #48]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 8004498:	f023 0303 	bic.w	r3, r3, #3
 800449c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <HAL_RCC_OscConfig+0x824>)
 80044a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fd fa0b 	bl	80018c8 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b4:	e00c      	b.n	80044d0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fd fa07 	bl	80018c8 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d905      	bls.n	80044d0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e00d      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
 80044c8:	40021000 	.word	0x40021000
 80044cc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x848>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ec      	bne.n	80044b6 <HAL_RCC_OscConfig+0x812>
 80044dc:	e001      	b.n	80044e2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e10f      	b.n	8004728 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004508:	4b89      	ldr	r3, [pc, #548]	; (8004730 <HAL_RCC_ClockConfig+0x240>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d910      	bls.n	8004538 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b86      	ldr	r3, [pc, #536]	; (8004730 <HAL_RCC_ClockConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 020f 	bic.w	r2, r3, #15
 800451e:	4984      	ldr	r1, [pc, #528]	; (8004730 <HAL_RCC_ClockConfig+0x240>)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b82      	ldr	r3, [pc, #520]	; (8004730 <HAL_RCC_ClockConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0f7      	b.n	8004728 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8089 	beq.w	8004658 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d133      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454e:	4b79      	ldr	r3, [pc, #484]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e0e4      	b.n	8004728 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800455e:	f000 fa11 	bl	8004984 <RCC_GetSysClockFreqFromPLLSource>
 8004562:	4603      	mov	r3, r0
 8004564:	4a74      	ldr	r2, [pc, #464]	; (8004738 <HAL_RCC_ClockConfig+0x248>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d955      	bls.n	8004616 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800456a:	4b72      	ldr	r3, [pc, #456]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004576:	4b6f      	ldr	r3, [pc, #444]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457e:	4a6d      	ldr	r2, [pc, #436]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e044      	b.n	8004616 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d03e      	beq.n	8004616 <HAL_RCC_ClockConfig+0x126>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d13a      	bne.n	8004616 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045a0:	4b64      	ldr	r3, [pc, #400]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a8:	4a62      	ldr	r2, [pc, #392]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80045aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e02f      	b.n	8004616 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045be:	4b5d      	ldr	r3, [pc, #372]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d115      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0ac      	b.n	8004728 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d6:	4b57      	ldr	r3, [pc, #348]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0a0      	b.n	8004728 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e6:	4b53      	ldr	r3, [pc, #332]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e098      	b.n	8004728 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045f6:	f000 f8a7 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4a4e      	ldr	r2, [pc, #312]	; (8004738 <HAL_RCC_ClockConfig+0x248>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d909      	bls.n	8004616 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004602:	4b4c      	ldr	r3, [pc, #304]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460a:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 800460c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004610:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4944      	ldr	r1, [pc, #272]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004628:	f7fd f94e 	bl	80018c8 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fd f94a 	bl	80018c8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e070      	b.n	8004728 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b3b      	ldr	r3, [pc, #236]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004664:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4930      	ldr	r1, [pc, #192]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
 8004676:	e008      	b.n	800468a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d105      	bne.n	800468a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800467e:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	4a2c      	ldr	r2, [pc, #176]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004688:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468a:	4b29      	ldr	r3, [pc, #164]	; (8004730 <HAL_RCC_ClockConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d210      	bcs.n	80046ba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <HAL_RCC_ClockConfig+0x240>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f023 020f 	bic.w	r2, r3, #15
 80046a0:	4923      	ldr	r1, [pc, #140]	; (8004730 <HAL_RCC_ClockConfig+0x240>)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_RCC_ClockConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d001      	beq.n	80046ba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e036      	b.n	8004728 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	4918      	ldr	r1, [pc, #96]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4910      	ldr	r1, [pc, #64]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046f8:	f000 f826 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <HAL_RCC_ClockConfig+0x244>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	490c      	ldr	r1, [pc, #48]	; (800473c <HAL_RCC_ClockConfig+0x24c>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x250>)
 8004716:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_RCC_ClockConfig+0x254>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fd f883 	bl	8001828 <HAL_InitTick>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]

  return status;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40022000 	.word	0x40022000
 8004734:	40021000 	.word	0x40021000
 8004738:	04c4b400 	.word	0x04c4b400
 800473c:	0800660c 	.word	0x0800660c
 8004740:	20000000 	.word	0x20000000
 8004744:	20000004 	.word	0x20000004

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004756:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004760:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x34>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d121      	bne.n	80047ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d11e      	bne.n	80047ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d107      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004788:	4b31      	ldr	r3, [pc, #196]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 800478a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e005      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004798:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047a4:	4a2b      	ldr	r2, [pc, #172]	; (8004854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d102      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047c0:	4b25      	ldr	r3, [pc, #148]	; (8004858 <HAL_RCC_GetSysClockFreq+0x110>)
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	e004      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047cc:	4b23      	ldr	r3, [pc, #140]	; (800485c <HAL_RCC_GetSysClockFreq+0x114>)
 80047ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d134      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047d6:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d003      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0xa6>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d003      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0xac>
 80047ec:	e005      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047ee:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_RCC_GetSysClockFreq+0x110>)
 80047f0:	617b      	str	r3, [r7, #20]
      break;
 80047f2:	e005      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <HAL_RCC_GetSysClockFreq+0x114>)
 80047f6:	617b      	str	r3, [r7, #20]
      break;
 80047f8:	e002      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	617b      	str	r3, [r7, #20]
      break;
 80047fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	3301      	adds	r3, #1
 800480c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	fb02 f203 	mul.w	r2, r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_RCC_GetSysClockFreq+0x108>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	0e5b      	lsrs	r3, r3, #25
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	3301      	adds	r3, #1
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004840:	69bb      	ldr	r3, [r7, #24]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3724      	adds	r7, #36	; 0x24
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	08006624 	.word	0x08006624
 8004858:	00f42400 	.word	0x00f42400
 800485c:	007a1200 	.word	0x007a1200

08004860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_RCC_GetHCLKFreq+0x14>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000000 	.word	0x20000000

08004878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800487c:	f7ff fff0 	bl	8004860 <HAL_RCC_GetHCLKFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	4904      	ldr	r1, [pc, #16]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40021000 	.word	0x40021000
 80048a0:	0800661c 	.word	0x0800661c

080048a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048a8:	f7ff ffda 	bl	8004860 <HAL_RCC_GetHCLKFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0adb      	lsrs	r3, r3, #11
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4904      	ldr	r1, [pc, #16]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000
 80048cc:	0800661c 	.word	0x0800661c

080048d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048e8:	f7ff f8f8 	bl	8003adc <HAL_PWREx_GetVoltageRange>
 80048ec:	6178      	str	r0, [r7, #20]
 80048ee:	e014      	b.n	800491a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f0:	4b22      	ldr	r3, [pc, #136]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	4a21      	ldr	r2, [pc, #132]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6593      	str	r3, [r2, #88]	; 0x58
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004908:	f7ff f8e8 	bl	8003adc <HAL_PWREx_GetVoltageRange>
 800490c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800490e:	4b1b      	ldr	r3, [pc, #108]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	4a1a      	ldr	r2, [pc, #104]	; (800497c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004918:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004920:	d10b      	bne.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	d913      	bls.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2ba0      	cmp	r3, #160	; 0xa0
 800492c:	d902      	bls.n	8004934 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800492e:	2302      	movs	r3, #2
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e00d      	b.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004934:	2301      	movs	r3, #1
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	e00a      	b.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b7f      	cmp	r3, #127	; 0x7f
 800493e:	d902      	bls.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004940:	2302      	movs	r3, #2
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e004      	b.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b70      	cmp	r3, #112	; 0x70
 800494a:	d101      	bne.n	8004950 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800494c:	2301      	movs	r3, #1
 800494e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 020f 	bic.w	r2, r3, #15
 8004958:	4909      	ldr	r1, [pc, #36]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	40022000 	.word	0x40022000

08004984 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800498e:	4b2d      	ldr	r3, [pc, #180]	; (8004a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d118      	bne.n	80049cc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800499a:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049a6:	4b27      	ldr	r3, [pc, #156]	; (8004a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e005      	b.n	80049c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049c2:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ca:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d003      	beq.n	80049e4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d003      	beq.n	80049ea <RCC_GetSysClockFreqFromPLLSource+0x66>
 80049e2:	e005      	b.n	80049f0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80049e4:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80049e6:	613b      	str	r3, [r7, #16]
    break;
 80049e8:	e005      	b.n	80049f6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049ec:	613b      	str	r3, [r7, #16]
    break;
 80049ee:	e002      	b.n	80049f6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	613b      	str	r3, [r7, #16]
    break;
 80049f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	3301      	adds	r3, #1
 8004a02:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	fb02 f203 	mul.w	r2, r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	0e5b      	lsrs	r3, r3, #25
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	3301      	adds	r3, #1
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004a36:	683b      	ldr	r3, [r7, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40021000 	.word	0x40021000
 8004a48:	08006624 	.word	0x08006624
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	007a1200 	.word	0x007a1200

08004a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a60:	2300      	movs	r3, #0
 8004a62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d040      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d02a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d825      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a7c:	2b60      	cmp	r3, #96	; 0x60
 8004a7e:	d026      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d821      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d006      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d81d      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d010      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a94:	e018      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a96:	4b89      	ldr	r3, [pc, #548]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a88      	ldr	r2, [pc, #544]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aa2:	e015      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fb02 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ab4:	e00c      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3320      	adds	r3, #32
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fbed 	bl	800529c <RCCEx_PLLSAI2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	74fb      	strb	r3, [r7, #19]
      break;
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ad6:	4b79      	ldr	r3, [pc, #484]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004adc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae4:	4975      	ldr	r1, [pc, #468]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004aec:	e001      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d047      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d030      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d82a      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b12:	d02a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b18:	d824      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b24:	d81e      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b30:	e018      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b32:	4b62      	ldr	r3, [pc, #392]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	4a61      	ldr	r2, [pc, #388]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b3e:	e015      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fab4 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b50:	e00c      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3320      	adds	r3, #32
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fb9f 	bl	800529c <RCCEx_PLLSAI2_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b62:	e003      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	74fb      	strb	r3, [r7, #19]
      break;
 8004b68:	e000      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b72:	4b52      	ldr	r3, [pc, #328]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	494e      	ldr	r1, [pc, #312]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b88:	e001      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8a:	7cfb      	ldrb	r3, [r7, #19]
 8004b8c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 809f 	beq.w	8004cda <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ba0:	4b46      	ldr	r3, [pc, #280]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb6:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bca:	60bb      	str	r3, [r7, #8]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a3a      	ldr	r2, [pc, #232]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bde:	f7fc fe73 	bl	80018c8 <HAL_GetTick>
 8004be2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004be4:	e009      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be6:	f7fc fe6f 	bl	80018c8 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d902      	bls.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	74fb      	strb	r3, [r7, #19]
        break;
 8004bf8:	e005      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bfa:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0ef      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d15b      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01f      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d019      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c2a:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c36:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c46:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c56:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d016      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fc fe2e 	bl	80018c8 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6e:	e00b      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c70:	f7fc fe2a 	bl	80018c8 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d902      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	74fb      	strb	r3, [r7, #19]
            break;
 8004c86:	e006      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0ec      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c96:	7cfb      	ldrb	r3, [r7, #19]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cb6:	7cfb      	ldrb	r3, [r7, #19]
 8004cb8:	74bb      	strb	r3, [r7, #18]
 8004cba:	e005      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc8:	7c7b      	ldrb	r3, [r7, #17]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d105      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cce:	4ba0      	ldr	r3, [pc, #640]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	4a9f      	ldr	r2, [pc, #636]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce6:	4b9a      	ldr	r3, [pc, #616]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f023 0203 	bic.w	r2, r3, #3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	4996      	ldr	r1, [pc, #600]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d08:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f023 020c 	bic.w	r2, r3, #12
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	498e      	ldr	r1, [pc, #568]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d2a:	4b89      	ldr	r3, [pc, #548]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	4985      	ldr	r1, [pc, #532]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d4c:	4b80      	ldr	r3, [pc, #512]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	497d      	ldr	r1, [pc, #500]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d6e:	4b78      	ldr	r3, [pc, #480]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7c:	4974      	ldr	r1, [pc, #464]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d90:	4b6f      	ldr	r3, [pc, #444]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	496c      	ldr	r1, [pc, #432]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004db2:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc0:	4963      	ldr	r1, [pc, #396]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dd4:	4b5e      	ldr	r3, [pc, #376]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de2:	495b      	ldr	r1, [pc, #364]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004df6:	4b56      	ldr	r3, [pc, #344]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	4952      	ldr	r1, [pc, #328]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e18:	4b4d      	ldr	r3, [pc, #308]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	494a      	ldr	r1, [pc, #296]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e3a:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	4941      	ldr	r1, [pc, #260]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e5c:	4b3c      	ldr	r3, [pc, #240]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e62:	f023 0203 	bic.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6a:	4939      	ldr	r1, [pc, #228]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d028      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e7e:	4b34      	ldr	r3, [pc, #208]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8c:	4930      	ldr	r1, [pc, #192]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9c:	d106      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e9e:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	4a2b      	ldr	r2, [pc, #172]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea8:	60d3      	str	r3, [r2, #12]
 8004eaa:	e011      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f8f9 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d04d      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ee4:	d108      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ef2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ef6:	e012      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ef8:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efe:	4a14      	ldr	r2, [pc, #80]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f04:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f16:	490e      	ldr	r1, [pc, #56]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f26:	d106      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f32:	60d3      	str	r3, [r2, #12]
 8004f34:	e020      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f3e:	d109      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f40:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a02      	ldr	r2, [pc, #8]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f4a:	60d3      	str	r3, [r2, #12]
 8004f4c:	e014      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2101      	movs	r1, #1
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f8a5 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d028      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f84:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f92:	4947      	ldr	r1, [pc, #284]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa4:	4b42      	ldr	r3, [pc, #264]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fae:	60d3      	str	r3, [r2, #12]
 8004fb0:	e011      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f876 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01e      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fe2:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff2:	492f      	ldr	r1, [pc, #188]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005004:	d10c      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	2102      	movs	r1, #2
 800500c:	4618      	mov	r0, r3
 800500e:	f000 f851 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800502c:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005032:	f023 0204 	bic.w	r2, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503c:	491c      	ldr	r1, [pc, #112]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005050:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005056:	f023 0218 	bic.w	r2, r3, #24
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	4913      	ldr	r1, [pc, #76]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d017      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800507a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005084:	490a      	ldr	r1, [pc, #40]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005096:	d105      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000

080050b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050c2:	4b72      	ldr	r3, [pc, #456]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00e      	beq.n	80050ec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050ce:	4b6f      	ldr	r3, [pc, #444]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d103      	bne.n	80050e6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
       ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d142      	bne.n	800516c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
 80050ea:	e03f      	b.n	800516c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d018      	beq.n	8005126 <RCCEx_PLLSAI1_Config+0x72>
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d825      	bhi.n	8005144 <RCCEx_PLLSAI1_Config+0x90>
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d002      	beq.n	8005102 <RCCEx_PLLSAI1_Config+0x4e>
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d009      	beq.n	8005114 <RCCEx_PLLSAI1_Config+0x60>
 8005100:	e020      	b.n	8005144 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005102:	4b62      	ldr	r3, [pc, #392]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d11d      	bne.n	800514a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005112:	e01a      	b.n	800514a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005114:	4b5d      	ldr	r3, [pc, #372]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511c:	2b00      	cmp	r3, #0
 800511e:	d116      	bne.n	800514e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005124:	e013      	b.n	800514e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005126:	4b59      	ldr	r3, [pc, #356]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10f      	bne.n	8005152 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005132:	4b56      	ldr	r3, [pc, #344]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005142:	e006      	b.n	8005152 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      break;
 8005148:	e004      	b.n	8005154 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800514a:	bf00      	nop
 800514c:	e002      	b.n	8005154 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005152:	bf00      	nop
    }

    if(status == HAL_OK)
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800515a:	4b4c      	ldr	r3, [pc, #304]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4949      	ldr	r1, [pc, #292]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005168:	4313      	orrs	r3, r2
 800516a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f040 8086 	bne.w	8005280 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005174:	4b45      	ldr	r3, [pc, #276]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a44      	ldr	r2, [pc, #272]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 800517a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800517e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005180:	f7fc fba2 	bl	80018c8 <HAL_GetTick>
 8005184:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005186:	e009      	b.n	800519c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005188:	f7fc fb9e 	bl	80018c8 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d902      	bls.n	800519c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	73fb      	strb	r3, [r7, #15]
        break;
 800519a:	e005      	b.n	80051a8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800519c:	4b3b      	ldr	r3, [pc, #236]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ef      	bne.n	8005188 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d168      	bne.n	8005280 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d113      	bne.n	80051dc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051b4:	4b35      	ldr	r3, [pc, #212]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	4b35      	ldr	r3, [pc, #212]	; (8005290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6892      	ldr	r2, [r2, #8]
 80051c0:	0211      	lsls	r1, r2, #8
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68d2      	ldr	r2, [r2, #12]
 80051c6:	06d2      	lsls	r2, r2, #27
 80051c8:	4311      	orrs	r1, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6852      	ldr	r2, [r2, #4]
 80051ce:	3a01      	subs	r2, #1
 80051d0:	0112      	lsls	r2, r2, #4
 80051d2:	430a      	orrs	r2, r1
 80051d4:	492d      	ldr	r1, [pc, #180]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	610b      	str	r3, [r1, #16]
 80051da:	e02d      	b.n	8005238 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d115      	bne.n	800520e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e2:	4b2a      	ldr	r3, [pc, #168]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6892      	ldr	r2, [r2, #8]
 80051ee:	0211      	lsls	r1, r2, #8
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6912      	ldr	r2, [r2, #16]
 80051f4:	0852      	lsrs	r2, r2, #1
 80051f6:	3a01      	subs	r2, #1
 80051f8:	0552      	lsls	r2, r2, #21
 80051fa:	4311      	orrs	r1, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6852      	ldr	r2, [r2, #4]
 8005200:	3a01      	subs	r2, #1
 8005202:	0112      	lsls	r2, r2, #4
 8005204:	430a      	orrs	r2, r1
 8005206:	4921      	ldr	r1, [pc, #132]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005208:	4313      	orrs	r3, r2
 800520a:	610b      	str	r3, [r1, #16]
 800520c:	e014      	b.n	8005238 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800520e:	4b1f      	ldr	r3, [pc, #124]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	4b21      	ldr	r3, [pc, #132]	; (8005298 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6892      	ldr	r2, [r2, #8]
 800521a:	0211      	lsls	r1, r2, #8
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6952      	ldr	r2, [r2, #20]
 8005220:	0852      	lsrs	r2, r2, #1
 8005222:	3a01      	subs	r2, #1
 8005224:	0652      	lsls	r2, r2, #25
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6852      	ldr	r2, [r2, #4]
 800522c:	3a01      	subs	r2, #1
 800522e:	0112      	lsls	r2, r2, #4
 8005230:	430a      	orrs	r2, r1
 8005232:	4916      	ldr	r1, [pc, #88]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005234:	4313      	orrs	r3, r2
 8005236:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005238:	4b14      	ldr	r3, [pc, #80]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a13      	ldr	r2, [pc, #76]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 800523e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005242:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005244:	f7fc fb40 	bl	80018c8 <HAL_GetTick>
 8005248:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800524a:	e009      	b.n	8005260 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800524c:	f7fc fb3c 	bl	80018c8 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d902      	bls.n	8005260 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	73fb      	strb	r3, [r7, #15]
          break;
 800525e:	e005      	b.n	800526c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0ef      	beq.n	800524c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	4904      	ldr	r1, [pc, #16]	; (800528c <RCCEx_PLLSAI1_Config+0x1d8>)
 800527c:	4313      	orrs	r3, r2
 800527e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	07ff800f 	.word	0x07ff800f
 8005294:	ff9f800f 	.word	0xff9f800f
 8005298:	f9ff800f 	.word	0xf9ff800f

0800529c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052aa:	4b72      	ldr	r3, [pc, #456]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00e      	beq.n	80052d4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052b6:	4b6f      	ldr	r3, [pc, #444]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0203 	and.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d103      	bne.n	80052ce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
       ||
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d142      	bne.n	8005354 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	e03f      	b.n	8005354 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d018      	beq.n	800530e <RCCEx_PLLSAI2_Config+0x72>
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d825      	bhi.n	800532c <RCCEx_PLLSAI2_Config+0x90>
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d002      	beq.n	80052ea <RCCEx_PLLSAI2_Config+0x4e>
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d009      	beq.n	80052fc <RCCEx_PLLSAI2_Config+0x60>
 80052e8:	e020      	b.n	800532c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ea:	4b62      	ldr	r3, [pc, #392]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11d      	bne.n	8005332 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052fa:	e01a      	b.n	8005332 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052fc:	4b5d      	ldr	r3, [pc, #372]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005304:	2b00      	cmp	r3, #0
 8005306:	d116      	bne.n	8005336 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800530c:	e013      	b.n	8005336 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800530e:	4b59      	ldr	r3, [pc, #356]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10f      	bne.n	800533a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800531a:	4b56      	ldr	r3, [pc, #344]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800532a:	e006      	b.n	800533a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      break;
 8005330:	e004      	b.n	800533c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800533a:	bf00      	nop
    }

    if(status == HAL_OK)
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d108      	bne.n	8005354 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005342:	4b4c      	ldr	r3, [pc, #304]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 0203 	bic.w	r2, r3, #3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4949      	ldr	r1, [pc, #292]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 8086 	bne.w	8005468 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800535c:	4b45      	ldr	r3, [pc, #276]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a44      	ldr	r2, [pc, #272]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005368:	f7fc faae 	bl	80018c8 <HAL_GetTick>
 800536c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800536e:	e009      	b.n	8005384 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005370:	f7fc faaa 	bl	80018c8 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d902      	bls.n	8005384 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	73fb      	strb	r3, [r7, #15]
        break;
 8005382:	e005      	b.n	8005390 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005384:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ef      	bne.n	8005370 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d168      	bne.n	8005468 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d113      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800539c:	4b35      	ldr	r3, [pc, #212]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	4b35      	ldr	r3, [pc, #212]	; (8005478 <RCCEx_PLLSAI2_Config+0x1dc>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6892      	ldr	r2, [r2, #8]
 80053a8:	0211      	lsls	r1, r2, #8
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	68d2      	ldr	r2, [r2, #12]
 80053ae:	06d2      	lsls	r2, r2, #27
 80053b0:	4311      	orrs	r1, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6852      	ldr	r2, [r2, #4]
 80053b6:	3a01      	subs	r2, #1
 80053b8:	0112      	lsls	r2, r2, #4
 80053ba:	430a      	orrs	r2, r1
 80053bc:	492d      	ldr	r1, [pc, #180]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	614b      	str	r3, [r1, #20]
 80053c2:	e02d      	b.n	8005420 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d115      	bne.n	80053f6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053ca:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	4b2b      	ldr	r3, [pc, #172]	; (800547c <RCCEx_PLLSAI2_Config+0x1e0>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6892      	ldr	r2, [r2, #8]
 80053d6:	0211      	lsls	r1, r2, #8
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6912      	ldr	r2, [r2, #16]
 80053dc:	0852      	lsrs	r2, r2, #1
 80053de:	3a01      	subs	r2, #1
 80053e0:	0552      	lsls	r2, r2, #21
 80053e2:	4311      	orrs	r1, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6852      	ldr	r2, [r2, #4]
 80053e8:	3a01      	subs	r2, #1
 80053ea:	0112      	lsls	r2, r2, #4
 80053ec:	430a      	orrs	r2, r1
 80053ee:	4921      	ldr	r1, [pc, #132]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	614b      	str	r3, [r1, #20]
 80053f4:	e014      	b.n	8005420 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	4b21      	ldr	r3, [pc, #132]	; (8005480 <RCCEx_PLLSAI2_Config+0x1e4>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6892      	ldr	r2, [r2, #8]
 8005402:	0211      	lsls	r1, r2, #8
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6952      	ldr	r2, [r2, #20]
 8005408:	0852      	lsrs	r2, r2, #1
 800540a:	3a01      	subs	r2, #1
 800540c:	0652      	lsls	r2, r2, #25
 800540e:	4311      	orrs	r1, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6852      	ldr	r2, [r2, #4]
 8005414:	3a01      	subs	r2, #1
 8005416:	0112      	lsls	r2, r2, #4
 8005418:	430a      	orrs	r2, r1
 800541a:	4916      	ldr	r1, [pc, #88]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a13      	ldr	r2, [pc, #76]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542c:	f7fc fa4c 	bl	80018c8 <HAL_GetTick>
 8005430:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005432:	e009      	b.n	8005448 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005434:	f7fc fa48 	bl	80018c8 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d902      	bls.n	8005448 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	73fb      	strb	r3, [r7, #15]
          break;
 8005446:	e005      	b.n	8005454 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ef      	beq.n	8005434 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	4904      	ldr	r1, [pc, #16]	; (8005474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005464:	4313      	orrs	r3, r2
 8005466:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005468:	7bfb      	ldrb	r3, [r7, #15]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40021000 	.word	0x40021000
 8005478:	07ff800f 	.word	0x07ff800f
 800547c:	ff9f800f 	.word	0xff9f800f
 8005480:	f9ff800f 	.word	0xf9ff800f

08005484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e042      	b.n	800551c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7fb ffc7 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2224      	movs	r2, #36	; 0x24
 80054b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f82c 	bl	8005524 <UART_SetConfig>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e022      	b.n	800551c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fae8 	bl	8005ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb6f 	bl	8005bf8 <UART_CheckIdleState>
 800551a:	4603      	mov	r3, r0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005524:	b5b0      	push	{r4, r5, r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	4313      	orrs	r3, r2
 8005546:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4bb1      	ldr	r3, [pc, #708]	; (8005814 <UART_SetConfig+0x2f0>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	69f9      	ldr	r1, [r7, #28]
 8005558:	430b      	orrs	r3, r1
 800555a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4aa6      	ldr	r2, [pc, #664]	; (8005818 <UART_SetConfig+0x2f4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d004      	beq.n	800558c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	4313      	orrs	r3, r2
 800558a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005596:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	69f9      	ldr	r1, [r7, #28]
 80055a0:	430b      	orrs	r3, r1
 80055a2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	f023 010f 	bic.w	r1, r3, #15
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a97      	ldr	r2, [pc, #604]	; (800581c <UART_SetConfig+0x2f8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d120      	bne.n	8005606 <UART_SetConfig+0xe2>
 80055c4:	4b96      	ldr	r3, [pc, #600]	; (8005820 <UART_SetConfig+0x2fc>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d816      	bhi.n	8005600 <UART_SetConfig+0xdc>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0xb4>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055ef 	.word	0x080055ef
 80055e4:	080055fb 	.word	0x080055fb
 80055e8:	2301      	movs	r3, #1
 80055ea:	76fb      	strb	r3, [r7, #27]
 80055ec:	e0e7      	b.n	80057be <UART_SetConfig+0x29a>
 80055ee:	2302      	movs	r3, #2
 80055f0:	76fb      	strb	r3, [r7, #27]
 80055f2:	e0e4      	b.n	80057be <UART_SetConfig+0x29a>
 80055f4:	2304      	movs	r3, #4
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	e0e1      	b.n	80057be <UART_SetConfig+0x29a>
 80055fa:	2308      	movs	r3, #8
 80055fc:	76fb      	strb	r3, [r7, #27]
 80055fe:	e0de      	b.n	80057be <UART_SetConfig+0x29a>
 8005600:	2310      	movs	r3, #16
 8005602:	76fb      	strb	r3, [r7, #27]
 8005604:	e0db      	b.n	80057be <UART_SetConfig+0x29a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a86      	ldr	r2, [pc, #536]	; (8005824 <UART_SetConfig+0x300>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d132      	bne.n	8005676 <UART_SetConfig+0x152>
 8005610:	4b83      	ldr	r3, [pc, #524]	; (8005820 <UART_SetConfig+0x2fc>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b0c      	cmp	r3, #12
 800561c:	d828      	bhi.n	8005670 <UART_SetConfig+0x14c>
 800561e:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0x100>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005659 	.word	0x08005659
 8005628:	08005671 	.word	0x08005671
 800562c:	08005671 	.word	0x08005671
 8005630:	08005671 	.word	0x08005671
 8005634:	08005665 	.word	0x08005665
 8005638:	08005671 	.word	0x08005671
 800563c:	08005671 	.word	0x08005671
 8005640:	08005671 	.word	0x08005671
 8005644:	0800565f 	.word	0x0800565f
 8005648:	08005671 	.word	0x08005671
 800564c:	08005671 	.word	0x08005671
 8005650:	08005671 	.word	0x08005671
 8005654:	0800566b 	.word	0x0800566b
 8005658:	2300      	movs	r3, #0
 800565a:	76fb      	strb	r3, [r7, #27]
 800565c:	e0af      	b.n	80057be <UART_SetConfig+0x29a>
 800565e:	2302      	movs	r3, #2
 8005660:	76fb      	strb	r3, [r7, #27]
 8005662:	e0ac      	b.n	80057be <UART_SetConfig+0x29a>
 8005664:	2304      	movs	r3, #4
 8005666:	76fb      	strb	r3, [r7, #27]
 8005668:	e0a9      	b.n	80057be <UART_SetConfig+0x29a>
 800566a:	2308      	movs	r3, #8
 800566c:	76fb      	strb	r3, [r7, #27]
 800566e:	e0a6      	b.n	80057be <UART_SetConfig+0x29a>
 8005670:	2310      	movs	r3, #16
 8005672:	76fb      	strb	r3, [r7, #27]
 8005674:	e0a3      	b.n	80057be <UART_SetConfig+0x29a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6b      	ldr	r2, [pc, #428]	; (8005828 <UART_SetConfig+0x304>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d120      	bne.n	80056c2 <UART_SetConfig+0x19e>
 8005680:	4b67      	ldr	r3, [pc, #412]	; (8005820 <UART_SetConfig+0x2fc>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800568a:	2b30      	cmp	r3, #48	; 0x30
 800568c:	d013      	beq.n	80056b6 <UART_SetConfig+0x192>
 800568e:	2b30      	cmp	r3, #48	; 0x30
 8005690:	d814      	bhi.n	80056bc <UART_SetConfig+0x198>
 8005692:	2b20      	cmp	r3, #32
 8005694:	d009      	beq.n	80056aa <UART_SetConfig+0x186>
 8005696:	2b20      	cmp	r3, #32
 8005698:	d810      	bhi.n	80056bc <UART_SetConfig+0x198>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <UART_SetConfig+0x180>
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d006      	beq.n	80056b0 <UART_SetConfig+0x18c>
 80056a2:	e00b      	b.n	80056bc <UART_SetConfig+0x198>
 80056a4:	2300      	movs	r3, #0
 80056a6:	76fb      	strb	r3, [r7, #27]
 80056a8:	e089      	b.n	80057be <UART_SetConfig+0x29a>
 80056aa:	2302      	movs	r3, #2
 80056ac:	76fb      	strb	r3, [r7, #27]
 80056ae:	e086      	b.n	80057be <UART_SetConfig+0x29a>
 80056b0:	2304      	movs	r3, #4
 80056b2:	76fb      	strb	r3, [r7, #27]
 80056b4:	e083      	b.n	80057be <UART_SetConfig+0x29a>
 80056b6:	2308      	movs	r3, #8
 80056b8:	76fb      	strb	r3, [r7, #27]
 80056ba:	e080      	b.n	80057be <UART_SetConfig+0x29a>
 80056bc:	2310      	movs	r3, #16
 80056be:	76fb      	strb	r3, [r7, #27]
 80056c0:	e07d      	b.n	80057be <UART_SetConfig+0x29a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a59      	ldr	r2, [pc, #356]	; (800582c <UART_SetConfig+0x308>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d120      	bne.n	800570e <UART_SetConfig+0x1ea>
 80056cc:	4b54      	ldr	r3, [pc, #336]	; (8005820 <UART_SetConfig+0x2fc>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056d6:	2bc0      	cmp	r3, #192	; 0xc0
 80056d8:	d013      	beq.n	8005702 <UART_SetConfig+0x1de>
 80056da:	2bc0      	cmp	r3, #192	; 0xc0
 80056dc:	d814      	bhi.n	8005708 <UART_SetConfig+0x1e4>
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d009      	beq.n	80056f6 <UART_SetConfig+0x1d2>
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d810      	bhi.n	8005708 <UART_SetConfig+0x1e4>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <UART_SetConfig+0x1cc>
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d006      	beq.n	80056fc <UART_SetConfig+0x1d8>
 80056ee:	e00b      	b.n	8005708 <UART_SetConfig+0x1e4>
 80056f0:	2300      	movs	r3, #0
 80056f2:	76fb      	strb	r3, [r7, #27]
 80056f4:	e063      	b.n	80057be <UART_SetConfig+0x29a>
 80056f6:	2302      	movs	r3, #2
 80056f8:	76fb      	strb	r3, [r7, #27]
 80056fa:	e060      	b.n	80057be <UART_SetConfig+0x29a>
 80056fc:	2304      	movs	r3, #4
 80056fe:	76fb      	strb	r3, [r7, #27]
 8005700:	e05d      	b.n	80057be <UART_SetConfig+0x29a>
 8005702:	2308      	movs	r3, #8
 8005704:	76fb      	strb	r3, [r7, #27]
 8005706:	e05a      	b.n	80057be <UART_SetConfig+0x29a>
 8005708:	2310      	movs	r3, #16
 800570a:	76fb      	strb	r3, [r7, #27]
 800570c:	e057      	b.n	80057be <UART_SetConfig+0x29a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a47      	ldr	r2, [pc, #284]	; (8005830 <UART_SetConfig+0x30c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d125      	bne.n	8005764 <UART_SetConfig+0x240>
 8005718:	4b41      	ldr	r3, [pc, #260]	; (8005820 <UART_SetConfig+0x2fc>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005726:	d017      	beq.n	8005758 <UART_SetConfig+0x234>
 8005728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572c:	d817      	bhi.n	800575e <UART_SetConfig+0x23a>
 800572e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005732:	d00b      	beq.n	800574c <UART_SetConfig+0x228>
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d811      	bhi.n	800575e <UART_SetConfig+0x23a>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <UART_SetConfig+0x222>
 800573e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005742:	d006      	beq.n	8005752 <UART_SetConfig+0x22e>
 8005744:	e00b      	b.n	800575e <UART_SetConfig+0x23a>
 8005746:	2300      	movs	r3, #0
 8005748:	76fb      	strb	r3, [r7, #27]
 800574a:	e038      	b.n	80057be <UART_SetConfig+0x29a>
 800574c:	2302      	movs	r3, #2
 800574e:	76fb      	strb	r3, [r7, #27]
 8005750:	e035      	b.n	80057be <UART_SetConfig+0x29a>
 8005752:	2304      	movs	r3, #4
 8005754:	76fb      	strb	r3, [r7, #27]
 8005756:	e032      	b.n	80057be <UART_SetConfig+0x29a>
 8005758:	2308      	movs	r3, #8
 800575a:	76fb      	strb	r3, [r7, #27]
 800575c:	e02f      	b.n	80057be <UART_SetConfig+0x29a>
 800575e:	2310      	movs	r3, #16
 8005760:	76fb      	strb	r3, [r7, #27]
 8005762:	e02c      	b.n	80057be <UART_SetConfig+0x29a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <UART_SetConfig+0x2f4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d125      	bne.n	80057ba <UART_SetConfig+0x296>
 800576e:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <UART_SetConfig+0x2fc>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800577c:	d017      	beq.n	80057ae <UART_SetConfig+0x28a>
 800577e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005782:	d817      	bhi.n	80057b4 <UART_SetConfig+0x290>
 8005784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005788:	d00b      	beq.n	80057a2 <UART_SetConfig+0x27e>
 800578a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578e:	d811      	bhi.n	80057b4 <UART_SetConfig+0x290>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <UART_SetConfig+0x278>
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d006      	beq.n	80057a8 <UART_SetConfig+0x284>
 800579a:	e00b      	b.n	80057b4 <UART_SetConfig+0x290>
 800579c:	2300      	movs	r3, #0
 800579e:	76fb      	strb	r3, [r7, #27]
 80057a0:	e00d      	b.n	80057be <UART_SetConfig+0x29a>
 80057a2:	2302      	movs	r3, #2
 80057a4:	76fb      	strb	r3, [r7, #27]
 80057a6:	e00a      	b.n	80057be <UART_SetConfig+0x29a>
 80057a8:	2304      	movs	r3, #4
 80057aa:	76fb      	strb	r3, [r7, #27]
 80057ac:	e007      	b.n	80057be <UART_SetConfig+0x29a>
 80057ae:	2308      	movs	r3, #8
 80057b0:	76fb      	strb	r3, [r7, #27]
 80057b2:	e004      	b.n	80057be <UART_SetConfig+0x29a>
 80057b4:	2310      	movs	r3, #16
 80057b6:	76fb      	strb	r3, [r7, #27]
 80057b8:	e001      	b.n	80057be <UART_SetConfig+0x29a>
 80057ba:	2310      	movs	r3, #16
 80057bc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a15      	ldr	r2, [pc, #84]	; (8005818 <UART_SetConfig+0x2f4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	f040 809f 	bne.w	8005908 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057ca:	7efb      	ldrb	r3, [r7, #27]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d837      	bhi.n	8005840 <UART_SetConfig+0x31c>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0x2b4>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005805 	.word	0x08005805
 80057e4:	08005841 	.word	0x08005841
 80057e8:	0800580b 	.word	0x0800580b
 80057ec:	08005841 	.word	0x08005841
 80057f0:	08005841 	.word	0x08005841
 80057f4:	08005841 	.word	0x08005841
 80057f8:	08005839 	.word	0x08005839
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fc:	f7ff f83c 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005800:	6178      	str	r0, [r7, #20]
        break;
 8005802:	e022      	b.n	800584a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <UART_SetConfig+0x310>)
 8005806:	617b      	str	r3, [r7, #20]
        break;
 8005808:	e01f      	b.n	800584a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580a:	f7fe ff9d 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 800580e:	6178      	str	r0, [r7, #20]
        break;
 8005810:	e01b      	b.n	800584a <UART_SetConfig+0x326>
 8005812:	bf00      	nop
 8005814:	cfff69f3 	.word	0xcfff69f3
 8005818:	40008000 	.word	0x40008000
 800581c:	40013800 	.word	0x40013800
 8005820:	40021000 	.word	0x40021000
 8005824:	40004400 	.word	0x40004400
 8005828:	40004800 	.word	0x40004800
 800582c:	40004c00 	.word	0x40004c00
 8005830:	40005000 	.word	0x40005000
 8005834:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583c:	617b      	str	r3, [r7, #20]
        break;
 800583e:	e004      	b.n	800584a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	76bb      	strb	r3, [r7, #26]
        break;
 8005848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8119 	beq.w	8005a84 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	4a95      	ldr	r2, [pc, #596]	; (8005aac <UART_SetConfig+0x588>)
 8005858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800585c:	461a      	mov	r2, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	fbb3 f3f2 	udiv	r3, r3, r2
 8005864:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	4413      	add	r3, r2
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	d305      	bcc.n	8005882 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	d902      	bls.n	8005888 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	76bb      	strb	r3, [r7, #26]
 8005886:	e0fd      	b.n	8005a84 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4618      	mov	r0, r3
 800588c:	f04f 0100 	mov.w	r1, #0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	4a85      	ldr	r2, [pc, #532]	; (8005aac <UART_SetConfig+0x588>)
 8005896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800589a:	b29a      	uxth	r2, r3
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	f7fb f8a4 	bl	80009ec <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4610      	mov	r0, r2
 80058aa:	4619      	mov	r1, r3
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	020b      	lsls	r3, r1, #8
 80058b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058ba:	0202      	lsls	r2, r0, #8
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	6849      	ldr	r1, [r1, #4]
 80058c0:	0849      	lsrs	r1, r1, #1
 80058c2:	4608      	mov	r0, r1
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	1814      	adds	r4, r2, r0
 80058ca:	eb43 0501 	adc.w	r5, r3, r1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	4620      	mov	r0, r4
 80058da:	4629      	mov	r1, r5
 80058dc:	f7fb f886 	bl	80009ec <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ee:	d308      	bcc.n	8005902 <UART_SetConfig+0x3de>
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f6:	d204      	bcs.n	8005902 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	60da      	str	r2, [r3, #12]
 8005900:	e0c0      	b.n	8005a84 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	76bb      	strb	r3, [r7, #26]
 8005906:	e0bd      	b.n	8005a84 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005910:	d164      	bne.n	80059dc <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005912:	7efb      	ldrb	r3, [r7, #27]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d828      	bhi.n	800596a <UART_SetConfig+0x446>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <UART_SetConfig+0x3fc>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005955 	.word	0x08005955
 800592c:	0800596b 	.word	0x0800596b
 8005930:	0800595b 	.word	0x0800595b
 8005934:	0800596b 	.word	0x0800596b
 8005938:	0800596b 	.word	0x0800596b
 800593c:	0800596b 	.word	0x0800596b
 8005940:	08005963 	.word	0x08005963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005944:	f7fe ff98 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005948:	6178      	str	r0, [r7, #20]
        break;
 800594a:	e013      	b.n	8005974 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800594c:	f7fe ffaa 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8005950:	6178      	str	r0, [r7, #20]
        break;
 8005952:	e00f      	b.n	8005974 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4b56      	ldr	r3, [pc, #344]	; (8005ab0 <UART_SetConfig+0x58c>)
 8005956:	617b      	str	r3, [r7, #20]
        break;
 8005958:	e00c      	b.n	8005974 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fe fef5 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 800595e:	6178      	str	r0, [r7, #20]
        break;
 8005960:	e008      	b.n	8005974 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005966:	617b      	str	r3, [r7, #20]
        break;
 8005968:	e004      	b.n	8005974 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	76bb      	strb	r3, [r7, #26]
        break;
 8005972:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8084 	beq.w	8005a84 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	4a4a      	ldr	r2, [pc, #296]	; (8005aac <UART_SetConfig+0x588>)
 8005982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005986:	461a      	mov	r2, r3
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fbb3 f3f2 	udiv	r3, r3, r2
 800598e:	005a      	lsls	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	441a      	add	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a0:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b0f      	cmp	r3, #15
 80059a6:	d916      	bls.n	80059d6 <UART_SetConfig+0x4b2>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ae:	d212      	bcs.n	80059d6 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f023 030f 	bic.w	r3, r3, #15
 80059b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	89fb      	ldrh	r3, [r7, #14]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	89fa      	ldrh	r2, [r7, #14]
 80059d2:	60da      	str	r2, [r3, #12]
 80059d4:	e056      	b.n	8005a84 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	76bb      	strb	r3, [r7, #26]
 80059da:	e053      	b.n	8005a84 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059dc:	7efb      	ldrb	r3, [r7, #27]
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d827      	bhi.n	8005a32 <UART_SetConfig+0x50e>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x4c4>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a33 	.word	0x08005a33
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fe ff34 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005a10:	6178      	str	r0, [r7, #20]
        break;
 8005a12:	e013      	b.n	8005a3c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fe ff46 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8005a18:	6178      	str	r0, [r7, #20]
        break;
 8005a1a:	e00f      	b.n	8005a3c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <UART_SetConfig+0x58c>)
 8005a1e:	617b      	str	r3, [r7, #20]
        break;
 8005a20:	e00c      	b.n	8005a3c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fe fe91 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8005a26:	6178      	str	r0, [r7, #20]
        break;
 8005a28:	e008      	b.n	8005a3c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	617b      	str	r3, [r7, #20]
        break;
 8005a30:	e004      	b.n	8005a3c <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	76bb      	strb	r3, [r7, #26]
        break;
 8005a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	4a19      	ldr	r2, [pc, #100]	; (8005aac <UART_SetConfig+0x588>)
 8005a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	441a      	add	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b0f      	cmp	r3, #15
 8005a6a:	d909      	bls.n	8005a80 <UART_SetConfig+0x55c>
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a72:	d205      	bcs.n	8005a80 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	e001      	b.n	8005a84 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005aa0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	08006654 	.word	0x08006654
 8005ab0:	00f42400 	.word	0x00f42400

08005ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01a      	beq.n	8005bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb2:	d10a      	bne.n	8005bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	605a      	str	r2, [r3, #4]
  }
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c08:	f7fb fe5e 	bl	80018c8 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d10e      	bne.n	8005c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f82f 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e025      	b.n	8005c86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d10e      	bne.n	8005c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f819 	bl	8005c8e <UART_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00f      	b.n	8005c86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b09c      	sub	sp, #112	; 0x70
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	603b      	str	r3, [r7, #0]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9e:	e0a9      	b.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	f000 80a5 	beq.w	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005caa:	f7fb fe0d 	bl	80018c8 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d140      	bne.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e6      	bne.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	663b      	str	r3, [r7, #96]	; 0x60
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e069      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d051      	beq.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5e:	d149      	bne.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e6      	bne.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	613b      	str	r3, [r7, #16]
   return(result);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dbc:	623a      	str	r2, [r7, #32]
 8005dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	69f9      	ldr	r1, [r7, #28]
 8005dc2:	6a3a      	ldr	r2, [r7, #32]
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e010      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f43f af46 	beq.w	8005ca0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3770      	adds	r7, #112	; 0x70
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e027      	b.n	8005e84 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	; 0x24
 8005e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e02d      	b.n	8005f04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f84f 	bl	8005f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e02d      	b.n	8005f80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f811 	bl	8005f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fa8:	e031      	b.n	800600e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005faa:	2308      	movs	r3, #8
 8005fac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fae:	2308      	movs	r3, #8
 8005fb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	0e5b      	lsrs	r3, r3, #25
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	0f5b      	lsrs	r3, r3, #29
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	7b3a      	ldrb	r2, [r7, #12]
 8005fd6:	4911      	ldr	r1, [pc, #68]	; (800601c <UARTEx_SetNbDataToProcess+0x94>)
 8005fd8:	5c8a      	ldrb	r2, [r1, r2]
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fde:	7b3a      	ldrb	r2, [r7, #12]
 8005fe0:	490f      	ldr	r1, [pc, #60]	; (8006020 <UARTEx_SetNbDataToProcess+0x98>)
 8005fe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	7b7a      	ldrb	r2, [r7, #13]
 8005ff4:	4909      	ldr	r1, [pc, #36]	; (800601c <UARTEx_SetNbDataToProcess+0x94>)
 8005ff6:	5c8a      	ldrb	r2, [r1, r2]
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ffc:	7b7a      	ldrb	r2, [r7, #13]
 8005ffe:	4908      	ldr	r1, [pc, #32]	; (8006020 <UARTEx_SetNbDataToProcess+0x98>)
 8006000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006002:	fb93 f3f2 	sdiv	r3, r3, r2
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	0800666c 	.word	0x0800666c
 8006020:	08006674 	.word	0x08006674

08006024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006024:	b084      	sub	sp, #16
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	f107 001c 	add.w	r0, r7, #28
 8006032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa6c 	bl	8006520 <USB_CoreReset>
 8006048:	4603      	mov	r3, r0
 800604a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800604c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
 800605e:	e005      	b.n	800606c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006078:	b004      	add	sp, #16
 800607a:	4770      	bx	lr

0800607c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f023 0201 	bic.w	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d115      	bne.n	80060ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060cc:	2001      	movs	r0, #1
 80060ce:	f7fb fc07 	bl	80018e0 <HAL_Delay>
      ms++;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3301      	adds	r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa13 	bl	8006504 <USB_GetMode>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d01e      	beq.n	8006122 <USB_SetCurrentMode+0x84>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b31      	cmp	r3, #49	; 0x31
 80060e8:	d9f0      	bls.n	80060cc <USB_SetCurrentMode+0x2e>
 80060ea:	e01a      	b.n	8006122 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d115      	bne.n	800611e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060fe:	2001      	movs	r0, #1
 8006100:	f7fb fbee 	bl	80018e0 <HAL_Delay>
      ms++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9fa 	bl	8006504 <USB_GetMode>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <USB_SetCurrentMode+0x84>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b31      	cmp	r3, #49	; 0x31
 800611a:	d9f0      	bls.n	80060fe <USB_SetCurrentMode+0x60>
 800611c:	e001      	b.n	8006122 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e005      	b.n	800612e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b32      	cmp	r3, #50	; 0x32
 8006126:	d101      	bne.n	800612c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006138:	b084      	sub	sp, #16
 800613a:	b580      	push	{r7, lr}
 800613c:	b086      	sub	sp, #24
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	e009      	b.n	800616c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3340      	adds	r3, #64	; 0x40
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	2200      	movs	r2, #0
 8006164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3301      	adds	r3, #1
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0e      	cmp	r3, #14
 8006170:	d9f2      	bls.n	8006158 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11c      	bne.n	80061b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006186:	f043 0302 	orr.w	r3, r3, #2
 800618a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e005      	b.n	80061be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	4619      	mov	r1, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d8:	461a      	mov	r2, r3
 80061da:	680b      	ldr	r3, [r1, #0]
 80061dc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061de:	2103      	movs	r1, #3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f955 	bl	8006490 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061e6:	2110      	movs	r1, #16
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f8f1 	bl	80063d0 <USB_FlushTxFifo>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f91b 	bl	8006434 <USB_FlushRxFifo>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	461a      	mov	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621a:	461a      	mov	r2, r3
 800621c:	2300      	movs	r3, #0
 800621e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	e043      	b.n	80062ba <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006248:	d118      	bne.n	800627c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	461a      	mov	r2, r3
 800625e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	e013      	b.n	800628e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006272:	461a      	mov	r2, r3
 8006274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e008      	b.n	800628e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	461a      	mov	r2, r3
 800628a:	2300      	movs	r3, #0
 800628c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629a:	461a      	mov	r2, r3
 800629c:	2300      	movs	r3, #0
 800629e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	461a      	mov	r2, r3
 80062ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	3301      	adds	r3, #1
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d3b7      	bcc.n	8006232 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	e043      	b.n	8006350 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062de:	d118      	bne.n	8006312 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f2:	461a      	mov	r2, r3
 80062f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e013      	b.n	8006324 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	461a      	mov	r2, r3
 800630a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	e008      	b.n	8006324 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	461a      	mov	r2, r3
 8006320:	2300      	movs	r3, #0
 8006322:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	461a      	mov	r2, r3
 8006332:	2300      	movs	r3, #0
 8006334:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	461a      	mov	r2, r3
 8006344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006348:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	3301      	adds	r3, #1
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	429a      	cmp	r2, r3
 8006356:	d3b7      	bcc.n	80062c8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800636a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006378:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f043 0210 	orr.w	r2, r3, #16
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <USB_DevInit+0x294>)
 800638c:	4313      	orrs	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f043 0208 	orr.w	r2, r3, #8
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d107      	bne.n	80063ba <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b2:	f043 0304 	orr.w	r3, r3, #4
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063c6:	b004      	add	sp, #16
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	803c3800 	.word	0x803c3800

080063d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	4a12      	ldr	r2, [pc, #72]	; (8006430 <USB_FlushTxFifo+0x60>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d901      	bls.n	80063ee <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e01a      	b.n	8006424 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	daf3      	bge.n	80063de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	019b      	lsls	r3, r3, #6
 80063fe:	f043 0220 	orr.w	r2, r3, #32
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	4a08      	ldr	r2, [pc, #32]	; (8006430 <USB_FlushTxFifo+0x60>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e006      	b.n	8006424 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b20      	cmp	r3, #32
 8006420:	d0f1      	beq.n	8006406 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	00030d40 	.word	0x00030d40

08006434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	4a11      	ldr	r2, [pc, #68]	; (800648c <USB_FlushRxFifo+0x58>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d901      	bls.n	8006450 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e017      	b.n	8006480 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	daf3      	bge.n	8006440 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2210      	movs	r2, #16
 8006460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	4a08      	ldr	r2, [pc, #32]	; (800648c <USB_FlushRxFifo+0x58>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e006      	b.n	8006480 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b10      	cmp	r3, #16
 800647c:	d0f1      	beq.n	8006462 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	00030d40 	.word	0x00030d40

08006490 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b0:	4313      	orrs	r3, r2
 80064b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064dc:	f023 0303 	bic.w	r3, r3, #3
 80064e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f0:	f043 0302 	orr.w	r3, r3, #2
 80064f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f003 0301 	and.w	r3, r3, #1
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	4a13      	ldr	r2, [pc, #76]	; (8006580 <USB_CoreReset+0x60>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e01a      	b.n	8006572 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	daf3      	bge.n	800652c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f043 0201 	orr.w	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <USB_CoreReset+0x60>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e006      	b.n	8006572 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b01      	cmp	r3, #1
 800656e:	d0f1      	beq.n	8006554 <USB_CoreReset+0x34>

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	00030d40 	.word	0x00030d40

08006584 <__libc_init_array>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	4d0d      	ldr	r5, [pc, #52]	; (80065bc <__libc_init_array+0x38>)
 8006588:	4c0d      	ldr	r4, [pc, #52]	; (80065c0 <__libc_init_array+0x3c>)
 800658a:	1b64      	subs	r4, r4, r5
 800658c:	10a4      	asrs	r4, r4, #2
 800658e:	2600      	movs	r6, #0
 8006590:	42a6      	cmp	r6, r4
 8006592:	d109      	bne.n	80065a8 <__libc_init_array+0x24>
 8006594:	4d0b      	ldr	r5, [pc, #44]	; (80065c4 <__libc_init_array+0x40>)
 8006596:	4c0c      	ldr	r4, [pc, #48]	; (80065c8 <__libc_init_array+0x44>)
 8006598:	f000 f820 	bl	80065dc <_init>
 800659c:	1b64      	subs	r4, r4, r5
 800659e:	10a4      	asrs	r4, r4, #2
 80065a0:	2600      	movs	r6, #0
 80065a2:	42a6      	cmp	r6, r4
 80065a4:	d105      	bne.n	80065b2 <__libc_init_array+0x2e>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ac:	4798      	blx	r3
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7ee      	b.n	8006590 <__libc_init_array+0xc>
 80065b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b6:	4798      	blx	r3
 80065b8:	3601      	adds	r6, #1
 80065ba:	e7f2      	b.n	80065a2 <__libc_init_array+0x1e>
 80065bc:	08006684 	.word	0x08006684
 80065c0:	08006684 	.word	0x08006684
 80065c4:	08006684 	.word	0x08006684
 80065c8:	08006688 	.word	0x08006688

080065cc <memset>:
 80065cc:	4402      	add	r2, r0
 80065ce:	4603      	mov	r3, r0
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d100      	bne.n	80065d6 <memset+0xa>
 80065d4:	4770      	bx	lr
 80065d6:	f803 1b01 	strb.w	r1, [r3], #1
 80065da:	e7f9      	b.n	80065d0 <memset+0x4>

080065dc <_init>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr

080065e8 <_fini>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr
