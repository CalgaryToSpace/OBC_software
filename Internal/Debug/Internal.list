
Internal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a8  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  2000000c  0800670c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  0800670c  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c95  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257e  00000000  00000000  00033cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00036250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000371a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b923  00000000  00000000  00038028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cc4  00000000  00000000  0006394b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111478  00000000  00000000  0007560f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186a87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004218  00000000  00000000  00186ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006650 	.word	0x08006650

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08006650 	.word	0x08006650

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000a00:	f000 b974 	b.w	8000cec <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	4604      	mov	r4, r0
 8000a24:	468e      	mov	lr, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d14d      	bne.n	8000ac6 <__udivmoddi4+0xaa>
 8000a2a:	428a      	cmp	r2, r1
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	d969      	bls.n	8000b04 <__udivmoddi4+0xe8>
 8000a30:	fab2 f282 	clz	r2, r2
 8000a34:	b152      	cbz	r2, 8000a4c <__udivmoddi4+0x30>
 8000a36:	fa01 f302 	lsl.w	r3, r1, r2
 8000a3a:	f1c2 0120 	rsb	r1, r2, #32
 8000a3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a46:	ea41 0e03 	orr.w	lr, r1, r3
 8000a4a:	4094      	lsls	r4, r2
 8000a4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a50:	0c21      	lsrs	r1, r4, #16
 8000a52:	fbbe f6f8 	udiv	r6, lr, r8
 8000a56:	fa1f f78c 	uxth.w	r7, ip
 8000a5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a62:	fb06 f107 	mul.w	r1, r6, r7
 8000a66:	4299      	cmp	r1, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x64>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a72:	f080 811f 	bcs.w	8000cb4 <__udivmoddi4+0x298>
 8000a76:	4299      	cmp	r1, r3
 8000a78:	f240 811c 	bls.w	8000cb4 <__udivmoddi4+0x298>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a88:	fb08 3310 	mls	r3, r8, r0, r3
 8000a8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a90:	fb00 f707 	mul.w	r7, r0, r7
 8000a94:	42a7      	cmp	r7, r4
 8000a96:	d90a      	bls.n	8000aae <__udivmoddi4+0x92>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa0:	f080 810a 	bcs.w	8000cb8 <__udivmoddi4+0x29c>
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	f240 8107 	bls.w	8000cb8 <__udivmoddi4+0x29c>
 8000aaa:	4464      	add	r4, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab2:	1be4      	subs	r4, r4, r7
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	b11d      	cbz	r5, 8000ac0 <__udivmoddi4+0xa4>
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	2300      	movs	r3, #0
 8000abc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0xc2>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	f000 80ef 	beq.w	8000cae <__udivmoddi4+0x292>
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	fab3 f683 	clz	r6, r3
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d14a      	bne.n	8000b7c <__udivmoddi4+0x160>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xd4>
 8000aea:	4282      	cmp	r2, r0
 8000aec:	f200 80f9 	bhi.w	8000ce2 <__udivmoddi4+0x2c6>
 8000af0:	1a84      	subs	r4, r0, r2
 8000af2:	eb61 0303 	sbc.w	r3, r1, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	469e      	mov	lr, r3
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d0e0      	beq.n	8000ac0 <__udivmoddi4+0xa4>
 8000afe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b02:	e7dd      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000b04:	b902      	cbnz	r2, 8000b08 <__udivmoddi4+0xec>
 8000b06:	deff      	udf	#255	; 0xff
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	f040 8092 	bne.w	8000c36 <__udivmoddi4+0x21a>
 8000b12:	eba1 010c 	sub.w	r1, r1, ip
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2601      	movs	r6, #1
 8000b20:	0c20      	lsrs	r0, r4, #16
 8000b22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b26:	fb07 1113 	mls	r1, r7, r3, r1
 8000b2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b2e:	fb0e f003 	mul.w	r0, lr, r3
 8000b32:	4288      	cmp	r0, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x12c>
 8000b36:	eb1c 0101 	adds.w	r1, ip, r1
 8000b3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x12a>
 8000b40:	4288      	cmp	r0, r1
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2c0>
 8000b46:	4643      	mov	r3, r8
 8000b48:	1a09      	subs	r1, r1, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b50:	fb07 1110 	mls	r1, r7, r0, r1
 8000b54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x156>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x154>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2ca>
 8000b70:	4608      	mov	r0, r1
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7a:	e79c      	b.n	8000ab6 <__udivmoddi4+0x9a>
 8000b7c:	f1c6 0720 	rsb	r7, r6, #32
 8000b80:	40b3      	lsls	r3, r6
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b92:	431c      	orrs	r4, r3
 8000b94:	40f9      	lsrs	r1, r7
 8000b96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ba2:	0c20      	lsrs	r0, r4, #16
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb4:	4288      	cmp	r0, r1
 8000bb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b8>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bc8:	4288      	cmp	r0, r1
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4461      	add	r1, ip
 8000bd4:	1a09      	subs	r1, r1, r0
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000be0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	458e      	cmp	lr, r1
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1e2>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bf6:	458e      	cmp	lr, r1
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4461      	add	r1, ip
 8000bfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c02:	fba0 9402 	umull	r9, r4, r0, r2
 8000c06:	eba1 010e 	sub.w	r1, r1, lr
 8000c0a:	42a1      	cmp	r1, r4
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46a6      	mov	lr, r4
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x2a4>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x2a0>
 8000c14:	b15d      	cbz	r5, 8000c2e <__udivmoddi4+0x212>
 8000c16:	ebb3 0208 	subs.w	r2, r3, r8
 8000c1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c22:	fa22 f306 	lsr.w	r3, r2, r6
 8000c26:	40f1      	lsrs	r1, r6
 8000c28:	431f      	orrs	r7, r3
 8000c2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c2e:	2600      	movs	r6, #0
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	40d8      	lsrs	r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	fa21 f303 	lsr.w	r3, r1, r3
 8000c44:	4091      	lsls	r1, r2
 8000c46:	4301      	orrs	r1, r0
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c54:	fb07 3610 	mls	r6, r7, r0, r3
 8000c58:	0c0b      	lsrs	r3, r1, #16
 8000c5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c62:	429e      	cmp	r6, r3
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x260>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c74:	429e      	cmp	r6, r3
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	b289      	uxth	r1, r1
 8000c80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c84:	fb07 3316 	mls	r3, r7, r6, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x28a>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2b0>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2b0>
 8000ca2:	3e02      	subs	r6, #2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	1ac9      	subs	r1, r1, r3
 8000ca8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0x104>
 8000cae:	462e      	mov	r6, r5
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	e705      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	e6e3      	b.n	8000a80 <__udivmoddi4+0x64>
 8000cb8:	4618      	mov	r0, r3
 8000cba:	e6f8      	b.n	8000aae <__udivmoddi4+0x92>
 8000cbc:	454b      	cmp	r3, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f8>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc8:	3801      	subs	r0, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f8>
 8000ccc:	4646      	mov	r6, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x28a>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1e2>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x260>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b8>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	4461      	add	r1, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x12c>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e709      	b.n	8000afa <__udivmoddi4+0xde>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x156>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fd82 	bl	80017fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f87f 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 fa6b 	bl	80011d8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d02:	f000 f957 	bl	8000fb4 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000d06:	f000 f9f1 	bl	80010ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d0a:	f000 fa3b 	bl	8001184 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000d0e:	f000 f99f 	bl	8001050 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d12:	f000 f8c7 	bl	8000ea4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000d16:	4830      	ldr	r0, [pc, #192]	; (8000dd8 <main+0xe8>)
 8000d18:	f001 fa56 	bl	80021c8 <HAL_ADC_Start>
  int data;
  double voltage;
  double celsius;
  double br = 14;
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <main+0xec>)
 8000d22:	e9c7 2306 	strd	r2, r3, [r7, #24]





uint8_t noFT[3] = {3,1,8};
 8000d26:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <main+0xf0>)
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	8019      	strh	r1, [r3, #0]
 8000d32:	3302      	adds	r3, #2
 8000d34:	0c12      	lsrs	r2, r2, #16
 8000d36:	701a      	strb	r2, [r3, #0]
const char *m = "hmmmmmmmm";
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <main+0xf4>)
 8000d3a:	617b      	str	r3, [r7, #20]
const char *me = "tinngs";
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <main+0xf8>)
 8000d3e:	613b      	str	r3, [r7, #16]
char bruh[4];
uint16_t temp_value = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	81fb      	strh	r3, [r7, #14]
	      tCelsius = ((1.43-3.3/4096*readValue)/0.0043)+25;
	  HAL_ADC_Stop( &hadc1 );
	  gcvt(tCelsius, 3, bruh);
*/

	  HAL_ADC_Start( &hadc1 );
 8000d44:	4824      	ldr	r0, [pc, #144]	; (8000dd8 <main+0xe8>)
 8000d46:	f001 fa3f 	bl	80021c8 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000d4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d4e:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <main+0xe8>)
 8000d50:	f001 fad0 	bl	80022f4 <HAL_ADC_PollForConversion>
	  	      readValue = HAL_ADC_GetValue(&hadc1);
 8000d54:	4820      	ldr	r0, [pc, #128]	; (8000dd8 <main+0xe8>)
 8000d56:	f001 fb5c 	bl	8002412 <HAL_ADC_GetValue>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b23      	ldr	r3, [pc, #140]	; (8000dec <main+0xfc>)
 8000d60:	801a      	strh	r2, [r3, #0]

	  temperature = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(Avg_Slope, v30, vtemp, vrefplus, readValue, LL_ADC_RESOLUTION_12B);
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <main+0xfc>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fb9c 	bl	80004a4 <__aeabi_i2d>
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <main+0x100>)
 8000d72:	f7ff fc01 	bl	8000578 <__aeabi_dmul>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	a314      	add	r3, pc, #80	; (adr r3, 8000dd0 <main+0xe0>)
 8000d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d84:	f7ff fd22 	bl	80007cc <__aeabi_ddiv>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <main+0x104>)
 8000d96:	f7ff fbef 	bl	8000578 <__aeabi_dmul>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4619      	mov	r1, r3
 8000da2:	f7ff fdfb 	bl	800099c <__aeabi_d2iz>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8000dac:	0fda      	lsrs	r2, r3, #31
 8000dae:	4413      	add	r3, r2
 8000db0:	105b      	asrs	r3, r3, #1
 8000db2:	331e      	adds	r3, #30
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <main+0x108>)
 8000dbe:	edc3 7a00 	vstr	s15, [r3]

  	  HAL_ADC_Stop( &hadc1 );
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <main+0xe8>)
 8000dc4:	f001 fa63 	bl	800228e <HAL_ADC_Stop>
	  HAL_ADC_Start( &hadc1 );
 8000dc8:	e7bc      	b.n	8000d44 <main+0x54>
 8000dca:	bf00      	nop
 8000dcc:	f3af 8000 	nop.w
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	40affe00 	.word	0x40affe00
 8000dd8:	20000028 	.word	0x20000028
 8000ddc:	402c0000 	.word	0x402c0000
 8000de0:	0800667c 	.word	0x0800667c
 8000de4:	08006668 	.word	0x08006668
 8000de8:	08006674 	.word	0x08006674
 8000dec:	20000648 	.word	0x20000648
 8000df0:	400c0000 	.word	0x400c0000
 8000df4:	408f4000 	.word	0x408f4000
 8000df8:	2000064c 	.word	0x2000064c

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b096      	sub	sp, #88	; 0x58
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	2244      	movs	r2, #68	; 0x44
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fc18 	bl	8006640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f002 fe82 	bl	8003b28 <HAL_PWREx_ControlVoltageScaling>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000e2a:	f000 fa79 	bl	8001320 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000e2e:	2322      	movs	r3, #34	; 0x22
 8000e30:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e44:	2302      	movs	r3, #2
 8000e46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000e4c:	231e      	movs	r3, #30
 8000e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 ff25 	bl	8003cb0 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e6c:	f000 fa58 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2303      	movs	r3, #3
 8000e76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	2105      	movs	r1, #5
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fb36 	bl	80044fc <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e96:	f000 fa43 	bl	8001320 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3758      	adds	r7, #88	; 0x58
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ecc:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000ece:	4a36      	ldr	r2, [pc, #216]	; (8000fa8 <MX_ADC1_Init+0x104>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000eec:	2204      	movs	r2, #4
 8000eee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2c:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f2e:	f000 ffff 	bl	8001f30 <HAL_ADC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f38:	f000 f9f2 	bl	8001320 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_ADC1_Init+0x108>)
 8000f3e:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000f40:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000f44:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_ADC1_Init+0x10c>)
 8000f48:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.ITMode = DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.LowThreshold = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f60:	f001 fe60 	bl	8002c24 <HAL_ADC_AnalogWDGConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000f6a:	f000 f9d9 	bl	8001320 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_ADC1_Init+0x10c>)
 8000f70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f72:	2306      	movs	r3, #6
 8000f74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000f76:	2304      	movs	r3, #4
 8000f78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7a:	237f      	movs	r3, #127	; 0x7f
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC1_Init+0x100>)
 8000f8c:	f001 fa4e 	bl	800242c <HAL_ADC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f96:	f000 f9c3 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000028 	.word	0x20000028
 8000fa8:	50040000 	.word	0x50040000
 8000fac:	7dc00000 	.word	0x7dc00000
 8000fb0:	c7520000 	.word	0xc7520000

08000fb4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <MX_LPUART1_UART_Init+0x94>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <MX_LPUART1_UART_Init+0x98>)
 8000fc2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fd8:	220c      	movs	r2, #12
 8000fda:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8000ffc:	f004 fa48 	bl	8005490 <HAL_UART_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001006:	f000 f98b 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 800100e:	f004 ff79 	bl	8005f04 <HAL_UARTEx_SetTxFifoThreshold>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001018:	f000 f982 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8001020:	f004 ffae 	bl	8005f80 <HAL_UARTEx_SetRxFifoThreshold>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800102a:	f000 f979 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_LPUART1_UART_Init+0x90>)
 8001030:	f004 ff2f 	bl	8005e92 <HAL_UARTEx_DisableFifoMode>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800103a:	f000 f971 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000090 	.word	0x20000090
 8001048:	40008000 	.word	0x40008000
 800104c:	00033324 	.word	0x00033324

08001050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <MX_USART1_UART_Init+0x94>)
 8001058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 209700;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <MX_USART1_UART_Init+0x98>)
 800105e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 8001074:	220c      	movs	r2, #12
 8001076:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001096:	4812      	ldr	r0, [pc, #72]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 8001098:	f004 f9fa 	bl	8005490 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80010a2:	f000 f93d 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 80010aa:	f004 ff2b 	bl	8005f04 <HAL_UARTEx_SetTxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80010b4:	f000 f934 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 80010bc:	f004 ff60 	bl	8005f80 <HAL_UARTEx_SetRxFifoThreshold>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80010c6:	f000 f92b 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART1_UART_Init+0x90>)
 80010cc:	f004 fee1 	bl	8005e92 <HAL_UARTEx_DisableFifoMode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80010d6:	f000 f923 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000120 	.word	0x20000120
 80010e4:	40013800 	.word	0x40013800
 80010e8:	00033324 	.word	0x00033324

080010ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_USART3_UART_Init+0x90>)
 80010f2:	4a23      	ldr	r2, [pc, #140]	; (8001180 <MX_USART3_UART_Init+0x94>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_USART3_UART_Init+0x90>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_USART3_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_USART3_UART_Init+0x90>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_USART3_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_USART3_UART_Init+0x90>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_USART3_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_USART3_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_USART3_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_USART3_UART_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_USART3_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <MX_USART3_UART_Init+0x90>)
 8001136:	f004 f9ab 	bl	8005490 <HAL_UART_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001140:	f000 f8ee 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_USART3_UART_Init+0x90>)
 8001148:	f004 fedc 	bl	8005f04 <HAL_UARTEx_SetTxFifoThreshold>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001152:	f000 f8e5 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4808      	ldr	r0, [pc, #32]	; (800117c <MX_USART3_UART_Init+0x90>)
 800115a:	f004 ff11 	bl	8005f80 <HAL_UARTEx_SetRxFifoThreshold>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001164:	f000 f8dc 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_USART3_UART_Init+0x90>)
 800116a:	f004 fe92 	bl	8005e92 <HAL_UARTEx_DisableFifoMode>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001174:	f000 f8d4 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001b0 	.word	0x200001b0
 8001180:	40004800 	.word	0x40004800

08001184 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800118a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800118e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001192:	2206      	movs	r2, #6
 8001194:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001198:	2202      	movs	r2, #2
 800119a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800119e:	2201      	movs	r2, #1
 80011a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011bc:	2201      	movs	r2, #1
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011c2:	f002 fb49 	bl	8003858 <HAL_PCD_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80011cc:	f000 f8a8 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000240 	.word	0x20000240

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <MX_GPIO_Init+0x138>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a47      	ldr	r2, [pc, #284]	; (8001310 <MX_GPIO_Init+0x138>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b45      	ldr	r3, [pc, #276]	; (8001310 <MX_GPIO_Init+0x138>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MX_GPIO_Init+0x138>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <MX_GPIO_Init+0x138>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <MX_GPIO_Init+0x138>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <MX_GPIO_Init+0x138>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a3b      	ldr	r2, [pc, #236]	; (8001310 <MX_GPIO_Init+0x138>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b39      	ldr	r3, [pc, #228]	; (8001310 <MX_GPIO_Init+0x138>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <MX_GPIO_Init+0x138>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a35      	ldr	r2, [pc, #212]	; (8001310 <MX_GPIO_Init+0x138>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <MX_GPIO_Init+0x138>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <MX_GPIO_Init+0x138>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <MX_GPIO_Init+0x138>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <MX_GPIO_Init+0x138>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <MX_GPIO_Init+0x138>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a29      	ldr	r2, [pc, #164]	; (8001310 <MX_GPIO_Init+0x138>)
 800126c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <MX_GPIO_Init+0x138>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800127e:	f002 fd07 	bl	8003c90 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001288:	4822      	ldr	r0, [pc, #136]	; (8001314 <MX_GPIO_Init+0x13c>)
 800128a:	f002 facd 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2120      	movs	r1, #32
 8001292:	4821      	ldr	r0, [pc, #132]	; (8001318 <MX_GPIO_Init+0x140>)
 8001294:	f002 fac8 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	481b      	ldr	r0, [pc, #108]	; (800131c <MX_GPIO_Init+0x144>)
 80012b0:	f002 f928 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80012b4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_GPIO_Init+0x13c>)
 80012ce:	f002 f919 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012d2:	2320      	movs	r3, #32
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <MX_GPIO_Init+0x140>)
 80012ea:	f002 f90b 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012ee:	2340      	movs	r3, #64	; 0x40
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_GPIO_Init+0x140>)
 8001302:	f002 f8ff 	bl	8003504 <HAL_GPIO_Init>

}
 8001306:	bf00      	nop
 8001308:	3730      	adds	r7, #48	; 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	48000400 	.word	0x48000400
 8001318:	48001800 	.word	0x48001800
 800131c:	48000800 	.word	0x48000800

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_MspInit+0x44>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <HAL_MspInit+0x44>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6613      	str	r3, [r2, #96]	; 0x60
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_MspInit+0x44>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_MspInit+0x44>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_MspInit+0x44>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_MspInit+0x44>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0ae      	sub	sp, #184	; 0xb8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2294      	movs	r2, #148	; 0x94
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f005 f953 	bl	8006640 <memset>
  if(hadc->Instance==ADC1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a27      	ldr	r2, [pc, #156]	; (800143c <HAL_ADC_MspInit+0xc8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d147      	bne.n	8001434 <HAL_ADC_MspInit+0xc0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80013b2:	2302      	movs	r3, #2
 80013b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80013ba:	230c      	movs	r3, #12
 80013bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fb43 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80013e0:	f7ff ff9e 	bl	8001320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_ADC_MspInit+0xcc>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <HAL_ADC_MspInit+0xcc>)
 80013ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_ADC_MspInit+0xcc>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_ADC_MspInit+0xcc>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_ADC_MspInit+0xcc>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_ADC_MspInit+0xcc>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001414:	230c      	movs	r3, #12
 8001416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800141a:	230b      	movs	r3, #11
 800141c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001430:	f002 f868 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	37b8      	adds	r7, #184	; 0xb8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	50040000 	.word	0x50040000
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0b2      	sub	sp, #200	; 0xc8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	2294      	movs	r2, #148	; 0x94
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f005 f8eb 	bl	8006640 <memset>
  if(huart->Instance==LPUART1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a65      	ldr	r2, [pc, #404]	; (8001604 <HAL_UART_MspInit+0x1c0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d13e      	bne.n	80014f2 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001474:	2320      	movs	r3, #32
 8001476:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4618      	mov	r0, r3
 8001482:	f003 faed 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800148c:	f7ff ff48 	bl	8001320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001490:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	4a5c      	ldr	r2, [pc, #368]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800149c:	4b5a      	ldr	r3, [pc, #360]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a8:	4b57      	ldr	r3, [pc, #348]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a56      	ldr	r2, [pc, #344]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80014ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b54      	ldr	r3, [pc, #336]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80014c0:	f002 fbe6 	bl	8003c90 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80014c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014de:	2308      	movs	r3, #8
 80014e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4848      	ldr	r0, [pc, #288]	; (800160c <HAL_UART_MspInit+0x1c8>)
 80014ec:	f002 f80a 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f0:	e084      	b.n	80015fc <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a46      	ldr	r2, [pc, #280]	; (8001610 <HAL_UART_MspInit+0x1cc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d13e      	bne.n	800157a <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001500:	2300      	movs	r3, #0
 8001502:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4618      	mov	r0, r3
 800150a:	f003 faa9 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001514:	f7ff ff04 	bl	8001320 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151c:	4a3a      	ldr	r2, [pc, #232]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 800151e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001522:	6613      	str	r3, [r2, #96]	; 0x60
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 8001526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	4a34      	ldr	r2, [pc, #208]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 8001536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001548:	f002 fba2 	bl	8003c90 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800154c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001566:	2307      	movs	r3, #7
 8001568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800156c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001570:	4619      	mov	r1, r3
 8001572:	4826      	ldr	r0, [pc, #152]	; (800160c <HAL_UART_MspInit+0x1c8>)
 8001574:	f001 ffc6 	bl	8003504 <HAL_GPIO_Init>
}
 8001578:	e040      	b.n	80015fc <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a25      	ldr	r2, [pc, #148]	; (8001614 <HAL_UART_MspInit+0x1d0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d13b      	bne.n	80015fc <HAL_UART_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001584:	2304      	movs	r3, #4
 8001586:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001588:	2300      	movs	r3, #0
 800158a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fa65 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800159c:	f7ff fec0 	bl	8001320 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	4a18      	ldr	r2, [pc, #96]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80015a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015aa:	6593      	str	r3, [r2, #88]	; 0x58
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_UART_MspInit+0x1c4>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ea:	2307      	movs	r3, #7
 80015ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <HAL_UART_MspInit+0x1d4>)
 80015f8:	f001 ff84 	bl	8003504 <HAL_GPIO_Init>
}
 80015fc:	bf00      	nop
 80015fe:	37c8      	adds	r7, #200	; 0xc8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40008000 	.word	0x40008000
 8001608:	40021000 	.word	0x40021000
 800160c:	48001800 	.word	0x48001800
 8001610:	40013800 	.word	0x40013800
 8001614:	40004800 	.word	0x40004800
 8001618:	48000c00 	.word	0x48000c00

0800161c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0b0      	sub	sp, #192	; 0xc0
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	2294      	movs	r2, #148	; 0x94
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f004 ffff 	bl	8006640 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164a:	d16c      	bne.n	8001726 <HAL_PCD_MspInit+0x10a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800164c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001650:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	4618      	mov	r0, r3
 800165e:	f003 f9ff 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001668:	f7ff fe5a 	bl	8001320 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_PCD_MspInit+0x114>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <HAL_PCD_MspInit+0x114>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_PCD_MspInit+0x114>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001684:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800169e:	230a      	movs	r3, #10
 80016a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f001 ff29 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f001 ff18 	bl	8003504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_PCD_MspInit+0x114>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <HAL_PCD_MspInit+0x114>)
 80016da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_PCD_MspInit+0x114>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_PCD_MspInit+0x114>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d114      	bne.n	8001722 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_PCD_MspInit+0x114>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <HAL_PCD_MspInit+0x114>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6593      	str	r3, [r2, #88]	; 0x58
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_PCD_MspInit+0x114>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001710:	f002 faae 	bl	8003c70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_PCD_MspInit+0x114>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_PCD_MspInit+0x114>)
 800171a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800171e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001720:	e001      	b.n	8001726 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001722:	f002 faa5 	bl	8003c70 <HAL_PWREx_EnableVddUSB>
}
 8001726:	bf00      	nop
 8001728:	37c0      	adds	r7, #192	; 0xc0
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f892 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff ffea 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopForever+0xe>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopForever+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f004 ff0d 	bl	80065f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017de:	f7ff fa87 	bl	8000cf0 <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017f0:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 80017f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017f8:	20000654 	.word	0x20000654

080017fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_IRQHandler>

080017fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f001 fe47 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f80e 	bl	8001830 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	e001      	b.n	8001824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001820:	f7ff fd84 	bl	800132c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001824:	79fb      	ldrb	r3, [r7, #7]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_InitTick+0x70>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_InitTick+0x6c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fe45 	bl	80034ea <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d809      	bhi.n	8001880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f001 fe1d 	bl	80034b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_InitTick+0x74>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e007      	b.n	8001890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e004      	b.n	8001890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e001      	b.n	8001890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000650 	.word	0x20000650

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000650 	.word	0x20000650

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008

08001930 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3360      	adds	r3, #96	; 0x60
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <LL_ADC_SetOffset+0x44>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	03fff000 	.word	0x03fff000

080019e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3360      	adds	r3, #96	; 0x60
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3360      	adds	r3, #96	; 0x60
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	615a      	str	r2, [r3, #20]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3330      	adds	r3, #48	; 0x30
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	4413      	add	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	211f      	movs	r1, #31
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0e9b      	lsrs	r3, r3, #26
 8001ac6:	f003 011f 	and.w	r1, r3, #31
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3314      	adds	r3, #20
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0e5b      	lsrs	r3, r3, #25
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0d1b      	lsrs	r3, r3, #20
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2107      	movs	r1, #7
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0d1b      	lsrs	r3, r3, #20
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0318 	and.w	r3, r3, #24
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b60:	40d9      	lsrs	r1, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	400b      	ands	r3, r1
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	0007ffff 	.word	0x0007ffff

08001b84 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	330c      	adds	r3, #12
 8001b94:	4618      	mov	r0, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	0d1b      	lsrs	r3, r3, #20
 8001b9a:	f003 0103 	and.w	r1, r3, #3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0201 	and.w	r2, r3, #1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4403      	add	r3, r0
 8001bb2:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8001bbe:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	400b      	ands	r3, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3320      	adds	r3, #32
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	0d1b      	lsrs	r3, r3, #20
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	0419      	lsls	r1, r3, #16
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6093      	str	r3, [r2, #8]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c5a:	d101      	bne.n	8001c60 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001caa:	d101      	bne.n	8001cb0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cfa:	f043 0202 	orr.w	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <LL_ADC_IsEnabled+0x18>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_ADC_IsEnabled+0x1a>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_IsDisableOngoing+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_IsDisableOngoing+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d96:	f043 0210 	orr.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d101      	bne.n	8001dc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001de0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d101      	bne.n	8001e10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e46:	601a      	str	r2, [r3, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	605a      	str	r2, [r3, #4]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	605a      	str	r2, [r3, #4]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	605a      	str	r2, [r3, #4]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	605a      	str	r2, [r3, #4]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	605a      	str	r2, [r3, #4]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	605a      	str	r2, [r3, #4]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e12f      	b.n	80021aa <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fa0b 	bl	8001374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fe68 	bl	8001c46 <LL_ADC_IsDeepPowerDownEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fe4e 	bl	8001c22 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe83 	bl	8001c96 <LL_ADC_IsInternalRegulatorEnabled>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fe67 	bl	8001c6e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fa0:	4b84      	ldr	r3, [pc, #528]	; (80021b4 <HAL_ADC_Init+0x284>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	4a84      	ldr	r2, [pc, #528]	; (80021b8 <HAL_ADC_Init+0x288>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	3301      	adds	r3, #1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb4:	e002      	b.n	8001fbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f9      	bne.n	8001fb6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fe65 	bl	8001c96 <LL_ADC_IsInternalRegulatorEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fed9 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 8001ff8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 80c8 	bne.w	8002198 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 80c4 	bne.w	8002198 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002018:	f043 0202 	orr.w	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fe72 	bl	8001d0e <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002030:	4862      	ldr	r0, [pc, #392]	; (80021bc <HAL_ADC_Init+0x28c>)
 8002032:	f7ff fe6c 	bl	8001d0e <LL_ADC_IsEnabled>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d105      	bne.n	8002048 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4619      	mov	r1, r3
 8002042:	485f      	ldr	r0, [pc, #380]	; (80021c0 <HAL_ADC_Init+0x290>)
 8002044:	f7ff fc74 	bl	8001930 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7e5b      	ldrb	r3, [r3, #25]
 800204c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002052:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002058:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800205e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d106      	bne.n	8002084 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	3b01      	subs	r3, #1
 800207c:	045b      	lsls	r3, r3, #17
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_ADC_Init+0x294>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fe76 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 80020be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fe97 	bl	8001df8 <LL_ADC_INJ_IsConversionOngoing>
 80020ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d140      	bne.n	8002154 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d13d      	bne.n	8002154 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
 80020e0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020fa:	f023 0306 	bic.w	r3, r3, #6
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	430b      	orrs	r3, r1
 8002106:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800210e:	2b01      	cmp	r3, #1
 8002110:	d118      	bne.n	8002144 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002134:	430a      	orrs	r2, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0201 	orr.w	r2, r2, #1
 8002140:	611a      	str	r2, [r3, #16]
 8002142:	e007      	b.n	8002154 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10c      	bne.n	8002176 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f023 010f 	bic.w	r1, r3, #15
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	1e5a      	subs	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
 8002174:	e007      	b.n	8002186 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 020f 	bic.w	r2, r2, #15
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	659a      	str	r2, [r3, #88]	; 0x58
 8002196:	e007      	b.n	80021a8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f043 0210 	orr.w	r2, r3, #16
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000
 80021b8:	053e2d63 	.word	0x053e2d63
 80021bc:	50040000 	.word	0x50040000
 80021c0:	50040300 	.word	0x50040300
 80021c4:	fff0c007 	.word	0xfff0c007

080021c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fde8 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d14f      	bne.n	8002280 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Start+0x26>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e04b      	b.n	8002286 <HAL_ADC_Start+0xbe>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 ffdc 	bl	80031b4 <ADC_Enable>
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d137      	bne.n	8002276 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002226:	d106      	bne.n	8002236 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	f023 0206 	bic.w	r2, r3, #6
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
 8002234:	e002      	b.n	800223c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	221c      	movs	r2, #28
 8002242:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002262:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fd73 	bl	8001d5a <LL_ADC_REG_StartConversion>
 8002274:	e006      	b.n	8002284 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800227e:	e001      	b.n	8002284 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_Stop+0x16>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e023      	b.n	80022ec <HAL_ADC_Stop+0x5e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80022ac:	2103      	movs	r1, #3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fec4 	bl	800303c <ADC_ConversionStop>
 80022b4:	4603      	mov	r3, r0
 80022b6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d111      	bne.n	80022e2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 ffda 	bl	8003278 <ADC_Disable>
 80022c4:	4603      	mov	r3, r0
 80022c6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	2b08      	cmp	r3, #8
 8002304:	d102      	bne.n	800230c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002306:	2308      	movs	r3, #8
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e010      	b.n	800232e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f043 0220 	orr.w	r2, r3, #32
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06f      	b.n	800240a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800232a:	2304      	movs	r3, #4
 800232c:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800232e:	f7ff facf 	bl	80018d0 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002334:	e021      	b.n	800237a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d01d      	beq.n	800237a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800233e:	f7ff fac7 	bl	80018d0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <HAL_ADC_PollForConversion+0x60>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d112      	bne.n	800237a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10b      	bne.n	800237a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	f043 0204 	orr.w	r2, r3, #4
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e047      	b.n	800240a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0d6      	beq.n	8002336 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fb65 	bl	8001a68 <LL_ADC_REG_IsTriggerSourceSWStart>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01c      	beq.n	80023de <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7e5b      	ldrb	r3, [r3, #25]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d118      	bne.n	80023de <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d111      	bne.n	80023de <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d104      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2208      	movs	r2, #8
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e008      	b.n	8002408 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	220c      	movs	r2, #12
 8002406:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0b6      	sub	sp, #216	; 0xd8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x22>
 800244a:	2302      	movs	r3, #2
 800244c:	e3d5      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x7ce>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fca5 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 83ba 	bne.w	8002bdc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d824      	bhi.n	80024ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	3b02      	subs	r3, #2
 8002476:	2b03      	cmp	r3, #3
 8002478:	d81b      	bhi.n	80024b2 <HAL_ADC_ConfigChannel+0x86>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <HAL_ADC_ConfigChannel+0x54>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	08002491 	.word	0x08002491
 8002484:	08002499 	.word	0x08002499
 8002488:	080024a1 	.word	0x080024a1
 800248c:	080024a9 	.word	0x080024a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	220c      	movs	r2, #12
 8002494:	605a      	str	r2, [r3, #4]
          break;
 8002496:	e011      	b.n	80024bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2212      	movs	r2, #18
 800249c:	605a      	str	r2, [r3, #4]
          break;
 800249e:	e00d      	b.n	80024bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2218      	movs	r2, #24
 80024a4:	605a      	str	r2, [r3, #4]
          break;
 80024a6:	e009      	b.n	80024bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ae:	605a      	str	r2, [r3, #4]
          break;
 80024b0:	e004      	b.n	80024bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2206      	movs	r2, #6
 80024b6:	605a      	str	r2, [r3, #4]
          break;
 80024b8:	e000      	b.n	80024bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f7ff fae0 	bl	8001a8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fc69 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 80024d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fc89 	bl	8001df8 <LL_ADC_INJ_IsConversionOngoing>
 80024e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 81c1 	bne.w	8002876 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f040 81bc 	bne.w	8002876 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002506:	d10f      	bne.n	8002528 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	f7ff fae7 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fa8e 	bl	8001a42 <LL_ADC_SetSamplingTimeCommonConfig>
 8002526:	e00e      	b.n	8002546 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	461a      	mov	r2, r3
 8002536:	f7ff fad6 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa7e 	bl	8001a42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d00a      	beq.n	800257e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6919      	ldr	r1, [r3, #16]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002578:	f7ff fa0e 	bl	8001998 <LL_ADC_SetOffset>
 800257c:	e17b      	b.n	8002876 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fa2b 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x17e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fa20 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	e01e      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x1bc>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fa15 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80025dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1d4>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	e018      	b.n	8002632 <HAL_ADC_ConfigChannel+0x206>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800261c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002624:	2320      	movs	r3, #32
 8002626:	e004      	b.n	8002632 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002632:	429a      	cmp	r2, r3
 8002634:	d106      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f9e4 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f9c8 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x244>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f9bd 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	e01e      	b.n	80026ae <HAL_ADC_ConfigChannel+0x282>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2101      	movs	r1, #1
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff f9b2 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800268e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800269e:	2320      	movs	r3, #32
 80026a0:	e004      	b.n	80026ac <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80026a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x29a>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	e018      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x2cc>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e004      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80026ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	2101      	movs	r1, #1
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f981 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2102      	movs	r1, #2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f965 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x30a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2102      	movs	r1, #2
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f95a 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	e01e      	b.n	8002774 <HAL_ADC_ConfigChannel+0x348>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2102      	movs	r1, #2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f94f 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002758:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800275c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e004      	b.n	8002772 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_ConfigChannel+0x360>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e9b      	lsrs	r3, r3, #26
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	e016      	b.n	80027ba <HAL_ADC_ConfigChannel+0x38e>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800279e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e004      	b.n	80027ba <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80027b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d106      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2200      	movs	r2, #0
 80027c4:	2102      	movs	r1, #2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f920 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2103      	movs	r1, #3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f904 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x3cc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2103      	movs	r1, #3
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff f8f9 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	f003 021f 	and.w	r2, r3, #31
 80027f6:	e017      	b.n	8002828 <HAL_ADC_ConfigChannel+0x3fc>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2103      	movs	r1, #3
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f8ee 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002804:	4603      	mov	r3, r0
 8002806:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002812:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e003      	b.n	8002826 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800281e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x414>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	e011      	b.n	8002864 <HAL_ADC_ConfigChannel+0x438>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800284e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002850:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e003      	b.n	8002864 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800285c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002864:	429a      	cmp	r2, r3
 8002866:	d106      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2200      	movs	r2, #0
 800286e:	2103      	movs	r1, #3
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff f8cb 	bl	8001a0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fa47 	bl	8001d0e <LL_ADC_IsEnabled>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 8140 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	461a      	mov	r2, r3
 8002896:	f7ff f951 	bl	8001b3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a8f      	ldr	r2, [pc, #572]	; (8002adc <HAL_ADC_ConfigChannel+0x6b0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	f040 8131 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x4a2>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2b09      	cmp	r3, #9
 80028c4:	bf94      	ite	ls
 80028c6:	2301      	movls	r3, #1
 80028c8:	2300      	movhi	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	e019      	b.n	8002902 <HAL_ADC_ConfigChannel+0x4d6>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028de:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e003      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80028ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	bf94      	ite	ls
 80028fc:	2301      	movls	r3, #1
 80028fe:	2300      	movhi	r3, #0
 8002900:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002902:	2b00      	cmp	r3, #0
 8002904:	d079      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290e:	2b00      	cmp	r3, #0
 8002910:	d107      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x4f6>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0e9b      	lsrs	r3, r3, #26
 8002918:	3301      	adds	r3, #1
 800291a:	069b      	lsls	r3, r3, #26
 800291c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002920:	e015      	b.n	800294e <HAL_ADC_ConfigChannel+0x522>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002932:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e003      	b.n	8002946 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	069b      	lsls	r3, r3, #26
 800294a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_ADC_ConfigChannel+0x542>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0e9b      	lsrs	r3, r3, #26
 8002960:	3301      	adds	r3, #1
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	e017      	b.n	800299e <HAL_ADC_ConfigChannel+0x572>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e003      	b.n	8002992 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800298a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	ea42 0103 	orr.w	r1, r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x598>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0e9b      	lsrs	r3, r3, #26
 80029b4:	3301      	adds	r3, #1
 80029b6:	f003 021f 	and.w	r2, r3, #31
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	051b      	lsls	r3, r3, #20
 80029c2:	e018      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x5ca>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e003      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80029e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	f003 021f 	and.w	r2, r3, #31
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f6:	430b      	orrs	r3, r1
 80029f8:	e081      	b.n	8002afe <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x5ea>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0e9b      	lsrs	r3, r3, #26
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	069b      	lsls	r3, r3, #26
 8002a10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a14:	e015      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x616>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	069b      	lsls	r3, r3, #26
 8002a3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x636>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	3301      	adds	r3, #1
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	e017      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x666>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	61fb      	str	r3, [r7, #28]
  return result;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	e003      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	ea42 0103 	orr.w	r1, r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x692>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b1e      	subs	r3, #30
 8002ab6:	051b      	lsls	r3, r3, #20
 8002ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002abc:	e01e      	b.n	8002afc <HAL_ADC_ConfigChannel+0x6d0>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	613b      	str	r3, [r7, #16]
  return result;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d104      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e006      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x6bc>
 8002ada:	bf00      	nop
 8002adc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f003 021f 	and.w	r2, r3, #31
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	3b1e      	subs	r3, #30
 8002af6:	051b      	lsls	r3, r3, #20
 8002af8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afc:	430b      	orrs	r3, r1
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7fe ffef 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d06c      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b14:	483c      	ldr	r0, [pc, #240]	; (8002c08 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b16:	f7fe ff31 	bl	800197c <LL_ADC_GetCommonPathInternalCh>
 8002b1a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a3a      	ldr	r2, [pc, #232]	; (8002c0c <HAL_ADC_ConfigChannel+0x7e0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d127      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d121      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a35      	ldr	r2, [pc, #212]	; (8002c10 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d157      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b46:	4619      	mov	r1, r3
 8002b48:	482f      	ldr	r0, [pc, #188]	; (8002c08 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b4a:	f7fe ff04 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_ADC_ConfigChannel+0x7e8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	4a30      	ldr	r2, [pc, #192]	; (8002c18 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f9      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b76:	e03a      	b.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_ADC_ConfigChannel+0x7f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d113      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x77e>
 8002b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10d      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d12a      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4819      	ldr	r0, [pc, #100]	; (8002c08 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ba4:	f7fe fed7 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba8:	e021      	b.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_ADC_ConfigChannel+0x7f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d11c      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d116      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d111      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bd6:	f7fe febe 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
 8002bda:	e008      	b.n	8002bee <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002bf6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	37d8      	adds	r7, #216	; 0xd8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	80080000 	.word	0x80080000
 8002c08:	50040300 	.word	0x50040300
 8002c0c:	c7520000 	.word	0xc7520000
 8002c10:	50040000 	.word	0x50040000
 8002c14:	20000000 	.word	0x20000000
 8002c18:	053e2d63 	.word	0x053e2d63
 8002c1c:	cb840000 	.word	0xcb840000
 8002c20:	80000001 	.word	0x80000001

08002c24 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08e      	sub	sp, #56	; 0x38
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c3c:	d003      	beq.n	8002c46 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002c42:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_AnalogWDGConfig+0x30>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e1ec      	b.n	800302e <HAL_ADC_AnalogWDGConfig+0x40a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff f8a2 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 8002c66:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f8c3 	bl	8001df8 <LL_ADC_INJ_IsConversionOngoing>
 8002c72:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 81ca 	bne.w	8003010 <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 81c6 	bne.w	8003010 <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a9b      	ldr	r2, [pc, #620]	; (8002ef8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	f040 80a2 	bne.w	8002dd4 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002c98:	d034      	beq.n	8002d04 <HAL_ADC_AnalogWDGConfig+0xe0>
 8002c9a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002c9e:	d856      	bhi.n	8002d4e <HAL_ADC_AnalogWDGConfig+0x12a>
 8002ca0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ca4:	d04b      	beq.n	8002d3e <HAL_ADC_AnalogWDGConfig+0x11a>
 8002ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002caa:	d850      	bhi.n	8002d4e <HAL_ADC_AnalogWDGConfig+0x12a>
 8002cac:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cb0:	d01b      	beq.n	8002cea <HAL_ADC_AnalogWDGConfig+0xc6>
 8002cb2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cb6:	d84a      	bhi.n	8002d4e <HAL_ADC_AnalogWDGConfig+0x12a>
 8002cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbc:	d037      	beq.n	8002d2e <HAL_ADC_AnalogWDGConfig+0x10a>
 8002cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc2:	d844      	bhi.n	8002d4e <HAL_ADC_AnalogWDGConfig+0x12a>
 8002cc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc8:	d029      	beq.n	8002d1e <HAL_ADC_AnalogWDGConfig+0xfa>
 8002cca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cce:	d13e      	bne.n	8002d4e <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002cdc:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4985      	ldr	r1, [pc, #532]	; (8002ef8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002ce4:	f7fe ff4e 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8002ce8:	e039      	b.n	8002d5e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002cf6:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	497e      	ldr	r1, [pc, #504]	; (8002ef8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002cfe:	f7fe ff41 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8002d02:	e02c      	b.n	8002d5e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002d10:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8002d14:	461a      	mov	r2, r3
 8002d16:	4978      	ldr	r1, [pc, #480]	; (8002ef8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d18:	f7fe ff34 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002d1c:	e01f      	b.n	8002d5e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a76      	ldr	r2, [pc, #472]	; (8002efc <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8002d24:	4974      	ldr	r1, [pc, #464]	; (8002ef8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe ff2c 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d2c:	e017      	b.n	8002d5e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a73      	ldr	r2, [pc, #460]	; (8002f00 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8002d34:	4970      	ldr	r1, [pc, #448]	; (8002ef8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe ff24 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d3c:	e00f      	b.n	8002d5e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a70      	ldr	r2, [pc, #448]	; (8002f04 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8002d44:	496c      	ldr	r1, [pc, #432]	; (8002ef8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe ff1c 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d4c:	e007      	b.n	8002d5e <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2200      	movs	r2, #0
 8002d54:	4968      	ldr	r1, [pc, #416]	; (8002ef8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe ff14 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d5c:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9a:	f7fe ff20 	bl	8001bde <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f835 	bl	8001e1e <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	7b1b      	ldrb	r3, [r3, #12]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff f855 	bl	8001e70 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002dc6:	e12c      	b.n	8003022 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f87f 	bl	8001ed0 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002dd2:	e126      	b.n	8003022 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002ddc:	d01d      	beq.n	8002e1a <HAL_ADC_AnalogWDGConfig+0x1f6>
 8002dde:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002de2:	f200 8093 	bhi.w	8002f0c <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002de6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dea:	d07b      	beq.n	8002ee4 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df0:	f200 808c 	bhi.w	8002f0c <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002df4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002df8:	d00f      	beq.n	8002e1a <HAL_ADC_AnalogWDGConfig+0x1f6>
 8002dfa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002dfe:	f200 8085 	bhi.w	8002f0c <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002e02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e06:	d06d      	beq.n	8002ee4 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e0c:	d87e      	bhi.n	8002f0c <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e12:	d067      	beq.n	8002ee4 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e18:	d178      	bne.n	8002f0c <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d12f      	bne.n	8002e84 <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d108      	bne.n	8002e42 <HAL_ADC_AnalogWDGConfig+0x21e>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	e016      	b.n	8002e70 <HAL_ADC_AnalogWDGConfig+0x24c>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	61bb      	str	r3, [r7, #24]
  return result;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e003      	b.n	8002e66 <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002e82:	e04c      	b.n	8002f1e <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <HAL_ADC_AnalogWDGConfig+0x27e>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	e016      	b.n	8002ed0 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	60fb      	str	r3, [r7, #12]
  return result;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	e003      	b.n	8002ec6 <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2201      	movs	r2, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8002ee2:	e01c      	b.n	8002f1e <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f7fe fe48 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002ef4:	e013      	b.n	8002f1e <HAL_ADC_AnalogWDGConfig+0x2fa>
 8002ef6:	bf00      	nop
 8002ef8:	7dc00000 	.word	0x7dc00000
 8002efc:	0087ffff 	.word	0x0087ffff
 8002f00:	0107ffff 	.word	0x0107ffff
 8002f04:	0187ffff 	.word	0x0187ffff
 8002f08:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fe fe34 	bl	8001b84 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002f1c:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0318 	and.w	r3, r3, #24
 8002f28:	2b18      	cmp	r3, #24
 8002f2a:	d00f      	beq.n	8002f4c <HAL_ADC_AnalogWDGConfig+0x328>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	08db      	lsrs	r3, r3, #3
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	f1c3 0302 	rsb	r3, r3, #2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	f003 031e 	and.w	r3, r3, #30
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_AnalogWDGConfig+0x32e>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0318 	and.w	r3, r3, #24
 8002f5e:	2b18      	cmp	r3, #24
 8002f60:	d00f      	beq.n	8002f82 <HAL_ADC_AnalogWDGConfig+0x35e>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	08db      	lsrs	r3, r3, #3
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	f1c3 0302 	rsb	r3, r3, #2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	f003 031e 	and.w	r3, r3, #30
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	e002      	b.n	8002f88 <HAL_ADC_AnalogWDGConfig+0x364>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f96:	f7fe fe22 	bl	8001bde <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a26      	ldr	r2, [pc, #152]	; (8003038 <HAL_ADC_AnalogWDGConfig+0x414>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d11a      	bne.n	8002fda <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe ff3f 	bl	8001e38 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	7b1b      	ldrb	r3, [r3, #12]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d105      	bne.n	8002fce <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe ff62 	bl	8001e90 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002fcc:	e029      	b.n	8003022 <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe ff8c 	bl	8001ef0 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002fd8:	e023      	b.n	8003022 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe ff32 	bl	8001e54 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	7b1b      	ldrb	r3, [r3, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe ff57 	bl	8001eb0 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003002:	e00e      	b.n	8003022 <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe ff81 	bl	8001f10 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800300e:	e008      	b.n	8003022 <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800302a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800302e:	4618      	mov	r0, r3
 8003030:	3738      	adds	r7, #56	; 0x38
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	0017ffff 	.word	0x0017ffff

0800303c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fea9 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 8003058:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe feca 	bl	8001df8 <LL_ADC_INJ_IsConversionOngoing>
 8003064:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8098 	beq.w	80031a4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d02a      	beq.n	80030d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7e5b      	ldrb	r3, [r3, #25]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d126      	bne.n	80030d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7e1b      	ldrb	r3, [r3, #24]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d122      	bne.n	80030d8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003092:	2301      	movs	r3, #1
 8003094:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003096:	e014      	b.n	80030c2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4a45      	ldr	r2, [pc, #276]	; (80031b0 <ADC_ConversionStop+0x174>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d90d      	bls.n	80030bc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f043 0210 	orr.w	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e074      	b.n	80031a6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3301      	adds	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d1e3      	bne.n	8003098 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2240      	movs	r2, #64	; 0x40
 80030d6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d014      	beq.n	8003108 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fe61 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fe1e 	bl	8001d34 <LL_ADC_IsDisableOngoing>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fe3d 	bl	8001d82 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d014      	beq.n	8003138 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fe70 	bl	8001df8 <LL_ADC_INJ_IsConversionOngoing>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fe06 	bl	8001d34 <LL_ADC_IsDisableOngoing>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fe4c 	bl	8001dd0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d005      	beq.n	800314a <ADC_ConversionStop+0x10e>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d105      	bne.n	8003150 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003144:	230c      	movs	r3, #12
 8003146:	617b      	str	r3, [r7, #20]
        break;
 8003148:	e005      	b.n	8003156 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800314a:	2308      	movs	r3, #8
 800314c:	617b      	str	r3, [r7, #20]
        break;
 800314e:	e002      	b.n	8003156 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003150:	2304      	movs	r3, #4
 8003152:	617b      	str	r3, [r7, #20]
        break;
 8003154:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003156:	f7fe fbbb 	bl	80018d0 <HAL_GetTick>
 800315a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800315c:	e01b      	b.n	8003196 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800315e:	f7fe fbb7 	bl	80018d0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b05      	cmp	r3, #5
 800316a:	d914      	bls.n	8003196 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f043 0210 	orr.w	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e007      	b.n	80031a6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1dc      	bne.n	800315e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	a33fffff 	.word	0xa33fffff

080031b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fda4 	bl	8001d0e <LL_ADC_IsEnabled>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d14d      	bne.n	8003268 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <ADC_Enable+0xc0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	f043 0210 	orr.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e039      	b.n	800326a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fd5f 	bl	8001cbe <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003200:	f7fe fb66 	bl	80018d0 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003206:	e028      	b.n	800325a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fd7e 	bl	8001d0e <LL_ADC_IsEnabled>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fd4e 	bl	8001cbe <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003222:	f7fe fb55 	bl	80018d0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d914      	bls.n	800325a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d00d      	beq.n	800325a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e007      	b.n	800326a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d1cf      	bne.n	8003208 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	8000003f 	.word	0x8000003f

08003278 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe fd55 	bl	8001d34 <LL_ADC_IsDisableOngoing>
 800328a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fd3c 	bl	8001d0e <LL_ADC_IsEnabled>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d047      	beq.n	800332c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d144      	bne.n	800332c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030d 	and.w	r3, r3, #13
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10c      	bne.n	80032ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe fd16 	bl	8001ce6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2203      	movs	r2, #3
 80032c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032c2:	f7fe fb05 	bl	80018d0 <HAL_GetTick>
 80032c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032c8:	e029      	b.n	800331e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e023      	b.n	800332e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032e6:	f7fe faf3 	bl	80018d0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d914      	bls.n	800331e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e007      	b.n	800332e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1dc      	bne.n	80032e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336a:	4a04      	ldr	r2, [pc, #16]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60d3      	str	r3, [r2, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff8e 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff47 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff5c 	bl	8003380 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff8e 	bl	80033f0 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5d 	bl	800339c <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffb0 	bl	8003458 <SysTick_Config>
 80034f8:	4603      	mov	r3, r0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003512:	e166      	b.n	80037e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2101      	movs	r1, #1
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8158 	beq.w	80037dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d005      	beq.n	8003544 <HAL_GPIO_Init+0x40>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d130      	bne.n	80035a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357a:	2201      	movs	r2, #1
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 0201 	and.w	r2, r3, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d017      	beq.n	80035e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d123      	bne.n	8003636 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	08da      	lsrs	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3208      	adds	r2, #8
 80035f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	220f      	movs	r2, #15
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	6939      	ldr	r1, [r7, #16]
 8003632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	2203      	movs	r2, #3
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0203 	and.w	r2, r3, #3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80b2 	beq.w	80037dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003678:	4b61      	ldr	r3, [pc, #388]	; (8003800 <HAL_GPIO_Init+0x2fc>)
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	4a60      	ldr	r2, [pc, #384]	; (8003800 <HAL_GPIO_Init+0x2fc>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6613      	str	r3, [r2, #96]	; 0x60
 8003684:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_GPIO_Init+0x2fc>)
 8003686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003690:	4a5c      	ldr	r2, [pc, #368]	; (8003804 <HAL_GPIO_Init+0x300>)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	3302      	adds	r3, #2
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ba:	d02b      	beq.n	8003714 <HAL_GPIO_Init+0x210>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_GPIO_Init+0x304>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d025      	beq.n	8003710 <HAL_GPIO_Init+0x20c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a51      	ldr	r2, [pc, #324]	; (800380c <HAL_GPIO_Init+0x308>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01f      	beq.n	800370c <HAL_GPIO_Init+0x208>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a50      	ldr	r2, [pc, #320]	; (8003810 <HAL_GPIO_Init+0x30c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d019      	beq.n	8003708 <HAL_GPIO_Init+0x204>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a4f      	ldr	r2, [pc, #316]	; (8003814 <HAL_GPIO_Init+0x310>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_GPIO_Init+0x200>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a4e      	ldr	r2, [pc, #312]	; (8003818 <HAL_GPIO_Init+0x314>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00d      	beq.n	8003700 <HAL_GPIO_Init+0x1fc>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a4d      	ldr	r2, [pc, #308]	; (800381c <HAL_GPIO_Init+0x318>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <HAL_GPIO_Init+0x1f8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a4c      	ldr	r2, [pc, #304]	; (8003820 <HAL_GPIO_Init+0x31c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_GPIO_Init+0x1f4>
 80036f4:	2307      	movs	r3, #7
 80036f6:	e00e      	b.n	8003716 <HAL_GPIO_Init+0x212>
 80036f8:	2308      	movs	r3, #8
 80036fa:	e00c      	b.n	8003716 <HAL_GPIO_Init+0x212>
 80036fc:	2306      	movs	r3, #6
 80036fe:	e00a      	b.n	8003716 <HAL_GPIO_Init+0x212>
 8003700:	2305      	movs	r3, #5
 8003702:	e008      	b.n	8003716 <HAL_GPIO_Init+0x212>
 8003704:	2304      	movs	r3, #4
 8003706:	e006      	b.n	8003716 <HAL_GPIO_Init+0x212>
 8003708:	2303      	movs	r3, #3
 800370a:	e004      	b.n	8003716 <HAL_GPIO_Init+0x212>
 800370c:	2302      	movs	r3, #2
 800370e:	e002      	b.n	8003716 <HAL_GPIO_Init+0x212>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_GPIO_Init+0x212>
 8003714:	2300      	movs	r3, #0
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	f002 0203 	and.w	r2, r2, #3
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	4093      	lsls	r3, r2
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003726:	4937      	ldr	r1, [pc, #220]	; (8003804 <HAL_GPIO_Init+0x300>)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003734:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_GPIO_Init+0x320>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43db      	mvns	r3, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003758:	4a32      	ldr	r2, [pc, #200]	; (8003824 <HAL_GPIO_Init+0x320>)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_GPIO_Init+0x320>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003782:	4a28      	ldr	r2, [pc, #160]	; (8003824 <HAL_GPIO_Init+0x320>)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003788:	4b26      	ldr	r3, [pc, #152]	; (8003824 <HAL_GPIO_Init+0x320>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_GPIO_Init+0x320>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_GPIO_Init+0x320>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_GPIO_Init+0x320>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3301      	adds	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f ae91 	bne.w	8003514 <HAL_GPIO_Init+0x10>
  }
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000
 8003808:	48000400 	.word	0x48000400
 800380c:	48000800 	.word	0x48000800
 8003810:	48000c00 	.word	0x48000c00
 8003814:	48001000 	.word	0x48001000
 8003818:	48001400 	.word	0x48001400
 800381c:	48001800 	.word	0x48001800
 8003820:	48001c00 	.word	0x48001c00
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 8003834:	4613      	mov	r3, r2
 8003836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003844:	e002      	b.n	800384c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385a:	b08f      	sub	sp, #60	; 0x3c
 800385c:	af0a      	add	r7, sp, #40	; 0x28
 800385e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e116      	b.n	8003a98 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7fd fec9 	bl	800161c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2203      	movs	r2, #3
 800388e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f002 fc21 	bl	80060f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	687e      	ldr	r6, [r7, #4]
 80038b6:	466d      	mov	r5, sp
 80038b8:	f106 0410 	add.w	r4, r6, #16
 80038bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80038cc:	1d33      	adds	r3, r6, #4
 80038ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d0:	6838      	ldr	r0, [r7, #0]
 80038d2:	f002 fbe1 	bl	8006098 <USB_CoreInit>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d7      	b.n	8003a98 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f002 fc0f 	bl	8006112 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e04a      	b.n	8003990 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	333d      	adds	r3, #61	; 0x3d
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	333c      	adds	r3, #60	; 0x3c
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	b298      	uxth	r0, r3
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3342      	adds	r3, #66	; 0x42
 8003936:	4602      	mov	r2, r0
 8003938:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	333f      	adds	r3, #63	; 0x3f
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3344      	adds	r3, #68	; 0x44
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3348      	adds	r3, #72	; 0x48
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	3350      	adds	r3, #80	; 0x50
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	3301      	adds	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d3af      	bcc.n	80038fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e044      	b.n	8003a2a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039cc:	7bfa      	ldrb	r2, [r7, #15]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a0e:	7bfa      	ldrb	r2, [r7, #15]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	3301      	adds	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d3b5      	bcc.n	80039a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	687e      	ldr	r6, [r7, #4]
 8003a3c:	466d      	mov	r5, sp
 8003a3e:	f106 0410 	add.w	r4, r6, #16
 8003a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a52:	1d33      	adds	r3, r6, #4
 8003a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a56:	6838      	ldr	r0, [r7, #0]
 8003a58:	f002 fba8 	bl	80061ac <USB_DevInit>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e014      	b.n	8003a98 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f80a 	bl	8003aa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 fd50 	bl	8006536 <USB_DevDisconnect>

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	f043 0303 	orr.w	r3, r3, #3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af8:	d102      	bne.n	8003b00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003afe:	e00b      	b.n	8003b18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	d102      	bne.n	8003b16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b14:	e000      	b.n	8003b18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003b16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40007000 	.word	0x40007000

08003b28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d141      	bne.n	8003bba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b36:	4b4b      	ldr	r3, [pc, #300]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b42:	d131      	bne.n	8003ba8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b44:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4a:	4a46      	ldr	r2, [pc, #280]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b54:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b5c:	4a41      	ldr	r2, [pc, #260]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b64:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2232      	movs	r2, #50	; 0x32
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	4a3f      	ldr	r2, [pc, #252]	; (8003c6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	0c9b      	lsrs	r3, r3, #18
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b7a:	e002      	b.n	8003b82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8e:	d102      	bne.n	8003b96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f2      	bne.n	8003b7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b96:	4b33      	ldr	r3, [pc, #204]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba2:	d158      	bne.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e057      	b.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ba8:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bae:	4a2d      	ldr	r2, [pc, #180]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bb8:	e04d      	b.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc0:	d141      	bne.n	8003c46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bc2:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d131      	bne.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd0:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd6:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be8:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2232      	movs	r2, #50	; 0x32
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	0c9b      	lsrs	r3, r3, #18
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c06:	e002      	b.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d102      	bne.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f2      	bne.n	8003c08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2e:	d112      	bne.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e011      	b.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c44:	e007      	b.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40007000 	.word	0x40007000
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	431bde83 	.word	0x431bde83

08003c70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c7e:	6053      	str	r3, [r2, #4]
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40007000 	.word	0x40007000

08003c90 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c9e:	6053      	str	r3, [r2, #4]
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40007000 	.word	0x40007000

08003cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f000 bc16 	b.w	80044f0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc4:	4b96      	ldr	r3, [pc, #600]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cce:	4b94      	ldr	r3, [pc, #592]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80e4 	beq.w	8003eae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4c>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	f040 808b 	bne.w	8003e0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	f040 8087 	bne.w	8003e0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cfc:	4b88      	ldr	r3, [pc, #544]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_OscConfig+0x64>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e3ed      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <HAL_RCC_OscConfig+0x7e>
 8003d24:	4b7e      	ldr	r3, [pc, #504]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2c:	e005      	b.n	8003d3a <HAL_RCC_OscConfig+0x8a>
 8003d2e:	4b7c      	ldr	r3, [pc, #496]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d223      	bcs.n	8003d86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fdca 	bl	80048dc <RCC_SetFlashLatencyFromMSIRange>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e3ce      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d52:	4b73      	ldr	r3, [pc, #460]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a72      	ldr	r2, [pc, #456]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d58:	f043 0308 	orr.w	r3, r3, #8
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b70      	ldr	r3, [pc, #448]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	496d      	ldr	r1, [pc, #436]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d70:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	4968      	ldr	r1, [pc, #416]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
 8003d84:	e025      	b.n	8003dd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d86:	4b66      	ldr	r3, [pc, #408]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a65      	ldr	r2, [pc, #404]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	f043 0308 	orr.w	r3, r3, #8
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4960      	ldr	r1, [pc, #384]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da4:	4b5e      	ldr	r3, [pc, #376]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	495b      	ldr	r1, [pc, #364]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fd8a 	bl	80048dc <RCC_SetFlashLatencyFromMSIRange>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e38e      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dd2:	f000 fcbf 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4950      	ldr	r1, [pc, #320]	; (8003f24 <HAL_RCC_OscConfig+0x274>)
 8003de4:	5ccb      	ldrb	r3, [r1, r3]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	fa22 f303 	lsr.w	r3, r2, r3
 8003dee:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <HAL_RCC_OscConfig+0x278>)
 8003df0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003df2:	4b4e      	ldr	r3, [pc, #312]	; (8003f2c <HAL_RCC_OscConfig+0x27c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fd fd1a 	bl	8001830 <HAL_InitTick>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d052      	beq.n	8003eac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	e372      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d032      	beq.n	8003e78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e12:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a42      	ldr	r2, [pc, #264]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fd57 	bl	80018d0 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e26:	f7fd fd53 	bl	80018d0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e35b      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e38:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e44:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a35      	ldr	r2, [pc, #212]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4930      	ldr	r1, [pc, #192]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e62:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	492b      	ldr	r1, [pc, #172]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	e01a      	b.n	8003eae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e78:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e84:	f7fd fd24 	bl	80018d0 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e8c:	f7fd fd20 	bl	80018d0 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e328      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x1dc>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d073      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_OscConfig+0x21c>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d063      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d15f      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e305      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d106      	bne.n	8003efc <HAL_RCC_OscConfig+0x24c>
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e025      	b.n	8003f48 <HAL_RCC_OscConfig+0x298>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d114      	bne.n	8003f30 <HAL_RCC_OscConfig+0x280>
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a02      	ldr	r2, [pc, #8]	; (8003f20 <HAL_RCC_OscConfig+0x270>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e013      	b.n	8003f48 <HAL_RCC_OscConfig+0x298>
 8003f20:	40021000 	.word	0x40021000
 8003f24:	08006680 	.word	0x08006680
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	20000004 	.word	0x20000004
 8003f30:	4ba0      	ldr	r3, [pc, #640]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a9f      	ldr	r2, [pc, #636]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b9d      	ldr	r3, [pc, #628]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a9c      	ldr	r2, [pc, #624]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd fcbe 	bl	80018d0 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd fcba 	bl	80018d0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e2c2      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x2a8>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fcaa 	bl	80018d0 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd fca6 	bl	80018d0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e2ae      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f92:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x2d0>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d060      	beq.n	8004070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x310>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d119      	bne.n	8003fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d116      	bne.n	8003fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fc0:	4b7c      	ldr	r3, [pc, #496]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x328>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e28b      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd8:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	4973      	ldr	r1, [pc, #460]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fec:	e040      	b.n	8004070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d023      	beq.n	800403e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff6:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd fc65 	bl	80018d0 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400a:	f7fd fc61 	bl	80018d0 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e269      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401c:	4b65      	ldr	r3, [pc, #404]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	495f      	ldr	r1, [pc, #380]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004038:	4313      	orrs	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
 800403c:	e018      	b.n	8004070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a5c      	ldr	r2, [pc, #368]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404a:	f7fd fc41 	bl	80018d0 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004052:	f7fd fc3d 	bl	80018d0 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e245      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004064:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f0      	bne.n	8004052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d03c      	beq.n	80040f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01c      	beq.n	80040be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004084:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408a:	4a4a      	ldr	r2, [pc, #296]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fc1c 	bl	80018d0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409c:	f7fd fc18 	bl	80018d0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e220      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ae:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80040b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ef      	beq.n	800409c <HAL_RCC_OscConfig+0x3ec>
 80040bc:	e01b      	b.n	80040f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80040c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c4:	4a3b      	ldr	r2, [pc, #236]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fbff 	bl	80018d0 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d6:	f7fd fbfb 	bl	80018d0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e203      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e8:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ef      	bne.n	80040d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80a6 	beq.w	8004250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004108:	4b2a      	ldr	r3, [pc, #168]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	6593      	str	r3, [r2, #88]	; 0x58
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004130:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <HAL_RCC_OscConfig+0x508>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d118      	bne.n	800416e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800413c:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <HAL_RCC_OscConfig+0x508>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_RCC_OscConfig+0x508>)
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004148:	f7fd fbc2 	bl	80018d0 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004150:	f7fd fbbe 	bl	80018d0 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1c6      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_RCC_OscConfig+0x508>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d108      	bne.n	8004188 <HAL_RCC_OscConfig+0x4d8>
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004186:	e029      	b.n	80041dc <HAL_RCC_OscConfig+0x52c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b05      	cmp	r3, #5
 800418e:	d115      	bne.n	80041bc <HAL_RCC_OscConfig+0x50c>
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	4a03      	ldr	r2, [pc, #12]	; (80041b4 <HAL_RCC_OscConfig+0x504>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b0:	e014      	b.n	80041dc <HAL_RCC_OscConfig+0x52c>
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
 80041bc:	4b9d      	ldr	r3, [pc, #628]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	4a9c      	ldr	r2, [pc, #624]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041cc:	4b99      	ldr	r3, [pc, #612]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	4a98      	ldr	r2, [pc, #608]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd fb74 	bl	80018d0 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd fb70 	bl	80018d0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e176      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004202:	4b8c      	ldr	r3, [pc, #560]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ed      	beq.n	80041ec <HAL_RCC_OscConfig+0x53c>
 8004210:	e015      	b.n	800423e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fd fb5d 	bl	80018d0 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004218:	e00a      	b.n	8004230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421a:	f7fd fb59 	bl	80018d0 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e15f      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004230:	4b80      	ldr	r3, [pc, #512]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1ed      	bne.n	800421a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800423e:	7ffb      	ldrb	r3, [r7, #31]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b7b      	ldr	r3, [pc, #492]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	4a7a      	ldr	r2, [pc, #488]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d03c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01c      	beq.n	800429e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004264:	4b73      	ldr	r3, [pc, #460]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426a:	4a72      	ldr	r2, [pc, #456]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fd fb2c 	bl	80018d0 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800427c:	f7fd fb28 	bl	80018d0 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e130      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428e:	4b69      	ldr	r3, [pc, #420]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <HAL_RCC_OscConfig+0x5cc>
 800429c:	e01b      	b.n	80042d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80042a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a4:	4a63      	ldr	r2, [pc, #396]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fd fb0f 	bl	80018d0 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b6:	f7fd fb0b 	bl	80018d0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e113      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c8:	4b5a      	ldr	r3, [pc, #360]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80042ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ef      	bne.n	80042b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8107 	beq.w	80044ee <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f040 80cf 	bne.w	8004488 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042ea:	4b52      	ldr	r3, [pc, #328]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0203 	and.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d12c      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	3b01      	subs	r3, #1
 800430a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d123      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d11b      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d113      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	3b01      	subs	r3, #1
 800433e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d109      	bne.n	8004358 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	3b01      	subs	r3, #1
 8004352:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d071      	beq.n	800443c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d068      	beq.n	8004430 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800435e:	4b35      	ldr	r3, [pc, #212]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800436a:	4b32      	ldr	r3, [pc, #200]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0ba      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004384:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004386:	f7fd faa3 	bl	80018d0 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438e:	f7fd fa9f 	bl	80018d0 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0a7      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ac:	4b21      	ldr	r3, [pc, #132]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_RCC_OscConfig+0x788>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043bc:	3a01      	subs	r2, #1
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	4311      	orrs	r1, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043c6:	0212      	lsls	r2, r2, #8
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043ce:	0852      	lsrs	r2, r2, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0552      	lsls	r2, r2, #21
 80043d4:	4311      	orrs	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043da:	0852      	lsrs	r2, r2, #1
 80043dc:	3a01      	subs	r2, #1
 80043de:	0652      	lsls	r2, r2, #25
 80043e0:	4311      	orrs	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043e6:	06d2      	lsls	r2, r2, #27
 80043e8:	430a      	orrs	r2, r1
 80043ea:	4912      	ldr	r1, [pc, #72]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043f0:	4b10      	ldr	r3, [pc, #64]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004408:	f7fd fa62 	bl	80018d0 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fa5e 	bl	80018d0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e066      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <HAL_RCC_OscConfig+0x784>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800442e:	e05e      	b.n	80044ee <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e05d      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
 8004434:	40021000 	.word	0x40021000
 8004438:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443c:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d152      	bne.n	80044ee <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004448:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2a      	ldr	r2, [pc, #168]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 800444e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004454:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004460:	f7fd fa36 	bl	80018d0 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fa32 	bl	80018d0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e03a      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447a:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x7b8>
 8004486:	e032      	b.n	80044ee <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b0c      	cmp	r3, #12
 800448c:	d02d      	beq.n	80044ea <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448e:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 8004494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004498:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 80044ac:	f023 0303 	bic.w	r3, r3, #3
 80044b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 80044b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd fa05 	bl	80018d0 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fd fa01 	bl	80018d0 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e009      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCC_OscConfig+0x848>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x81a>
 80044e8:	e001      	b.n	80044ee <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000

080044fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e10f      	b.n	8004734 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004514:	4b89      	ldr	r3, [pc, #548]	; (800473c <HAL_RCC_ClockConfig+0x240>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d910      	bls.n	8004544 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b86      	ldr	r3, [pc, #536]	; (800473c <HAL_RCC_ClockConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f023 020f 	bic.w	r2, r3, #15
 800452a:	4984      	ldr	r1, [pc, #528]	; (800473c <HAL_RCC_ClockConfig+0x240>)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b82      	ldr	r3, [pc, #520]	; (800473c <HAL_RCC_ClockConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0f7      	b.n	8004734 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8089 	beq.w	8004664 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d133      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455a:	4b79      	ldr	r3, [pc, #484]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0e4      	b.n	8004734 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800456a:	f000 fa11 	bl	8004990 <RCC_GetSysClockFreqFromPLLSource>
 800456e:	4603      	mov	r3, r0
 8004570:	4a74      	ldr	r2, [pc, #464]	; (8004744 <HAL_RCC_ClockConfig+0x248>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d955      	bls.n	8004622 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004576:	4b72      	ldr	r3, [pc, #456]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004582:	4b6f      	ldr	r3, [pc, #444]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458a:	4a6d      	ldr	r2, [pc, #436]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 800458c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004590:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	e044      	b.n	8004622 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03e      	beq.n	8004622 <HAL_RCC_ClockConfig+0x126>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d13a      	bne.n	8004622 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ac:	4b64      	ldr	r3, [pc, #400]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b4:	4a62      	ldr	r2, [pc, #392]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 80045b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e02f      	b.n	8004622 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ca:	4b5d      	ldr	r3, [pc, #372]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d115      	bne.n	8004602 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0ac      	b.n	8004734 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e2:	4b57      	ldr	r3, [pc, #348]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0a0      	b.n	8004734 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f2:	4b53      	ldr	r3, [pc, #332]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e098      	b.n	8004734 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004602:	f000 f8a7 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004606:	4603      	mov	r3, r0
 8004608:	4a4e      	ldr	r2, [pc, #312]	; (8004744 <HAL_RCC_ClockConfig+0x248>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d909      	bls.n	8004622 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800460e:	4b4c      	ldr	r3, [pc, #304]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004616:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004622:	4b47      	ldr	r3, [pc, #284]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 0203 	bic.w	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4944      	ldr	r1, [pc, #272]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fd f94c 	bl	80018d0 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	e00a      	b.n	8004652 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463c:	f7fd f948 	bl	80018d0 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e070      	b.n	8004734 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 020c 	and.w	r2, r3, #12
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	429a      	cmp	r2, r3
 8004662:	d1eb      	bne.n	800463c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004670:	4b33      	ldr	r3, [pc, #204]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4930      	ldr	r1, [pc, #192]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
 8004682:	e008      	b.n	8004696 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d105      	bne.n	8004696 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800468a:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004694:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004696:	4b29      	ldr	r3, [pc, #164]	; (800473c <HAL_RCC_ClockConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d210      	bcs.n	80046c6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a4:	4b25      	ldr	r3, [pc, #148]	; (800473c <HAL_RCC_ClockConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f023 020f 	bic.w	r2, r3, #15
 80046ac:	4923      	ldr	r1, [pc, #140]	; (800473c <HAL_RCC_ClockConfig+0x240>)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <HAL_RCC_ClockConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e036      	b.n	8004734 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4918      	ldr	r1, [pc, #96]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f0:	4b13      	ldr	r3, [pc, #76]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4910      	ldr	r1, [pc, #64]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 8004700:	4313      	orrs	r3, r2
 8004702:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004704:	f000 f826 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_RCC_ClockConfig+0x244>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	490c      	ldr	r1, [pc, #48]	; (8004748 <HAL_RCC_ClockConfig+0x24c>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
 8004720:	4a0a      	ldr	r2, [pc, #40]	; (800474c <HAL_RCC_ClockConfig+0x250>)
 8004722:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_RCC_ClockConfig+0x254>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fd f881 	bl	8001830 <HAL_InitTick>
 800472e:	4603      	mov	r3, r0
 8004730:	73fb      	strb	r3, [r7, #15]

  return status;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40022000 	.word	0x40022000
 8004740:	40021000 	.word	0x40021000
 8004744:	04c4b400 	.word	0x04c4b400
 8004748:	08006680 	.word	0x08006680
 800474c:	20000000 	.word	0x20000000
 8004750:	20000004 	.word	0x20000004

08004754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	b480      	push	{r7}
 8004756:	b089      	sub	sp, #36	; 0x24
 8004758:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004762:	4b3e      	ldr	r3, [pc, #248]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800476c:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x34>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d121      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d11e      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004788:	4b34      	ldr	r3, [pc, #208]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004794:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	e005      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047b0:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d102      	bne.n	80047d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e004      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d8:	4b23      	ldr	r3, [pc, #140]	; (8004868 <HAL_RCC_GetSysClockFreq+0x114>)
 80047da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d134      	bne.n	800484c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0xa6>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d003      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0xac>
 80047f8:	e005      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <HAL_RCC_GetSysClockFreq+0x110>)
 80047fc:	617b      	str	r3, [r7, #20]
      break;
 80047fe:	e005      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_GetSysClockFreq+0x114>)
 8004802:	617b      	str	r3, [r7, #20]
      break;
 8004804:	e002      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	617b      	str	r3, [r7, #20]
      break;
 800480a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800480c:	4b13      	ldr	r3, [pc, #76]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	3301      	adds	r3, #1
 8004818:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	fb03 f202 	mul.w	r2, r3, r2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	0e5b      	lsrs	r3, r3, #25
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	3301      	adds	r3, #1
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800484c:	69bb      	ldr	r3, [r7, #24]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3724      	adds	r7, #36	; 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	08006698 	.word	0x08006698
 8004864:	00f42400 	.word	0x00f42400
 8004868:	007a1200 	.word	0x007a1200

0800486c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_RCC_GetHCLKFreq+0x14>)
 8004872:	681b      	ldr	r3, [r3, #0]
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000000 	.word	0x20000000

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004888:	f7ff fff0 	bl	800486c <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021000 	.word	0x40021000
 80048ac:	08006690 	.word	0x08006690

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048b4:	f7ff ffda 	bl	800486c <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0adb      	lsrs	r3, r3, #11
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4904      	ldr	r1, [pc, #16]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	08006690 	.word	0x08006690

080048dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048f4:	f7ff f8f8 	bl	8003ae8 <HAL_PWREx_GetVoltageRange>
 80048f8:	6178      	str	r0, [r7, #20]
 80048fa:	e014      	b.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a21      	ldr	r2, [pc, #132]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
 8004908:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004914:	f7ff f8e8 	bl	8003ae8 <HAL_PWREx_GetVoltageRange>
 8004918:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800491a:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004924:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492c:	d10b      	bne.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b80      	cmp	r3, #128	; 0x80
 8004932:	d913      	bls.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2ba0      	cmp	r3, #160	; 0xa0
 8004938:	d902      	bls.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800493a:	2302      	movs	r3, #2
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e00d      	b.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004940:	2301      	movs	r3, #1
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e00a      	b.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b7f      	cmp	r3, #127	; 0x7f
 800494a:	d902      	bls.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800494c:	2302      	movs	r3, #2
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e004      	b.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b70      	cmp	r3, #112	; 0x70
 8004956:	d101      	bne.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004958:	2301      	movs	r3, #1
 800495a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 020f 	bic.w	r2, r3, #15
 8004964:	4909      	ldr	r1, [pc, #36]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800496c:	4b07      	ldr	r3, [pc, #28]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40021000 	.word	0x40021000
 800498c:	40022000 	.word	0x40022000

08004990 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800499a:	4b2d      	ldr	r3, [pc, #180]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d118      	bne.n	80049d8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049a6:	4b2a      	ldr	r3, [pc, #168]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049b2:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e005      	b.n	80049ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049c2:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049ce:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d003      	beq.n	80049f0 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d003      	beq.n	80049f6 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80049ee:	e005      	b.n	80049fc <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80049f2:	613b      	str	r3, [r7, #16]
    break;
 80049f4:	e005      	b.n	8004a02 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80049f6:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049f8:	613b      	str	r3, [r7, #16]
    break;
 80049fa:	e002      	b.n	8004a02 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	613b      	str	r3, [r7, #16]
    break;
 8004a00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	fb03 f202 	mul.w	r2, r3, r2
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	0e5b      	lsrs	r3, r3, #25
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	3301      	adds	r3, #1
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004a42:	683b      	ldr	r3, [r7, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40021000 	.word	0x40021000
 8004a54:	08006698 	.word	0x08006698
 8004a58:	00f42400 	.word	0x00f42400
 8004a5c:	007a1200 	.word	0x007a1200

08004a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d040      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d02a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d825      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a88:	2b60      	cmp	r3, #96	; 0x60
 8004a8a:	d026      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a8c:	2b60      	cmp	r3, #96	; 0x60
 8004a8e:	d821      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d006      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d81d      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d009      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d010      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004aa0:	e018      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aa2:	4b89      	ldr	r3, [pc, #548]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4a88      	ldr	r2, [pc, #544]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aae:	e015      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb02 	bl	80050c0 <RCCEx_PLLSAI1_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ac0:	e00c      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3320      	adds	r3, #32
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fbed 	bl	80052a8 <RCCEx_PLLSAI2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ad2:	e003      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ae2:	4b79      	ldr	r3, [pc, #484]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ae8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af0:	4975      	ldr	r1, [pc, #468]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004af8:	e001      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d047      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d030      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d82a      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1e:	d02a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b24:	d824      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b30:	d81e      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d010      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b3c:	e018      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b3e:	4b62      	ldr	r3, [pc, #392]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4a61      	ldr	r2, [pc, #388]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b4a:	e015      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fab4 	bl	80050c0 <RCCEx_PLLSAI1_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3320      	adds	r3, #32
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb9f 	bl	80052a8 <RCCEx_PLLSAI2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	74fb      	strb	r3, [r7, #19]
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10b      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b7e:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	494e      	ldr	r1, [pc, #312]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b94:	e001      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 809f 	beq.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bac:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a40      	ldr	r2, [pc, #256]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bce:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bde:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bea:	f7fc fe71 	bl	80018d0 <HAL_GetTick>
 8004bee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bf0:	e009      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf2:	f7fc fe6d 	bl	80018d0 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d902      	bls.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	74fb      	strb	r3, [r7, #19]
        break;
 8004c04:	e005      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ef      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c12:	7cfb      	ldrb	r3, [r7, #19]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d15b      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c18:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01f      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d019      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c42:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c62:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d016      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fc fe2c 	bl	80018d0 <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fc fe28 	bl	80018d0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d902      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	74fb      	strb	r3, [r7, #19]
            break;
 8004c92:	e006      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0ec      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10c      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca8:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	4903      	ldr	r1, [pc, #12]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	74bb      	strb	r3, [r7, #18]
 8004cc6:	e005      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd4:	7c7b      	ldrb	r3, [r7, #17]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d105      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cda:	4ba0      	ldr	r3, [pc, #640]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4a9f      	ldr	r2, [pc, #636]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cf2:	4b9a      	ldr	r3, [pc, #616]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f023 0203 	bic.w	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	4996      	ldr	r1, [pc, #600]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d14:	4b91      	ldr	r3, [pc, #580]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f023 020c 	bic.w	r2, r3, #12
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	498e      	ldr	r1, [pc, #568]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d36:	4b89      	ldr	r3, [pc, #548]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	4985      	ldr	r1, [pc, #532]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d58:	4b80      	ldr	r3, [pc, #512]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d66:	497d      	ldr	r1, [pc, #500]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d7a:	4b78      	ldr	r3, [pc, #480]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	4974      	ldr	r1, [pc, #464]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	496c      	ldr	r1, [pc, #432]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dbe:	4b67      	ldr	r3, [pc, #412]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dcc:	4963      	ldr	r1, [pc, #396]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004de0:	4b5e      	ldr	r3, [pc, #376]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dee:	495b      	ldr	r1, [pc, #364]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e02:	4b56      	ldr	r3, [pc, #344]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	4952      	ldr	r1, [pc, #328]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e24:	4b4d      	ldr	r3, [pc, #308]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	494a      	ldr	r1, [pc, #296]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e46:	4b45      	ldr	r3, [pc, #276]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	4941      	ldr	r1, [pc, #260]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e68:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	4939      	ldr	r1, [pc, #228]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d028      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e8a:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	4930      	ldr	r1, [pc, #192]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	4a2b      	ldr	r2, [pc, #172]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb4:	60d3      	str	r3, [r2, #12]
 8004eb6:	e011      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f8f9 	bl	80050c0 <RCCEx_PLLSAI1_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d04d      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef0:	d108      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004efe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f02:	e012      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f04:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f0a:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f22:	490e      	ldr	r1, [pc, #56]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f32:	d106      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3e:	60d3      	str	r3, [r2, #12]
 8004f40:	e020      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4a02      	ldr	r2, [pc, #8]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f56:	60d3      	str	r3, [r2, #12]
 8004f58:	e014      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f8a5 	bl	80050c0 <RCCEx_PLLSAI1_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d028      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f90:	4b4a      	ldr	r3, [pc, #296]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9e:	4947      	ldr	r1, [pc, #284]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fae:	d106      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb0:	4b42      	ldr	r3, [pc, #264]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a41      	ldr	r2, [pc, #260]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fba:	60d3      	str	r3, [r2, #12]
 8004fbc:	e011      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	2101      	movs	r1, #1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f876 	bl	80050c0 <RCCEx_PLLSAI1_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01e      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fee:	4b33      	ldr	r3, [pc, #204]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffe:	492f      	ldr	r1, [pc, #188]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005010:	d10c      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3304      	adds	r3, #4
 8005016:	2102      	movs	r1, #2
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f851 	bl	80050c0 <RCCEx_PLLSAI1_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005038:	4b20      	ldr	r3, [pc, #128]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800503e:	f023 0204 	bic.w	r2, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005048:	491c      	ldr	r1, [pc, #112]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800505c:	4b17      	ldr	r3, [pc, #92]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005062:	f023 0218 	bic.w	r2, r3, #24
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	4913      	ldr	r1, [pc, #76]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005080:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005086:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005090:	490a      	ldr	r1, [pc, #40]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800509e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050a2:	d105      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4a04      	ldr	r2, [pc, #16]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000

080050c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050ce:	4b72      	ldr	r3, [pc, #456]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050da:	4b6f      	ldr	r3, [pc, #444]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0203 	and.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d103      	bne.n	80050f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
       ||
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d142      	bne.n	8005178 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
 80050f6:	e03f      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d018      	beq.n	8005132 <RCCEx_PLLSAI1_Config+0x72>
 8005100:	2b03      	cmp	r3, #3
 8005102:	d825      	bhi.n	8005150 <RCCEx_PLLSAI1_Config+0x90>
 8005104:	2b01      	cmp	r3, #1
 8005106:	d002      	beq.n	800510e <RCCEx_PLLSAI1_Config+0x4e>
 8005108:	2b02      	cmp	r3, #2
 800510a:	d009      	beq.n	8005120 <RCCEx_PLLSAI1_Config+0x60>
 800510c:	e020      	b.n	8005150 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800510e:	4b62      	ldr	r3, [pc, #392]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11d      	bne.n	8005156 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800511e:	e01a      	b.n	8005156 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005120:	4b5d      	ldr	r3, [pc, #372]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005128:	2b00      	cmp	r3, #0
 800512a:	d116      	bne.n	800515a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005130:	e013      	b.n	800515a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005132:	4b59      	ldr	r3, [pc, #356]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10f      	bne.n	800515e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800513e:	4b56      	ldr	r3, [pc, #344]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800514e:	e006      	b.n	800515e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
      break;
 8005154:	e004      	b.n	8005160 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005156:	bf00      	nop
 8005158:	e002      	b.n	8005160 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800515a:	bf00      	nop
 800515c:	e000      	b.n	8005160 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800515e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d108      	bne.n	8005178 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005166:	4b4c      	ldr	r3, [pc, #304]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f023 0203 	bic.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4949      	ldr	r1, [pc, #292]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f040 8086 	bne.w	800528c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005180:	4b45      	ldr	r3, [pc, #276]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a44      	ldr	r2, [pc, #272]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005186:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800518a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518c:	f7fc fba0 	bl	80018d0 <HAL_GetTick>
 8005190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005192:	e009      	b.n	80051a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005194:	f7fc fb9c 	bl	80018d0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d902      	bls.n	80051a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	73fb      	strb	r3, [r7, #15]
        break;
 80051a6:	e005      	b.n	80051b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051a8:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ef      	bne.n	8005194 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d168      	bne.n	800528c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d113      	bne.n	80051e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051c0:	4b35      	ldr	r3, [pc, #212]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	4b35      	ldr	r3, [pc, #212]	; (800529c <RCCEx_PLLSAI1_Config+0x1dc>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6892      	ldr	r2, [r2, #8]
 80051cc:	0211      	lsls	r1, r2, #8
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68d2      	ldr	r2, [r2, #12]
 80051d2:	06d2      	lsls	r2, r2, #27
 80051d4:	4311      	orrs	r1, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6852      	ldr	r2, [r2, #4]
 80051da:	3a01      	subs	r2, #1
 80051dc:	0112      	lsls	r2, r2, #4
 80051de:	430a      	orrs	r2, r1
 80051e0:	492d      	ldr	r1, [pc, #180]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	610b      	str	r3, [r1, #16]
 80051e6:	e02d      	b.n	8005244 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d115      	bne.n	800521a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051ee:	4b2a      	ldr	r3, [pc, #168]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6892      	ldr	r2, [r2, #8]
 80051fa:	0211      	lsls	r1, r2, #8
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6912      	ldr	r2, [r2, #16]
 8005200:	0852      	lsrs	r2, r2, #1
 8005202:	3a01      	subs	r2, #1
 8005204:	0552      	lsls	r2, r2, #21
 8005206:	4311      	orrs	r1, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6852      	ldr	r2, [r2, #4]
 800520c:	3a01      	subs	r2, #1
 800520e:	0112      	lsls	r2, r2, #4
 8005210:	430a      	orrs	r2, r1
 8005212:	4921      	ldr	r1, [pc, #132]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005214:	4313      	orrs	r3, r2
 8005216:	610b      	str	r3, [r1, #16]
 8005218:	e014      	b.n	8005244 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800521a:	4b1f      	ldr	r3, [pc, #124]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6892      	ldr	r2, [r2, #8]
 8005226:	0211      	lsls	r1, r2, #8
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6952      	ldr	r2, [r2, #20]
 800522c:	0852      	lsrs	r2, r2, #1
 800522e:	3a01      	subs	r2, #1
 8005230:	0652      	lsls	r2, r2, #25
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6852      	ldr	r2, [r2, #4]
 8005238:	3a01      	subs	r2, #1
 800523a:	0112      	lsls	r2, r2, #4
 800523c:	430a      	orrs	r2, r1
 800523e:	4916      	ldr	r1, [pc, #88]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005240:	4313      	orrs	r3, r2
 8005242:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005244:	4b14      	ldr	r3, [pc, #80]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a13      	ldr	r2, [pc, #76]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 800524a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800524e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005250:	f7fc fb3e 	bl	80018d0 <HAL_GetTick>
 8005254:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005256:	e009      	b.n	800526c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005258:	f7fc fb3a 	bl	80018d0 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d902      	bls.n	800526c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	73fb      	strb	r3, [r7, #15]
          break;
 800526a:	e005      	b.n	8005278 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0ef      	beq.n	8005258 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	4904      	ldr	r1, [pc, #16]	; (8005298 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005288:	4313      	orrs	r3, r2
 800528a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	07ff800f 	.word	0x07ff800f
 80052a0:	ff9f800f 	.word	0xff9f800f
 80052a4:	f9ff800f 	.word	0xf9ff800f

080052a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052b6:	4b72      	ldr	r3, [pc, #456]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00e      	beq.n	80052e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052c2:	4b6f      	ldr	r3, [pc, #444]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0203 	and.w	r2, r3, #3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d103      	bne.n	80052da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
       ||
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d142      	bne.n	8005360 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
 80052de:	e03f      	b.n	8005360 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d018      	beq.n	800531a <RCCEx_PLLSAI2_Config+0x72>
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d825      	bhi.n	8005338 <RCCEx_PLLSAI2_Config+0x90>
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d002      	beq.n	80052f6 <RCCEx_PLLSAI2_Config+0x4e>
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d009      	beq.n	8005308 <RCCEx_PLLSAI2_Config+0x60>
 80052f4:	e020      	b.n	8005338 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052f6:	4b62      	ldr	r3, [pc, #392]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d11d      	bne.n	800533e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005306:	e01a      	b.n	800533e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005308:	4b5d      	ldr	r3, [pc, #372]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005318:	e013      	b.n	8005342 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800531a:	4b59      	ldr	r3, [pc, #356]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005326:	4b56      	ldr	r3, [pc, #344]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005336:	e006      	b.n	8005346 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      break;
 800533c:	e004      	b.n	8005348 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800533e:	bf00      	nop
 8005340:	e002      	b.n	8005348 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005346:	bf00      	nop
    }

    if(status == HAL_OK)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d108      	bne.n	8005360 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800534e:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4949      	ldr	r1, [pc, #292]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 800535c:	4313      	orrs	r3, r2
 800535e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 8086 	bne.w	8005474 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005368:	4b45      	ldr	r3, [pc, #276]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a44      	ldr	r2, [pc, #272]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 800536e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005374:	f7fc faac 	bl	80018d0 <HAL_GetTick>
 8005378:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800537a:	e009      	b.n	8005390 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800537c:	f7fc faa8 	bl	80018d0 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d902      	bls.n	8005390 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	73fb      	strb	r3, [r7, #15]
        break;
 800538e:	e005      	b.n	800539c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005390:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1ef      	bne.n	800537c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d168      	bne.n	8005474 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d113      	bne.n	80053d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053a8:	4b35      	ldr	r3, [pc, #212]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	4b35      	ldr	r3, [pc, #212]	; (8005484 <RCCEx_PLLSAI2_Config+0x1dc>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6892      	ldr	r2, [r2, #8]
 80053b4:	0211      	lsls	r1, r2, #8
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68d2      	ldr	r2, [r2, #12]
 80053ba:	06d2      	lsls	r2, r2, #27
 80053bc:	4311      	orrs	r1, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6852      	ldr	r2, [r2, #4]
 80053c2:	3a01      	subs	r2, #1
 80053c4:	0112      	lsls	r2, r2, #4
 80053c6:	430a      	orrs	r2, r1
 80053c8:	492d      	ldr	r1, [pc, #180]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	614b      	str	r3, [r1, #20]
 80053ce:	e02d      	b.n	800542c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d115      	bne.n	8005402 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053d6:	4b2a      	ldr	r3, [pc, #168]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	4b2b      	ldr	r3, [pc, #172]	; (8005488 <RCCEx_PLLSAI2_Config+0x1e0>)
 80053dc:	4013      	ands	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6892      	ldr	r2, [r2, #8]
 80053e2:	0211      	lsls	r1, r2, #8
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6912      	ldr	r2, [r2, #16]
 80053e8:	0852      	lsrs	r2, r2, #1
 80053ea:	3a01      	subs	r2, #1
 80053ec:	0552      	lsls	r2, r2, #21
 80053ee:	4311      	orrs	r1, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6852      	ldr	r2, [r2, #4]
 80053f4:	3a01      	subs	r2, #1
 80053f6:	0112      	lsls	r2, r2, #4
 80053f8:	430a      	orrs	r2, r1
 80053fa:	4921      	ldr	r1, [pc, #132]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	614b      	str	r3, [r1, #20]
 8005400:	e014      	b.n	800542c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005402:	4b1f      	ldr	r3, [pc, #124]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005408:	4013      	ands	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6892      	ldr	r2, [r2, #8]
 800540e:	0211      	lsls	r1, r2, #8
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6952      	ldr	r2, [r2, #20]
 8005414:	0852      	lsrs	r2, r2, #1
 8005416:	3a01      	subs	r2, #1
 8005418:	0652      	lsls	r2, r2, #25
 800541a:	4311      	orrs	r1, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6852      	ldr	r2, [r2, #4]
 8005420:	3a01      	subs	r2, #1
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	430a      	orrs	r2, r1
 8005426:	4916      	ldr	r1, [pc, #88]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005428:	4313      	orrs	r3, r2
 800542a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800542c:	4b14      	ldr	r3, [pc, #80]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a13      	ldr	r2, [pc, #76]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005436:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005438:	f7fc fa4a 	bl	80018d0 <HAL_GetTick>
 800543c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800543e:	e009      	b.n	8005454 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005440:	f7fc fa46 	bl	80018d0 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d902      	bls.n	8005454 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	73fb      	strb	r3, [r7, #15]
          break;
 8005452:	e005      	b.n	8005460 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ef      	beq.n	8005440 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	4904      	ldr	r1, [pc, #16]	; (8005480 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005470:	4313      	orrs	r3, r2
 8005472:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000
 8005484:	07ff800f 	.word	0x07ff800f
 8005488:	ff9f800f 	.word	0xff9f800f
 800548c:	f9ff800f 	.word	0xf9ff800f

08005490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e042      	b.n	8005528 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fb ffc5 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2224      	movs	r2, #36	; 0x24
 80054be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f82c 	bl	8005530 <UART_SetConfig>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e022      	b.n	8005528 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fb1c 	bl	8005b28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800550e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fba3 	bl	8005c6c <UART_CheckIdleState>
 8005526:	4603      	mov	r3, r0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005534:	b08c      	sub	sp, #48	; 0x30
 8005536:	af00      	add	r7, sp, #0
 8005538:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	431a      	orrs	r2, r3
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	431a      	orrs	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	4313      	orrs	r3, r2
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4baa      	ldr	r3, [pc, #680]	; (8005808 <UART_SetConfig+0x2d8>)
 8005560:	4013      	ands	r3, r2
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005568:	430b      	orrs	r3, r1
 800556a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a9f      	ldr	r2, [pc, #636]	; (800580c <UART_SetConfig+0x2dc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005598:	4313      	orrs	r3, r2
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	f023 010f 	bic.w	r1, r3, #15
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a90      	ldr	r2, [pc, #576]	; (8005810 <UART_SetConfig+0x2e0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d125      	bne.n	8005620 <UART_SetConfig+0xf0>
 80055d4:	4b8f      	ldr	r3, [pc, #572]	; (8005814 <UART_SetConfig+0x2e4>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d81a      	bhi.n	8005618 <UART_SetConfig+0xe8>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <UART_SetConfig+0xb8>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005609 	.word	0x08005609
 80055f0:	08005601 	.word	0x08005601
 80055f4:	08005611 	.word	0x08005611
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055fe:	e116      	b.n	800582e <UART_SetConfig+0x2fe>
 8005600:	2302      	movs	r3, #2
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005606:	e112      	b.n	800582e <UART_SetConfig+0x2fe>
 8005608:	2304      	movs	r3, #4
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560e:	e10e      	b.n	800582e <UART_SetConfig+0x2fe>
 8005610:	2308      	movs	r3, #8
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005616:	e10a      	b.n	800582e <UART_SetConfig+0x2fe>
 8005618:	2310      	movs	r3, #16
 800561a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800561e:	e106      	b.n	800582e <UART_SetConfig+0x2fe>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a7c      	ldr	r2, [pc, #496]	; (8005818 <UART_SetConfig+0x2e8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d138      	bne.n	800569c <UART_SetConfig+0x16c>
 800562a:	4b7a      	ldr	r3, [pc, #488]	; (8005814 <UART_SetConfig+0x2e4>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f003 030c 	and.w	r3, r3, #12
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d82d      	bhi.n	8005694 <UART_SetConfig+0x164>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <UART_SetConfig+0x110>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005675 	.word	0x08005675
 8005644:	08005695 	.word	0x08005695
 8005648:	08005695 	.word	0x08005695
 800564c:	08005695 	.word	0x08005695
 8005650:	08005685 	.word	0x08005685
 8005654:	08005695 	.word	0x08005695
 8005658:	08005695 	.word	0x08005695
 800565c:	08005695 	.word	0x08005695
 8005660:	0800567d 	.word	0x0800567d
 8005664:	08005695 	.word	0x08005695
 8005668:	08005695 	.word	0x08005695
 800566c:	08005695 	.word	0x08005695
 8005670:	0800568d 	.word	0x0800568d
 8005674:	2300      	movs	r3, #0
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567a:	e0d8      	b.n	800582e <UART_SetConfig+0x2fe>
 800567c:	2302      	movs	r3, #2
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005682:	e0d4      	b.n	800582e <UART_SetConfig+0x2fe>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568a:	e0d0      	b.n	800582e <UART_SetConfig+0x2fe>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005692:	e0cc      	b.n	800582e <UART_SetConfig+0x2fe>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569a:	e0c8      	b.n	800582e <UART_SetConfig+0x2fe>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a5e      	ldr	r2, [pc, #376]	; (800581c <UART_SetConfig+0x2ec>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d125      	bne.n	80056f2 <UART_SetConfig+0x1c2>
 80056a6:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <UART_SetConfig+0x2e4>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056b0:	2b30      	cmp	r3, #48	; 0x30
 80056b2:	d016      	beq.n	80056e2 <UART_SetConfig+0x1b2>
 80056b4:	2b30      	cmp	r3, #48	; 0x30
 80056b6:	d818      	bhi.n	80056ea <UART_SetConfig+0x1ba>
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d00a      	beq.n	80056d2 <UART_SetConfig+0x1a2>
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d814      	bhi.n	80056ea <UART_SetConfig+0x1ba>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <UART_SetConfig+0x19a>
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d008      	beq.n	80056da <UART_SetConfig+0x1aa>
 80056c8:	e00f      	b.n	80056ea <UART_SetConfig+0x1ba>
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d0:	e0ad      	b.n	800582e <UART_SetConfig+0x2fe>
 80056d2:	2302      	movs	r3, #2
 80056d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d8:	e0a9      	b.n	800582e <UART_SetConfig+0x2fe>
 80056da:	2304      	movs	r3, #4
 80056dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e0:	e0a5      	b.n	800582e <UART_SetConfig+0x2fe>
 80056e2:	2308      	movs	r3, #8
 80056e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e8:	e0a1      	b.n	800582e <UART_SetConfig+0x2fe>
 80056ea:	2310      	movs	r3, #16
 80056ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f0:	e09d      	b.n	800582e <UART_SetConfig+0x2fe>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a4a      	ldr	r2, [pc, #296]	; (8005820 <UART_SetConfig+0x2f0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d125      	bne.n	8005748 <UART_SetConfig+0x218>
 80056fc:	4b45      	ldr	r3, [pc, #276]	; (8005814 <UART_SetConfig+0x2e4>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005706:	2bc0      	cmp	r3, #192	; 0xc0
 8005708:	d016      	beq.n	8005738 <UART_SetConfig+0x208>
 800570a:	2bc0      	cmp	r3, #192	; 0xc0
 800570c:	d818      	bhi.n	8005740 <UART_SetConfig+0x210>
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d00a      	beq.n	8005728 <UART_SetConfig+0x1f8>
 8005712:	2b80      	cmp	r3, #128	; 0x80
 8005714:	d814      	bhi.n	8005740 <UART_SetConfig+0x210>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <UART_SetConfig+0x1f0>
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d008      	beq.n	8005730 <UART_SetConfig+0x200>
 800571e:	e00f      	b.n	8005740 <UART_SetConfig+0x210>
 8005720:	2300      	movs	r3, #0
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005726:	e082      	b.n	800582e <UART_SetConfig+0x2fe>
 8005728:	2302      	movs	r3, #2
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572e:	e07e      	b.n	800582e <UART_SetConfig+0x2fe>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005736:	e07a      	b.n	800582e <UART_SetConfig+0x2fe>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573e:	e076      	b.n	800582e <UART_SetConfig+0x2fe>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005746:	e072      	b.n	800582e <UART_SetConfig+0x2fe>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a35      	ldr	r2, [pc, #212]	; (8005824 <UART_SetConfig+0x2f4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d12a      	bne.n	80057a8 <UART_SetConfig+0x278>
 8005752:	4b30      	ldr	r3, [pc, #192]	; (8005814 <UART_SetConfig+0x2e4>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005760:	d01a      	beq.n	8005798 <UART_SetConfig+0x268>
 8005762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005766:	d81b      	bhi.n	80057a0 <UART_SetConfig+0x270>
 8005768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576c:	d00c      	beq.n	8005788 <UART_SetConfig+0x258>
 800576e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005772:	d815      	bhi.n	80057a0 <UART_SetConfig+0x270>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <UART_SetConfig+0x250>
 8005778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577c:	d008      	beq.n	8005790 <UART_SetConfig+0x260>
 800577e:	e00f      	b.n	80057a0 <UART_SetConfig+0x270>
 8005780:	2300      	movs	r3, #0
 8005782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005786:	e052      	b.n	800582e <UART_SetConfig+0x2fe>
 8005788:	2302      	movs	r3, #2
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578e:	e04e      	b.n	800582e <UART_SetConfig+0x2fe>
 8005790:	2304      	movs	r3, #4
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005796:	e04a      	b.n	800582e <UART_SetConfig+0x2fe>
 8005798:	2308      	movs	r3, #8
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e046      	b.n	800582e <UART_SetConfig+0x2fe>
 80057a0:	2310      	movs	r3, #16
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e042      	b.n	800582e <UART_SetConfig+0x2fe>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <UART_SetConfig+0x2dc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d13a      	bne.n	8005828 <UART_SetConfig+0x2f8>
 80057b2:	4b18      	ldr	r3, [pc, #96]	; (8005814 <UART_SetConfig+0x2e4>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057c0:	d01a      	beq.n	80057f8 <UART_SetConfig+0x2c8>
 80057c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057c6:	d81b      	bhi.n	8005800 <UART_SetConfig+0x2d0>
 80057c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057cc:	d00c      	beq.n	80057e8 <UART_SetConfig+0x2b8>
 80057ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d2:	d815      	bhi.n	8005800 <UART_SetConfig+0x2d0>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <UART_SetConfig+0x2b0>
 80057d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057dc:	d008      	beq.n	80057f0 <UART_SetConfig+0x2c0>
 80057de:	e00f      	b.n	8005800 <UART_SetConfig+0x2d0>
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e6:	e022      	b.n	800582e <UART_SetConfig+0x2fe>
 80057e8:	2302      	movs	r3, #2
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ee:	e01e      	b.n	800582e <UART_SetConfig+0x2fe>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f6:	e01a      	b.n	800582e <UART_SetConfig+0x2fe>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fe:	e016      	b.n	800582e <UART_SetConfig+0x2fe>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005806:	e012      	b.n	800582e <UART_SetConfig+0x2fe>
 8005808:	cfff69f3 	.word	0xcfff69f3
 800580c:	40008000 	.word	0x40008000
 8005810:	40013800 	.word	0x40013800
 8005814:	40021000 	.word	0x40021000
 8005818:	40004400 	.word	0x40004400
 800581c:	40004800 	.word	0x40004800
 8005820:	40004c00 	.word	0x40004c00
 8005824:	40005000 	.word	0x40005000
 8005828:	2310      	movs	r3, #16
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4aae      	ldr	r2, [pc, #696]	; (8005aec <UART_SetConfig+0x5bc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	f040 8097 	bne.w	8005968 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800583a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800583e:	2b08      	cmp	r3, #8
 8005840:	d823      	bhi.n	800588a <UART_SetConfig+0x35a>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0x318>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	0800586d 	.word	0x0800586d
 800584c:	0800588b 	.word	0x0800588b
 8005850:	08005875 	.word	0x08005875
 8005854:	0800588b 	.word	0x0800588b
 8005858:	0800587b 	.word	0x0800587b
 800585c:	0800588b 	.word	0x0800588b
 8005860:	0800588b 	.word	0x0800588b
 8005864:	0800588b 	.word	0x0800588b
 8005868:	08005883 	.word	0x08005883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800586c:	f7ff f80a 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005872:	e010      	b.n	8005896 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005874:	4b9e      	ldr	r3, [pc, #632]	; (8005af0 <UART_SetConfig+0x5c0>)
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005878:	e00d      	b.n	8005896 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587a:	f7fe ff6b 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 800587e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005880:	e009      	b.n	8005896 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005888:	e005      	b.n	8005896 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005894:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8130 	beq.w	8005afe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	4a94      	ldr	r2, [pc, #592]	; (8005af4 <UART_SetConfig+0x5c4>)
 80058a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4413      	add	r3, r2
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d305      	bcc.n	80058ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d903      	bls.n	80058d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058d4:	e113      	b.n	8005afe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	2200      	movs	r2, #0
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	60fa      	str	r2, [r7, #12]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	4a84      	ldr	r2, [pc, #528]	; (8005af4 <UART_SetConfig+0x5c4>)
 80058e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2200      	movs	r2, #0
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058f8:	f7fb f878 	bl	80009ec <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	020b      	lsls	r3, r1, #8
 800590e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005912:	0202      	lsls	r2, r0, #8
 8005914:	6979      	ldr	r1, [r7, #20]
 8005916:	6849      	ldr	r1, [r1, #4]
 8005918:	0849      	lsrs	r1, r1, #1
 800591a:	2000      	movs	r0, #0
 800591c:	460c      	mov	r4, r1
 800591e:	4605      	mov	r5, r0
 8005920:	eb12 0804 	adds.w	r8, r2, r4
 8005924:	eb43 0905 	adc.w	r9, r3, r5
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	469a      	mov	sl, r3
 8005930:	4693      	mov	fp, r2
 8005932:	4652      	mov	r2, sl
 8005934:	465b      	mov	r3, fp
 8005936:	4640      	mov	r0, r8
 8005938:	4649      	mov	r1, r9
 800593a:	f7fb f857 	bl	80009ec <__aeabi_uldivmod>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4613      	mov	r3, r2
 8005944:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800594c:	d308      	bcc.n	8005960 <UART_SetConfig+0x430>
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005954:	d204      	bcs.n	8005960 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6a3a      	ldr	r2, [r7, #32]
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	e0ce      	b.n	8005afe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005966:	e0ca      	b.n	8005afe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	d166      	bne.n	8005a40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005972:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005976:	2b08      	cmp	r3, #8
 8005978:	d827      	bhi.n	80059ca <UART_SetConfig+0x49a>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0x450>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059b5 	.word	0x080059b5
 800598c:	080059cb 	.word	0x080059cb
 8005990:	080059bb 	.word	0x080059bb
 8005994:	080059cb 	.word	0x080059cb
 8005998:	080059cb 	.word	0x080059cb
 800599c:	080059cb 	.word	0x080059cb
 80059a0:	080059c3 	.word	0x080059c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a4:	f7fe ff6e 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80059a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059aa:	e014      	b.n	80059d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ac:	f7fe ff80 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 80059b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059b2:	e010      	b.n	80059d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b4:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <UART_SetConfig+0x5c0>)
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059b8:	e00d      	b.n	80059d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ba:	f7fe fecb 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 80059be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059c0:	e009      	b.n	80059d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059c8:	e005      	b.n	80059d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8090 	beq.w	8005afe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	4a44      	ldr	r2, [pc, #272]	; (8005af4 <UART_SetConfig+0x5c4>)
 80059e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f0:	005a      	lsls	r2, r3, #1
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	441a      	add	r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2b0f      	cmp	r3, #15
 8005a08:	d916      	bls.n	8005a38 <UART_SetConfig+0x508>
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a10:	d212      	bcs.n	8005a38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f023 030f 	bic.w	r3, r3, #15
 8005a1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	8bfb      	ldrh	r3, [r7, #30]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	8bfa      	ldrh	r2, [r7, #30]
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	e062      	b.n	8005afe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a3e:	e05e      	b.n	8005afe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d828      	bhi.n	8005a9a <UART_SetConfig+0x56a>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x520>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	08005a9b 	.word	0x08005a9b
 8005a60:	08005a8b 	.word	0x08005a8b
 8005a64:	08005a9b 	.word	0x08005a9b
 8005a68:	08005a9b 	.word	0x08005a9b
 8005a6c:	08005a9b 	.word	0x08005a9b
 8005a70:	08005a93 	.word	0x08005a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe ff06 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8005a78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a7a:	e014      	b.n	8005aa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a7c:	f7fe ff18 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8005a80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a82:	e010      	b.n	8005aa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a84:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <UART_SetConfig+0x5c0>)
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a88:	e00d      	b.n	8005aa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8a:	f7fe fe63 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8005a8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a90:	e009      	b.n	8005aa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a98:	e005      	b.n	8005aa6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005aa4:	bf00      	nop
    }

    if (pclk != 0U)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d028      	beq.n	8005afe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	4a10      	ldr	r2, [pc, #64]	; (8005af4 <UART_SetConfig+0x5c4>)
 8005ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	fbb3 f2f2 	udiv	r2, r3, r2
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	441a      	add	r2, r3
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ace:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	2b0f      	cmp	r3, #15
 8005ad4:	d910      	bls.n	8005af8 <UART_SetConfig+0x5c8>
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d20c      	bcs.n	8005af8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
 8005ae8:	e009      	b.n	8005afe <UART_SetConfig+0x5ce>
 8005aea:	bf00      	nop
 8005aec:	40008000 	.word	0x40008000
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	080066c8 	.word	0x080066c8
      }
      else
      {
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2200      	movs	r2, #0
 8005b18:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3730      	adds	r7, #48	; 0x30
 8005b22:	46bd      	mov	sp, r7
 8005b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c26:	d10a      	bne.n	8005c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c7c:	f7fb fe28 	bl	80018d0 <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d10e      	bne.n	8005cae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f82f 	bl	8005d02 <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e025      	b.n	8005cfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d10e      	bne.n	8005cda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f819 	bl	8005d02 <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e00f      	b.n	8005cfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b09c      	sub	sp, #112	; 0x70
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d12:	e0a9      	b.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	f000 80a5 	beq.w	8005e68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fb fdd7 	bl	80018d0 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d140      	bne.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d48:	667b      	str	r3, [r7, #100]	; 0x64
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e6      	bne.n	8005d34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3308      	adds	r3, #8
 8005d84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d86:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e5      	bne.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e069      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d051      	beq.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd2:	d149      	bne.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ddc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e6      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3308      	adds	r3, #8
 8005e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e30:	623a      	str	r2, [r7, #32]
 8005e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	69f9      	ldr	r1, [r7, #28]
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e5      	bne.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e010      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4013      	ands	r3, r2
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	f43f af46 	beq.w	8005d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3770      	adds	r7, #112	; 0x70
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e027      	b.n	8005ef8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ed6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e02d      	b.n	8005f78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f84f 	bl	8005ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e02d      	b.n	8005ff4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2224      	movs	r2, #36	; 0x24
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f811 	bl	8005ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006008:	2b00      	cmp	r3, #0
 800600a:	d108      	bne.n	800601e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800601c:	e031      	b.n	8006082 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800601e:	2308      	movs	r3, #8
 8006020:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006022:	2308      	movs	r3, #8
 8006024:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	0e5b      	lsrs	r3, r3, #25
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	0f5b      	lsrs	r3, r3, #29
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	7b3a      	ldrb	r2, [r7, #12]
 800604a:	4911      	ldr	r1, [pc, #68]	; (8006090 <UARTEx_SetNbDataToProcess+0x94>)
 800604c:	5c8a      	ldrb	r2, [r1, r2]
 800604e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006052:	7b3a      	ldrb	r2, [r7, #12]
 8006054:	490f      	ldr	r1, [pc, #60]	; (8006094 <UARTEx_SetNbDataToProcess+0x98>)
 8006056:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006058:	fb93 f3f2 	sdiv	r3, r3, r2
 800605c:	b29a      	uxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	7b7a      	ldrb	r2, [r7, #13]
 8006068:	4909      	ldr	r1, [pc, #36]	; (8006090 <UARTEx_SetNbDataToProcess+0x94>)
 800606a:	5c8a      	ldrb	r2, [r1, r2]
 800606c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006070:	7b7a      	ldrb	r2, [r7, #13]
 8006072:	4908      	ldr	r1, [pc, #32]	; (8006094 <UARTEx_SetNbDataToProcess+0x98>)
 8006074:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006076:	fb93 f3f2 	sdiv	r3, r3, r2
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	080066e0 	.word	0x080066e0
 8006094:	080066e8 	.word	0x080066e8

08006098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006098:	b084      	sub	sp, #16
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	f107 001c 	add.w	r0, r7, #28
 80060a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa6c 	bl	8006594 <USB_CoreReset>
 80060bc:	4603      	mov	r3, r0
 80060be:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80060c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
 80060d2:	e005      	b.n	80060e0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060ec:	b004      	add	sp, #16
 80060ee:	4770      	bx	lr

080060f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f023 0201 	bic.w	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d115      	bne.n	8006160 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006140:	2001      	movs	r0, #1
 8006142:	f7fb fbd1 	bl	80018e8 <HAL_Delay>
      ms++;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3301      	adds	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fa13 	bl	8006578 <USB_GetMode>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d01e      	beq.n	8006196 <USB_SetCurrentMode+0x84>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b31      	cmp	r3, #49	; 0x31
 800615c:	d9f0      	bls.n	8006140 <USB_SetCurrentMode+0x2e>
 800615e:	e01a      	b.n	8006196 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d115      	bne.n	8006192 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006172:	2001      	movs	r0, #1
 8006174:	f7fb fbb8 	bl	80018e8 <HAL_Delay>
      ms++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9fa 	bl	8006578 <USB_GetMode>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <USB_SetCurrentMode+0x84>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b31      	cmp	r3, #49	; 0x31
 800618e:	d9f0      	bls.n	8006172 <USB_SetCurrentMode+0x60>
 8006190:	e001      	b.n	8006196 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e005      	b.n	80061a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b32      	cmp	r3, #50	; 0x32
 800619a:	d101      	bne.n	80061a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061ac:	b084      	sub	sp, #16
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	e009      	b.n	80061e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	3340      	adds	r3, #64	; 0x40
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3301      	adds	r3, #1
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b0e      	cmp	r3, #14
 80061e4:	d9f2      	bls.n	80061cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11c      	bne.n	8006226 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fa:	f043 0302 	orr.w	r3, r3, #2
 80061fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e005      	b.n	8006232 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006238:	461a      	mov	r2, r3
 800623a:	2300      	movs	r3, #0
 800623c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006244:	4619      	mov	r1, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624c:	461a      	mov	r2, r3
 800624e:	680b      	ldr	r3, [r1, #0]
 8006250:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006252:	2103      	movs	r1, #3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f955 	bl	8006504 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800625a:	2110      	movs	r1, #16
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f8f1 	bl	8006444 <USB_FlushTxFifo>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f91b 	bl	80064a8 <USB_FlushRxFifo>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006282:	461a      	mov	r2, r3
 8006284:	2300      	movs	r3, #0
 8006286:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	461a      	mov	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629a:	461a      	mov	r2, r3
 800629c:	2300      	movs	r3, #0
 800629e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a0:	2300      	movs	r3, #0
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	e043      	b.n	800632e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062bc:	d118      	bne.n	80062f0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	461a      	mov	r2, r3
 80062d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	e013      	b.n	8006302 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e6:	461a      	mov	r2, r3
 80062e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	e008      	b.n	8006302 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630e:	461a      	mov	r2, r3
 8006310:	2300      	movs	r3, #0
 8006312:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	461a      	mov	r2, r3
 8006322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006326:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	3301      	adds	r3, #1
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	429a      	cmp	r2, r3
 8006334:	d3b7      	bcc.n	80062a6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	e043      	b.n	80063c4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800634e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006352:	d118      	bne.n	8006386 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006366:	461a      	mov	r2, r3
 8006368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e013      	b.n	8006398 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	461a      	mov	r2, r3
 800637e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	e008      	b.n	8006398 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006392:	461a      	mov	r2, r3
 8006394:	2300      	movs	r3, #0
 8006396:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	461a      	mov	r2, r3
 80063a6:	2300      	movs	r3, #0
 80063a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3301      	adds	r3, #1
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d3b7      	bcc.n	800633c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f043 0210 	orr.w	r2, r3, #16
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <USB_DevInit+0x294>)
 8006400:	4313      	orrs	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f043 0208 	orr.w	r2, r3, #8
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d107      	bne.n	800642e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006426:	f043 0304 	orr.w	r3, r3, #4
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800643a:	b004      	add	sp, #16
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	803c3800 	.word	0x803c3800

08006444 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	4a12      	ldr	r2, [pc, #72]	; (80064a4 <USB_FlushTxFifo+0x60>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d901      	bls.n	8006462 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e01a      	b.n	8006498 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	daf3      	bge.n	8006452 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	019b      	lsls	r3, r3, #6
 8006472:	f043 0220 	orr.w	r2, r3, #32
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3301      	adds	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <USB_FlushTxFifo+0x60>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e006      	b.n	8006498 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b20      	cmp	r3, #32
 8006494:	d0f1      	beq.n	800647a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	00030d40 	.word	0x00030d40

080064a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	4a11      	ldr	r2, [pc, #68]	; (8006500 <USB_FlushRxFifo+0x58>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d901      	bls.n	80064c4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e017      	b.n	80064f4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	daf3      	bge.n	80064b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2210      	movs	r2, #16
 80064d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	4a08      	ldr	r2, [pc, #32]	; (8006500 <USB_FlushRxFifo+0x58>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e006      	b.n	80064f4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b10      	cmp	r3, #16
 80064f0:	d0f1      	beq.n	80064d6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	00030d40 	.word	0x00030d40

08006504 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	68f9      	ldr	r1, [r7, #12]
 8006520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006524:	4313      	orrs	r3, r2
 8006526:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006550:	f023 0303 	bic.w	r3, r3, #3
 8006554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006564:	f043 0302 	orr.w	r3, r3, #2
 8006568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	f003 0301 	and.w	r3, r3, #1
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	4a13      	ldr	r2, [pc, #76]	; (80065f4 <USB_CoreReset+0x60>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d901      	bls.n	80065b0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e01a      	b.n	80065e6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	daf3      	bge.n	80065a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f043 0201 	orr.w	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3301      	adds	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <USB_CoreReset+0x60>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e006      	b.n	80065e6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d0f1      	beq.n	80065c8 <USB_CoreReset+0x34>

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	00030d40 	.word	0x00030d40

080065f8 <__libc_init_array>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	4d0d      	ldr	r5, [pc, #52]	; (8006630 <__libc_init_array+0x38>)
 80065fc:	4c0d      	ldr	r4, [pc, #52]	; (8006634 <__libc_init_array+0x3c>)
 80065fe:	1b64      	subs	r4, r4, r5
 8006600:	10a4      	asrs	r4, r4, #2
 8006602:	2600      	movs	r6, #0
 8006604:	42a6      	cmp	r6, r4
 8006606:	d109      	bne.n	800661c <__libc_init_array+0x24>
 8006608:	4d0b      	ldr	r5, [pc, #44]	; (8006638 <__libc_init_array+0x40>)
 800660a:	4c0c      	ldr	r4, [pc, #48]	; (800663c <__libc_init_array+0x44>)
 800660c:	f000 f820 	bl	8006650 <_init>
 8006610:	1b64      	subs	r4, r4, r5
 8006612:	10a4      	asrs	r4, r4, #2
 8006614:	2600      	movs	r6, #0
 8006616:	42a6      	cmp	r6, r4
 8006618:	d105      	bne.n	8006626 <__libc_init_array+0x2e>
 800661a:	bd70      	pop	{r4, r5, r6, pc}
 800661c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006620:	4798      	blx	r3
 8006622:	3601      	adds	r6, #1
 8006624:	e7ee      	b.n	8006604 <__libc_init_array+0xc>
 8006626:	f855 3b04 	ldr.w	r3, [r5], #4
 800662a:	4798      	blx	r3
 800662c:	3601      	adds	r6, #1
 800662e:	e7f2      	b.n	8006616 <__libc_init_array+0x1e>
 8006630:	080066f8 	.word	0x080066f8
 8006634:	080066f8 	.word	0x080066f8
 8006638:	080066f8 	.word	0x080066f8
 800663c:	080066fc 	.word	0x080066fc

08006640 <memset>:
 8006640:	4402      	add	r2, r0
 8006642:	4603      	mov	r3, r0
 8006644:	4293      	cmp	r3, r2
 8006646:	d100      	bne.n	800664a <memset+0xa>
 8006648:	4770      	bx	lr
 800664a:	f803 1b01 	strb.w	r1, [r3], #1
 800664e:	e7f9      	b.n	8006644 <memset+0x4>

08006650 <_init>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr

0800665c <_fini>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr
