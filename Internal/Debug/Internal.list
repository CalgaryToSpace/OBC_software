
Internal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080068cc  080068cc  000168cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006964  08006964  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800696c  0800696c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  2000000c  08006980  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08006980  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d52  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a5  00000000  00000000  00033d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00036338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00037290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aefe  00000000  00000000  00038110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cb7  00000000  00000000  0006300e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ddbd  00000000  00000000  00074cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182a82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004298  00000000  00000000  00182ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080068b4 	.word	0x080068b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080068b4 	.word	0x080068b4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2iz>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d215      	bcs.n	80009e2 <__aeabi_d2iz+0x36>
 80009b6:	d511      	bpl.n	80009dc <__aeabi_d2iz+0x30>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d912      	bls.n	80009e8 <__aeabi_d2iz+0x3c>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d2:	fa23 f002 	lsr.w	r0, r3, r2
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d105      	bne.n	80009f4 <__aeabi_d2iz+0x48>
 80009e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b974 	b.w	8000cfc <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	4604      	mov	r4, r0
 8000a34:	468e      	mov	lr, r1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d14d      	bne.n	8000ad6 <__udivmoddi4+0xaa>
 8000a3a:	428a      	cmp	r2, r1
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	d969      	bls.n	8000b14 <__udivmoddi4+0xe8>
 8000a40:	fab2 f282 	clz	r2, r2
 8000a44:	b152      	cbz	r2, 8000a5c <__udivmoddi4+0x30>
 8000a46:	fa01 f302 	lsl.w	r3, r1, r2
 8000a4a:	f1c2 0120 	rsb	r1, r2, #32
 8000a4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a56:	ea41 0e03 	orr.w	lr, r1, r3
 8000a5a:	4094      	lsls	r4, r2
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	0c21      	lsrs	r1, r4, #16
 8000a62:	fbbe f6f8 	udiv	r6, lr, r8
 8000a66:	fa1f f78c 	uxth.w	r7, ip
 8000a6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a72:	fb06 f107 	mul.w	r1, r6, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x64>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a82:	f080 811f 	bcs.w	8000cc4 <__udivmoddi4+0x298>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 811c 	bls.w	8000cc4 <__udivmoddi4+0x298>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a98:	fb08 3310 	mls	r3, r8, r0, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb00 f707 	mul.w	r7, r0, r7
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x92>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab0:	f080 810a 	bcs.w	8000cc8 <__udivmoddi4+0x29c>
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	f240 8107 	bls.w	8000cc8 <__udivmoddi4+0x29c>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	1be4      	subs	r4, r4, r7
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	b11d      	cbz	r5, 8000ad0 <__udivmoddi4+0xa4>
 8000ac8:	40d4      	lsrs	r4, r2
 8000aca:	2300      	movs	r3, #0
 8000acc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0xc2>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	f000 80ef 	beq.w	8000cbe <__udivmoddi4+0x292>
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	fab3 f683 	clz	r6, r3
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d14a      	bne.n	8000b8c <__udivmoddi4+0x160>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xd4>
 8000afa:	4282      	cmp	r2, r0
 8000afc:	f200 80f9 	bhi.w	8000cf2 <__udivmoddi4+0x2c6>
 8000b00:	1a84      	subs	r4, r0, r2
 8000b02:	eb61 0303 	sbc.w	r3, r1, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	469e      	mov	lr, r3
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d0e0      	beq.n	8000ad0 <__udivmoddi4+0xa4>
 8000b0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b12:	e7dd      	b.n	8000ad0 <__udivmoddi4+0xa4>
 8000b14:	b902      	cbnz	r2, 8000b18 <__udivmoddi4+0xec>
 8000b16:	deff      	udf	#255	; 0xff
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	f040 8092 	bne.w	8000c46 <__udivmoddi4+0x21a>
 8000b22:	eba1 010c 	sub.w	r1, r1, ip
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2601      	movs	r6, #1
 8000b30:	0c20      	lsrs	r0, r4, #16
 8000b32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b36:	fb07 1113 	mls	r1, r7, r3, r1
 8000b3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b3e:	fb0e f003 	mul.w	r0, lr, r3
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x12c>
 8000b46:	eb1c 0101 	adds.w	r1, ip, r1
 8000b4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x12a>
 8000b50:	4288      	cmp	r0, r1
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2c0>
 8000b56:	4643      	mov	r3, r8
 8000b58:	1a09      	subs	r1, r1, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b60:	fb07 1110 	mls	r1, r7, r0, r1
 8000b64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x156>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x154>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2ca>
 8000b80:	4608      	mov	r0, r1
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b8a:	e79c      	b.n	8000ac6 <__udivmoddi4+0x9a>
 8000b8c:	f1c6 0720 	rsb	r7, r6, #32
 8000b90:	40b3      	lsls	r3, r6
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ba2:	431c      	orrs	r4, r3
 8000ba4:	40f9      	lsrs	r1, r7
 8000ba6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000baa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bb2:	0c20      	lsrs	r0, r4, #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bc4:	4288      	cmp	r0, r1
 8000bc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b8>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2bc>
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2bc>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1a09      	subs	r1, r1, r0
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bec:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf8:	458e      	cmp	lr, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1e2>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2b4>
 8000c06:	458e      	cmp	lr, r1
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2b4>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c12:	fba0 9402 	umull	r9, r4, r0, r2
 8000c16:	eba1 010e 	sub.w	r1, r1, lr
 8000c1a:	42a1      	cmp	r1, r4
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46a6      	mov	lr, r4
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x2a4>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x2a0>
 8000c24:	b15d      	cbz	r5, 8000c3e <__udivmoddi4+0x212>
 8000c26:	ebb3 0208 	subs.w	r2, r3, r8
 8000c2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c32:	fa22 f306 	lsr.w	r3, r2, r6
 8000c36:	40f1      	lsrs	r1, r6
 8000c38:	431f      	orrs	r7, r3
 8000c3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c3e:	2600      	movs	r6, #0
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	40d8      	lsrs	r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	fa21 f303 	lsr.w	r3, r1, r3
 8000c54:	4091      	lsls	r1, r2
 8000c56:	4301      	orrs	r1, r0
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c64:	fb07 3610 	mls	r6, r7, r0, r3
 8000c68:	0c0b      	lsrs	r3, r1, #16
 8000c6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c72:	429e      	cmp	r6, r3
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x260>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b8>
 8000c84:	429e      	cmp	r6, r3
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b8>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	b289      	uxth	r1, r1
 8000c90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c94:	fb07 3316 	mls	r3, r7, r6, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x28a>
 8000ca4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2b0>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2b0>
 8000cb2:	3e02      	subs	r6, #2
 8000cb4:	4461      	add	r1, ip
 8000cb6:	1ac9      	subs	r1, r1, r3
 8000cb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0x104>
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e705      	b.n	8000ad0 <__udivmoddi4+0xa4>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e3      	b.n	8000a90 <__udivmoddi4+0x64>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6f8      	b.n	8000abe <__udivmoddi4+0x92>
 8000ccc:	454b      	cmp	r3, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f8>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f8>
 8000cdc:	4646      	mov	r6, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x28a>
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1e2>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x260>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b8>
 8000cec:	3b02      	subs	r3, #2
 8000cee:	4461      	add	r1, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x12c>
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	e709      	b.n	8000b0a <__udivmoddi4+0xde>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x156>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d06:	f000 fd8e 	bl	8001826 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d0a:	f000 f88b 	bl	8000e24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d0e:	f000 fa77 	bl	8001200 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000d12:	f000 f963 	bl	8000fdc <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init();
 8000d16:	f000 f9fd 	bl	8001114 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000d1a:	f000 fa47 	bl	80011ac <MX_USB_OTG_FS_PCD_Init>
	MX_USART1_UART_Init();
 8000d1e:	f000 f9ab 	bl	8001078 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8000d22:	f000 f8d3 	bl	8000ecc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc1);
 8000d26:	483a      	ldr	r0, [pc, #232]	; (8000e10 <main+0x110>)
 8000d28:	f001 fa62 	bl	80021f0 <HAL_ADC_Start>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		char newLine[2] = "\n";
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	80bb      	strh	r3, [r7, #4]

		HAL_ADC_Start(&hadc1);
 8000d30:	4837      	ldr	r0, [pc, #220]	; (8000e10 <main+0x110>)
 8000d32:	f001 fa5d 	bl	80021f0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d3a:	4835      	ldr	r0, [pc, #212]	; (8000e10 <main+0x110>)
 8000d3c:	f001 faee 	bl	800231c <HAL_ADC_PollForConversion>
		uint16_t readValue = HAL_ADC_GetValue(&hadc1);
 8000d40:	4833      	ldr	r0, [pc, #204]	; (8000e10 <main+0x110>)
 8000d42:	f001 fb7a 	bl	800243a <HAL_ADC_GetValue>
 8000d46:	4603      	mov	r3, r0
 8000d48:	81fb      	strh	r3, [r7, #14]
		temperature = (float) __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(Avg_Slope,
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fbb1 	bl	80004b4 <__aeabi_i2d>
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <main+0x114>)
 8000d58:	f7ff fc16 	bl	8000588 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	a328      	add	r3, pc, #160	; (adr r3, 8000e08 <main+0x108>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	f7ff fd37 	bl	80007dc <__aeabi_ddiv>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	4610      	mov	r0, r2
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 0200 	mov.w	r2, #0
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <main+0x118>)
 8000d7c:	f7ff fc04 	bl	8000588 <__aeabi_dmul>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f7ff fe10 	bl	80009ac <__aeabi_d2iz>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8000d92:	0fda      	lsrs	r2, r3, #31
 8000d94:	4413      	add	r3, r2
 8000d96:	105b      	asrs	r3, r3, #1
 8000d98:	331e      	adds	r3, #30
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <main+0x11c>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
				v30, vtemp, vrefplus, readValue, LL_ADC_RESOLUTION_12B);

		HAL_ADC_Stop(&hadc1);
 8000da8:	4819      	ldr	r0, [pc, #100]	; (8000e10 <main+0x110>)
 8000daa:	f001 fa84 	bl	80022b6 <HAL_ADC_Stop>

		uint8_t tempBuf[3];
		int temp = (int) temperature;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <main+0x11c>)
 8000db0:	edd3 7a00 	vldr	s15, [r3]
 8000db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db8:	ee17 3a90 	vmov	r3, s15
 8000dbc:	60bb      	str	r3, [r7, #8]
		itoa(temp, tempBuf, 10);
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f005 fd29 	bl	800681c <itoa>
		HAL_UART_Transmit(&hlpuart1, tempBuf, strlen((char*) tempBuf),
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fa17 	bl	8000200 <strlen>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4639      	mov	r1, r7
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <main+0x120>)
 8000dde:	f004 fbdf 	bl	80055a0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		// Print new line for clarity
		HAL_UART_Transmit(&hlpuart1, newLine, strlen((char*) newLine),
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fa0b 	bl	8000200 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	1d39      	adds	r1, r7, #4
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <main+0x120>)
 8000df6:	f004 fbd3 	bl	80055a0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		HAL_Delay(700);
 8000dfa:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000dfe:	f000 fd87 	bl	8001910 <HAL_Delay>
	while (1) {
 8000e02:	e793      	b.n	8000d2c <main+0x2c>
 8000e04:	f3af 8000 	nop.w
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40affe00 	.word	0x40affe00
 8000e10:	20000028 	.word	0x20000028
 8000e14:	400c0000 	.word	0x400c0000
 8000e18:	408f4000 	.word	0x408f4000
 8000e1c:	2000074c 	.word	0x2000074c
 8000e20:	20000090 	.word	0x20000090

08000e24 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b096      	sub	sp, #88	; 0x58
 8000e28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	2244      	movs	r2, #68	; 0x44
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 fcf4 	bl	8006820 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e46:	2000      	movs	r0, #0
 8000e48:	f002 fea6 	bl	8003b98 <HAL_PWREx_ControlVoltageScaling>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x32>
			!= HAL_OK) {
		Error_Handler();
 8000e52:	f000 fa79 	bl	8001348 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000e56:	2322      	movs	r3, #34	; 0x22
 8000e58:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 8000e74:	231e      	movs	r3, #30
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 ff49 	bl	8003d20 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x74>
		Error_Handler();
 8000e94:	f000 fa58 	bl	8001348 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fb4e 	bl	8004554 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x9e>
		Error_Handler();
 8000ebe:	f000 fa43 	bl	8001348 <Error_Handler>
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	3758      	adds	r7, #88	; 0x58
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = { 0 };
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000ef4:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000ef6:	4a36      	ldr	r2, [pc, #216]	; (8000fd0 <MX_ADC1_Init+0x104>)
 8000ef8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f12:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000f54:	481d      	ldr	r0, [pc, #116]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f56:	f000 ffff 	bl	8001f58 <HAL_ADC_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0x98>
		Error_Handler();
 8000f60:	f000 f9f2 	bl	8001348 <Error_Handler>
	}

	/** Configure Analog WatchDog 1
	 */
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_ADC1_Init+0x108>)
 8000f66:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000f68:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000f6c:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_ADC1_Init+0x10c>)
 8000f70:	623b      	str	r3, [r7, #32]
	AnalogWDGConfig.ITMode = DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	AnalogWDGConfig.HighThreshold = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	AnalogWDGConfig.LowThreshold = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK) {
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4811      	ldr	r0, [pc, #68]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000f88:	f001 fe60 	bl	8002c4c <HAL_ADC_AnalogWDGConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0xca>
		Error_Handler();
 8000f92:	f000 f9d9 	bl	8001348 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_ADC1_Init+0x10c>)
 8000f98:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fa2:	237f      	movs	r3, #127	; 0x7f
 8000fa4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <MX_ADC1_Init+0x100>)
 8000fb4:	f001 fa4e 	bl	8002454 <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC1_Init+0xf6>
		Error_Handler();
 8000fbe:	f000 f9c3 	bl	8001348 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	; 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000028 	.word	0x20000028
 8000fd0:	50040000 	.word	0x50040000
 8000fd4:	7dc00000 	.word	0x7dc00000
 8000fd8:	c7520000 	.word	0xc7520000

08000fdc <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8000fe2:	4a23      	ldr	r2, [pc, #140]	; (8001070 <MX_LPUART1_UART_Init+0x94>)
 8000fe4:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <MX_LPUART1_UART_Init+0x98>)
 8000fea:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8001000:	220c      	movs	r2, #12
 8001002:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001022:	4812      	ldr	r0, [pc, #72]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8001024:	f004 fa6c 	bl	8005500 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_LPUART1_UART_Init+0x56>
		Error_Handler();
 800102e:	f000 f98b 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8001032:	2100      	movs	r1, #0
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8001036:	f005 f835 	bl	80060a4 <HAL_UARTEx_SetTxFifoThreshold>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_LPUART1_UART_Init+0x68>
			!= HAL_OK) {
		Error_Handler();
 8001040:	f000 f982 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8001044:	2100      	movs	r1, #0
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8001048:	f005 f86a 	bl	8006120 <HAL_UARTEx_SetRxFifoThreshold>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_LPUART1_UART_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 8001052:	f000 f979 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_LPUART1_UART_Init+0x90>)
 8001058:	f004 ffeb 	bl	8006032 <HAL_UARTEx_DisableFifoMode>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_LPUART1_UART_Init+0x8a>
		Error_Handler();
 8001062:	f000 f971 	bl	8001348 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000090 	.word	0x20000090
 8001070:	40008000 	.word	0x40008000
 8001074:	00033324 	.word	0x00033324

08001078 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_USART1_UART_Init+0x90>)
 800107e:	4a23      	ldr	r2, [pc, #140]	; (800110c <MX_USART1_UART_Init+0x94>)
 8001080:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 209700;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_USART1_UART_Init+0x90>)
 8001084:	4a22      	ldr	r2, [pc, #136]	; (8001110 <MX_USART1_UART_Init+0x98>)
 8001086:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_USART1_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_USART1_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_USART1_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_USART1_UART_Init+0x90>)
 800109c:	220c      	movs	r2, #12
 800109e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010c0:	f004 fa1e 	bl	8005500 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART1_UART_Init+0x56>
		Error_Handler();
 80010ca:	f000 f93d 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80010ce:	2100      	movs	r1, #0
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010d2:	f004 ffe7 	bl	80060a4 <HAL_UARTEx_SetTxFifoThreshold>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART1_UART_Init+0x68>
			!= HAL_OK) {
		Error_Handler();
 80010dc:	f000 f934 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010e4:	f005 f81c 	bl	8006120 <HAL_UARTEx_SetRxFifoThreshold>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 80010ee:	f000 f92b 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART1_UART_Init+0x90>)
 80010f4:	f004 ff9d 	bl	8006032 <HAL_UARTEx_DisableFifoMode>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART1_UART_Init+0x8a>
		Error_Handler();
 80010fe:	f000 f923 	bl	8001348 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000120 	.word	0x20000120
 800110c:	40013800 	.word	0x40013800
 8001110:	00033324 	.word	0x00033324

08001114 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <MX_USART3_UART_Init+0x94>)
 800111c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800115e:	f004 f9cf 	bl	8005500 <HAL_UART_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8001168:	f000 f8ee 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 800116c:	2100      	movs	r1, #0
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001170:	f004 ff98 	bl	80060a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800117a:	f000 f8e5 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800117e:	2100      	movs	r1, #0
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001182:	f004 ffcd 	bl	8006120 <HAL_UARTEx_SetRxFifoThreshold>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800118c:	f000 f8dc 	bl	8001348 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001192:	f004 ff4e 	bl	8006032 <HAL_UARTEx_DisableFifoMode>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 800119c:	f000 f8d4 	bl	8001348 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200001b0 	.word	0x200001b0
 80011a8:	40004800 	.word	0x40004800

080011ac <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011b6:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011ba:	2206      	movs	r2, #6
 80011bc:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011d8:	2201      	movs	r2, #1
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80011ea:	f002 fb6d 	bl	80038c8 <HAL_PCD_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USB_OTG_FS_PCD_Init+0x4c>
		Error_Handler();
 80011f4:	f000 f8a8 	bl	8001348 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000240 	.word	0x20000240

08001200 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b48      	ldr	r3, [pc, #288]	; (8001338 <MX_GPIO_Init+0x138>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a47      	ldr	r2, [pc, #284]	; (8001338 <MX_GPIO_Init+0x138>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <MX_GPIO_Init+0x138>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <MX_GPIO_Init+0x138>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a41      	ldr	r2, [pc, #260]	; (8001338 <MX_GPIO_Init+0x138>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <MX_GPIO_Init+0x138>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <MX_GPIO_Init+0x138>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a3b      	ldr	r2, [pc, #236]	; (8001338 <MX_GPIO_Init+0x138>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b39      	ldr	r3, [pc, #228]	; (8001338 <MX_GPIO_Init+0x138>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <MX_GPIO_Init+0x138>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a35      	ldr	r2, [pc, #212]	; (8001338 <MX_GPIO_Init+0x138>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b33      	ldr	r3, [pc, #204]	; (8001338 <MX_GPIO_Init+0x138>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <MX_GPIO_Init+0x138>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <MX_GPIO_Init+0x138>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <MX_GPIO_Init+0x138>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <MX_GPIO_Init+0x138>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a29      	ldr	r2, [pc, #164]	; (8001338 <MX_GPIO_Init+0x138>)
 8001294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <MX_GPIO_Init+0x138>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_EnableVddIO2();
 80012a6:	f002 fd2b 	bl	8003d00 <HAL_PWREx_EnableVddIO2>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80012b0:	4822      	ldr	r0, [pc, #136]	; (800133c <MX_GPIO_Init+0x13c>)
 80012b2:	f002 faf1 	bl	8003898 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80012b6:	2200      	movs	r2, #0
 80012b8:	2120      	movs	r1, #32
 80012ba:	4821      	ldr	r0, [pc, #132]	; (8001340 <MX_GPIO_Init+0x140>)
 80012bc:	f002 faec 	bl	8003898 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	481b      	ldr	r0, [pc, #108]	; (8001344 <MX_GPIO_Init+0x144>)
 80012d8:	f002 f94c 	bl	8003574 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80012dc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80012e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <MX_GPIO_Init+0x13c>)
 80012f6:	f002 f93d 	bl	8003574 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012fa:	2320      	movs	r3, #32
 80012fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <MX_GPIO_Init+0x140>)
 8001312:	f002 f92f 	bl	8003574 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001316:	2340      	movs	r3, #64	; 0x40
 8001318:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_GPIO_Init+0x140>)
 800132a:	f002 f923 	bl	8003574 <HAL_GPIO_Init>

}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400
 8001340:	48001800 	.word	0x48001800
 8001344:	48000800 	.word	0x48000800

08001348 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_MspInit+0x44>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_MspInit+0x44>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6613      	str	r3, [r2, #96]	; 0x60
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_MspInit+0x44>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x44>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x44>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6593      	str	r3, [r2, #88]	; 0x58
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x44>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ae      	sub	sp, #184	; 0xb8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	2294      	movs	r2, #148	; 0x94
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fa2f 	bl	8006820 <memset>
  if(hadc->Instance==ADC1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_ADC_MspInit+0xc8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d147      	bne.n	800145c <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80013da:	2302      	movs	r3, #2
 80013dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80013e2:	230c      	movs	r3, #12
 80013e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fb67 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001408:	f7ff ff9e 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_ADC_MspInit+0xcc>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_ADC_MspInit+0xcc>)
 8001412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_ADC_MspInit+0xcc>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_ADC_MspInit+0xcc>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_ADC_MspInit+0xcc>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_ADC_MspInit+0xcc>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800143c:	230c      	movs	r3, #12
 800143e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001442:	230b      	movs	r3, #11
 8001444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001458:	f002 f88c 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	37b8      	adds	r7, #184	; 0xb8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	50040000 	.word	0x50040000
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0b2      	sub	sp, #200	; 0xc8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	2294      	movs	r2, #148	; 0x94
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f005 f9c7 	bl	8006820 <memset>
  if(huart->Instance==LPUART1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a65      	ldr	r2, [pc, #404]	; (800162c <HAL_UART_MspInit+0x1c0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d13e      	bne.n	800151a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800149c:	2320      	movs	r3, #32
 800149e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fb11 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b4:	f7ff ff48 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014b8:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	4a5c      	ldr	r2, [pc, #368]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80014c4:	4b5a      	ldr	r3, [pc, #360]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d0:	4b57      	ldr	r3, [pc, #348]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	4a56      	ldr	r2, [pc, #344]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80014d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014dc:	4b54      	ldr	r3, [pc, #336]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80014e8:	f002 fc0a 	bl	8003d00 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80014ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001506:	2308      	movs	r3, #8
 8001508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001510:	4619      	mov	r1, r3
 8001512:	4848      	ldr	r0, [pc, #288]	; (8001634 <HAL_UART_MspInit+0x1c8>)
 8001514:	f002 f82e 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001518:	e084      	b.n	8001624 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a46      	ldr	r2, [pc, #280]	; (8001638 <HAL_UART_MspInit+0x1cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d13e      	bne.n	80015a2 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001524:	2301      	movs	r3, #1
 8001526:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001528:	2300      	movs	r3, #0
 800152a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4618      	mov	r0, r3
 8001532:	f003 facd 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800153c:	f7ff ff04 	bl	8001348 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001540:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	4a3a      	ldr	r2, [pc, #232]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154a:	6613      	str	r3, [r2, #96]	; 0x60
 800154c:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 800154e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001558:	4b35      	ldr	r3, [pc, #212]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	4a34      	ldr	r2, [pc, #208]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 800155e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001570:	f002 fbc6 	bl	8003d00 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001574:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158e:	2307      	movs	r3, #7
 8001590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001594:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001598:	4619      	mov	r1, r3
 800159a:	4826      	ldr	r0, [pc, #152]	; (8001634 <HAL_UART_MspInit+0x1c8>)
 800159c:	f001 ffea 	bl	8003574 <HAL_GPIO_Init>
}
 80015a0:	e040      	b.n	8001624 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a25      	ldr	r2, [pc, #148]	; (800163c <HAL_UART_MspInit+0x1d0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d13b      	bne.n	8001624 <HAL_UART_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015ac:	2304      	movs	r3, #4
 80015ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fa89 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80015c4:	f7ff fec0 	bl	8001348 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80015ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d2:	6593      	str	r3, [r2, #88]	; 0x58
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_UART_MspInit+0x1c4>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001612:	2307      	movs	r3, #7
 8001614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001618:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800161c:	4619      	mov	r1, r3
 800161e:	4808      	ldr	r0, [pc, #32]	; (8001640 <HAL_UART_MspInit+0x1d4>)
 8001620:	f001 ffa8 	bl	8003574 <HAL_GPIO_Init>
}
 8001624:	bf00      	nop
 8001626:	37c8      	adds	r7, #200	; 0xc8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40008000 	.word	0x40008000
 8001630:	40021000 	.word	0x40021000
 8001634:	48001800 	.word	0x48001800
 8001638:	40013800 	.word	0x40013800
 800163c:	40004800 	.word	0x40004800
 8001640:	48000c00 	.word	0x48000c00

08001644 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0b0      	sub	sp, #192	; 0xc0
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2294      	movs	r2, #148	; 0x94
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f005 f8db 	bl	8006820 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001672:	d16c      	bne.n	800174e <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4618      	mov	r0, r3
 8001686:	f003 fa23 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001690:	f7ff fe5a 	bl	8001348 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_PCD_MspInit+0x114>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <HAL_PCD_MspInit+0x114>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_PCD_MspInit+0x114>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016c6:	230a      	movs	r3, #10
 80016c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f001 ff4d 	bl	8003574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f8:	f001 ff3c 	bl	8003574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_PCD_MspInit+0x114>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <HAL_PCD_MspInit+0x114>)
 8001702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_PCD_MspInit+0x114>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_PCD_MspInit+0x114>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d114      	bne.n	800174a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_PCD_MspInit+0x114>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <HAL_PCD_MspInit+0x114>)
 8001726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_PCD_MspInit+0x114>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001738:	f002 fad2 	bl	8003ce0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_PCD_MspInit+0x114>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <HAL_PCD_MspInit+0x114>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001746:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001748:	e001      	b.n	800174e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800174a:	f002 fac9 	bl	8003ce0 <HAL_PWREx_EnableVddUSB>
}
 800174e:	bf00      	nop
 8001750:	37c0      	adds	r7, #192	; 0xc0
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <NMI_Handler+0x4>

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <MemManage_Handler+0x4>

0800176e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler+0x4>

0800177a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 f892 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d8:	f7ff ffea 	bl	80017b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <LoopForever+0x6>)
  ldr r1, =_edata
 80017de:	490d      	ldr	r1, [pc, #52]	; (8001814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <LoopForever+0xe>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f4:	4c0a      	ldr	r4, [pc, #40]	; (8001820 <LoopForever+0x16>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001802:	f004 ffcf 	bl	80067a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001806:	f7ff fa7b 	bl	8000d00 <main>

0800180a <LoopForever>:

LoopForever:
    b LoopForever
 800180a:	e7fe      	b.n	800180a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800180c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001818:	08006974 	.word	0x08006974
  ldr r2, =_sbss
 800181c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001820:	20000754 	.word	0x20000754

08001824 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC1_IRQHandler>

08001826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f001 fe6b 	bl	800350c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f80e 	bl	8001858 <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	e001      	b.n	800184c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001848:	f7ff fd84 	bl	8001354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800184c:	79fb      	ldrb	r3, [r7, #7]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_InitTick+0x6c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d023      	beq.n	80018b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_InitTick+0x70>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_InitTick+0x6c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fe69 	bl	800355a <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10f      	bne.n	80018ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d809      	bhi.n	80018a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f001 fe41 	bl	8003522 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_InitTick+0x74>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e007      	b.n	80018b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e004      	b.n	80018b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	e001      	b.n	80018b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000750 	.word	0x20000750

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000750 	.word	0x20000750

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008

08001958 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	609a      	str	r2, [r3, #8]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3360      	adds	r3, #96	; 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <LL_ADC_SetOffset+0x44>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4313      	orrs	r3, r2
 80019f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	03fff000 	.word	0x03fff000

08001a08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3360      	adds	r3, #96	; 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3360      	adds	r3, #96	; 0x60
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a5e:	bf00      	nop
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	615a      	str	r2, [r3, #20]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b087      	sub	sp, #28
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3330      	adds	r3, #48	; 0x30
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	4413      	add	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	401a      	ands	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0e9b      	lsrs	r3, r3, #26
 8001aee:	f003 011f 	and.w	r1, r3, #31
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b087      	sub	sp, #28
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3314      	adds	r3, #20
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	0e5b      	lsrs	r3, r3, #25
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	4413      	add	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	0d1b      	lsrs	r3, r3, #20
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2107      	movs	r1, #7
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	0d1b      	lsrs	r3, r3, #20
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	431a      	orrs	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0318 	and.w	r3, r3, #24
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b92:	431a      	orrs	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	0007ffff 	.word	0x0007ffff

08001bac <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	330c      	adds	r3, #12
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	0d1b      	lsrs	r3, r3, #20
 8001bc2:	f003 0103 	and.w	r1, r3, #3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 0201 	and.w	r2, r3, #1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4403      	add	r3, r0
 8001bda:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8001be6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8001bea:	43db      	mvns	r3, r3
 8001bec:	401a      	ands	r2, r3
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b087      	sub	sp, #28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3320      	adds	r3, #32
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0d1b      	lsrs	r3, r3, #20
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	4413      	add	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	0419      	lsls	r1, r3, #16
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	430b      	orrs	r3, r1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8001c3e:	bf00      	nop
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6093      	str	r3, [r2, #8]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c82:	d101      	bne.n	8001c88 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ca6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001caa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cd2:	d101      	bne.n	8001cd8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <LL_ADC_IsEnabled+0x18>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <LL_ADC_IsEnabled+0x1a>
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d101      	bne.n	8001d74 <LL_ADC_IsDisableOngoing+0x18>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <LL_ADC_IsDisableOngoing+0x1a>
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d96:	f043 0204 	orr.w	r2, r3, #4
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d101      	bne.n	8001dea <LL_ADC_REG_IsConversionOngoing+0x18>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d101      	bne.n	8001e38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	605a      	str	r2, [r3, #4]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	605a      	str	r2, [r3, #4]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	605a      	str	r2, [r3, #4]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	605a      	str	r2, [r3, #4]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	605a      	str	r2, [r3, #4]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e12f      	b.n	80021d2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fa0b 	bl	800139c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe68 	bl	8001c6e <LL_ADC_IsDeepPowerDownEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fe4e 	bl	8001c4a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fe83 	bl	8001cbe <LL_ADC_IsInternalRegulatorEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fe67 	bl	8001c96 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fc8:	4b84      	ldr	r3, [pc, #528]	; (80021dc <HAL_ADC_Init+0x284>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	4a84      	ldr	r2, [pc, #528]	; (80021e0 <HAL_ADC_Init+0x288>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fdc:	e002      	b.n	8001fe4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f9      	bne.n	8001fde <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe65 	bl	8001cbe <LL_ADC_IsInternalRegulatorEnabled>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fed9 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8002020:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 80c8 	bne.w	80021c0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 80c4 	bne.w	80021c0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002040:	f043 0202 	orr.w	r2, r3, #2
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fe72 	bl	8001d36 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002058:	4862      	ldr	r0, [pc, #392]	; (80021e4 <HAL_ADC_Init+0x28c>)
 800205a:	f7ff fe6c 	bl	8001d36 <LL_ADC_IsEnabled>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4619      	mov	r1, r3
 800206a:	485f      	ldr	r0, [pc, #380]	; (80021e8 <HAL_ADC_Init+0x290>)
 800206c:	f7ff fc74 	bl	8001958 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7e5b      	ldrb	r3, [r3, #25]
 8002074:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002080:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002086:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	3b01      	subs	r3, #1
 80020a4:	045b      	lsls	r3, r3, #17
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_ADC_Init+0x294>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	430b      	orrs	r3, r1
 80020da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fe76 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 80020e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe97 	bl	8001e20 <LL_ADC_INJ_IsConversionOngoing>
 80020f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d140      	bne.n	800217c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d13d      	bne.n	800217c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7e1b      	ldrb	r3, [r3, #24]
 8002108:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800210a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002112:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002122:	f023 0306 	bic.w	r3, r3, #6
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	430b      	orrs	r3, r1
 800212e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002136:	2b01      	cmp	r3, #1
 8002138:	d118      	bne.n	800216c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800215c:	430a      	orrs	r2, r1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	611a      	str	r2, [r3, #16]
 800216a:	e007      	b.n	800217c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d10c      	bne.n	800219e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f023 010f 	bic.w	r1, r3, #15
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	1e5a      	subs	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
 800219c:	e007      	b.n	80021ae <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 020f 	bic.w	r2, r2, #15
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	659a      	str	r2, [r3, #88]	; 0x58
 80021be:	e007      	b.n	80021d0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	f043 0210 	orr.w	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000000 	.word	0x20000000
 80021e0:	053e2d63 	.word	0x053e2d63
 80021e4:	50040000 	.word	0x50040000
 80021e8:	50040300 	.word	0x50040300
 80021ec:	fff0c007 	.word	0xfff0c007

080021f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fde8 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d14f      	bne.n	80022a8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Start+0x26>
 8002212:	2302      	movs	r3, #2
 8002214:	e04b      	b.n	80022ae <HAL_ADC_Start+0xbe>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 ffdc 	bl	80031dc <ADC_Enable>
 8002224:	4603      	mov	r3, r0
 8002226:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d137      	bne.n	800229e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224e:	d106      	bne.n	800225e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	f023 0206 	bic.w	r2, r3, #6
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	65da      	str	r2, [r3, #92]	; 0x5c
 800225c:	e002      	b.n	8002264 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	221c      	movs	r2, #28
 800226a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800228a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fd73 	bl	8001d82 <LL_ADC_REG_StartConversion>
 800229c:	e006      	b.n	80022ac <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80022a6:	e001      	b.n	80022ac <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
 80022aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_Stop+0x16>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e023      	b.n	8002314 <HAL_ADC_Stop+0x5e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80022d4:	2103      	movs	r1, #3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fec4 	bl	8003064 <ADC_ConversionStop>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d111      	bne.n	800230a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fffe 	bl	80032e8 <ADC_Disable>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d102      	bne.n	8002334 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800232e:	2308      	movs	r3, #8
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e010      	b.n	8002356 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06f      	b.n	8002432 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002352:	2304      	movs	r3, #4
 8002354:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002356:	f7ff facf 	bl	80018f8 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800235c:	e021      	b.n	80023a2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d01d      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002366:	f7ff fac7 	bl	80018f8 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <HAL_ADC_PollForConversion+0x60>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d112      	bne.n	80023a2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10b      	bne.n	80023a2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f043 0204 	orr.w	r2, r3, #4
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e047      	b.n	8002432 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0d6      	beq.n	800235e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fb65 	bl	8001a90 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01c      	beq.n	8002406 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7e5b      	ldrb	r3, [r3, #25]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d118      	bne.n	8002406 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d111      	bne.n	8002406 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d104      	bne.n	800241e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2208      	movs	r2, #8
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e008      	b.n	8002430 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	220c      	movs	r2, #12
 800242e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0b6      	sub	sp, #216	; 0xd8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x22>
 8002472:	2302      	movs	r3, #2
 8002474:	e3d5      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x7ce>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fca5 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 83ba 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d824      	bhi.n	80024e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	3b02      	subs	r3, #2
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d81b      	bhi.n	80024da <HAL_ADC_ConfigChannel+0x86>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_ADC_ConfigChannel+0x54>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	080024c1 	.word	0x080024c1
 80024b0:	080024c9 	.word	0x080024c9
 80024b4:	080024d1 	.word	0x080024d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	220c      	movs	r2, #12
 80024bc:	605a      	str	r2, [r3, #4]
          break;
 80024be:	e011      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2212      	movs	r2, #18
 80024c4:	605a      	str	r2, [r3, #4]
          break;
 80024c6:	e00d      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2218      	movs	r2, #24
 80024cc:	605a      	str	r2, [r3, #4]
          break;
 80024ce:	e009      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d6:	605a      	str	r2, [r3, #4]
          break;
 80024d8:	e004      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2206      	movs	r2, #6
 80024de:	605a      	str	r2, [r3, #4]
          break;
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff fae0 	bl	8001ab6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fc69 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8002500:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fc89 	bl	8001e20 <LL_ADC_INJ_IsConversionOngoing>
 800250e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002512:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 81c1 	bne.w	800289e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800251c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 81bc 	bne.w	800289e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800252e:	d10f      	bne.n	8002550 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	4619      	mov	r1, r3
 800253c:	f7ff fae7 	bl	8001b0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fa8e 	bl	8001a6a <LL_ADC_SetSamplingTimeCommonConfig>
 800254e:	e00e      	b.n	800256e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6819      	ldr	r1, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	461a      	mov	r2, r3
 800255e:	f7ff fad6 	bl	8001b0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fa7e 	bl	8001a6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	08db      	lsrs	r3, r3, #3
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d00a      	beq.n	80025a6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6919      	ldr	r1, [r3, #16]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025a0:	f7ff fa0e 	bl	80019c0 <LL_ADC_SetOffset>
 80025a4:	e17b      	b.n	800289e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fa2b 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x17e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fa20 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	e01e      	b.n	8002610 <HAL_ADC_ConfigChannel+0x1bc>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fa15 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e004      	b.n	800260e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d4>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	e018      	b.n	800265a <HAL_ADC_ConfigChannel+0x206>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800263c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e004      	b.n	800265a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800265a:	429a      	cmp	r2, r3
 800265c:	d106      	bne.n	800266c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff f9e4 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f9c8 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x244>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff f9bd 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	f003 021f 	and.w	r2, r3, #31
 8002696:	e01e      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x282>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f9b2 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e004      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80026ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x29a>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	e018      	b.n	8002720 <HAL_ADC_ConfigChannel+0x2cc>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800270a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e004      	b.n	8002720 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002720:	429a      	cmp	r2, r3
 8002722:	d106      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	2101      	movs	r1, #1
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f981 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff f965 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_ADC_ConfigChannel+0x30a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2102      	movs	r1, #2
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff f95a 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	0e9b      	lsrs	r3, r3, #26
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	e01e      	b.n	800279c <HAL_ADC_ConfigChannel+0x348>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2102      	movs	r1, #2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff f94f 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800277c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e004      	b.n	800279a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002790:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x360>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	e016      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x38e>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e004      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80027d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d106      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2200      	movs	r2, #0
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f920 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2103      	movs	r1, #3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f904 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x3cc>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2103      	movs	r1, #3
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff f8f9 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	f003 021f 	and.w	r2, r3, #31
 800281e:	e017      	b.n	8002850 <HAL_ADC_ConfigChannel+0x3fc>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2103      	movs	r1, #3
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f8ee 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800283a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800283c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e003      	b.n	800284e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x414>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	e011      	b.n	800288c <HAL_ADC_ConfigChannel+0x438>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002878:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e003      	b.n	800288c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800288c:	429a      	cmp	r2, r3
 800288e:	d106      	bne.n	800289e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	2103      	movs	r1, #3
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f8cb 	bl	8001a34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fa47 	bl	8001d36 <LL_ADC_IsEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 8140 	bne.w	8002b30 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	461a      	mov	r2, r3
 80028be:	f7ff f951 	bl	8001b64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4a8f      	ldr	r2, [pc, #572]	; (8002b04 <HAL_ADC_ConfigChannel+0x6b0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	f040 8131 	bne.w	8002b30 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x4a2>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	bf94      	ite	ls
 80028ee:	2301      	movls	r3, #1
 80028f0:	2300      	movhi	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e019      	b.n	800292a <HAL_ADC_ConfigChannel+0x4d6>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002906:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e003      	b.n	800291a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2b09      	cmp	r3, #9
 8002922:	bf94      	ite	ls
 8002924:	2301      	movls	r3, #1
 8002926:	2300      	movhi	r3, #0
 8002928:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292a:	2b00      	cmp	r3, #0
 800292c:	d079      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d107      	bne.n	800294a <HAL_ADC_ConfigChannel+0x4f6>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	3301      	adds	r3, #1
 8002942:	069b      	lsls	r3, r3, #26
 8002944:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002948:	e015      	b.n	8002976 <HAL_ADC_ConfigChannel+0x522>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800295c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	069b      	lsls	r3, r3, #26
 8002972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x542>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	3301      	adds	r3, #1
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	e017      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x572>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80029ae:	2320      	movs	r3, #32
 80029b0:	e003      	b.n	80029ba <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80029b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	ea42 0103 	orr.w	r1, r2, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x598>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	0e9b      	lsrs	r3, r3, #26
 80029dc:	3301      	adds	r3, #1
 80029de:	f003 021f 	and.w	r2, r3, #31
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	051b      	lsls	r3, r3, #20
 80029ea:	e018      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x5ca>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 021f 	and.w	r2, r3, #31
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	e081      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x5ea>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	3301      	adds	r3, #1
 8002a36:	069b      	lsls	r3, r3, #26
 8002a38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a3c:	e015      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x616>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e003      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	069b      	lsls	r3, r3, #26
 8002a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x636>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	0e9b      	lsrs	r3, r3, #26
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	e017      	b.n	8002aba <HAL_ADC_ConfigChannel+0x666>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	61fb      	str	r3, [r7, #28]
  return result;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e003      	b.n	8002aae <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	ea42 0103 	orr.w	r1, r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10d      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x692>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	0e9b      	lsrs	r3, r3, #26
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f003 021f 	and.w	r2, r3, #31
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	3b1e      	subs	r3, #30
 8002ade:	051b      	lsls	r3, r3, #20
 8002ae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	e01e      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x6d0>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	613b      	str	r3, [r7, #16]
  return result;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002afe:	2320      	movs	r3, #32
 8002b00:	e006      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x6bc>
 8002b02:	bf00      	nop
 8002b04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f003 021f 	and.w	r2, r3, #31
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b1e      	subs	r3, #30
 8002b1e:	051b      	lsls	r3, r3, #20
 8002b20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b24:	430b      	orrs	r3, r1
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f7fe ffef 	bl	8001b0e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d06c      	beq.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b3c:	483c      	ldr	r0, [pc, #240]	; (8002c30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b3e:	f7fe ff31 	bl	80019a4 <LL_ADC_GetCommonPathInternalCh>
 8002b42:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d127      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d121      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d157      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b6e:	4619      	mov	r1, r3
 8002b70:	482f      	ldr	r0, [pc, #188]	; (8002c30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b72:	f7fe ff04 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b76:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <HAL_ADC_ConfigChannel+0x7e8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b9e:	e03a      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_ADC_ConfigChannel+0x7f0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d113      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x77e>
 8002baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d12a      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4819      	ldr	r0, [pc, #100]	; (8002c30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bcc:	f7fe fed7 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd0:	e021      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_ADC_ConfigChannel+0x7f4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d11c      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d111      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	480c      	ldr	r0, [pc, #48]	; (8002c30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bfe:	f7fe febe 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
 8002c02:	e008      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	37d8      	adds	r7, #216	; 0xd8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	80080000 	.word	0x80080000
 8002c30:	50040300 	.word	0x50040300
 8002c34:	c7520000 	.word	0xc7520000
 8002c38:	50040000 	.word	0x50040000
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	053e2d63 	.word	0x053e2d63
 8002c44:	cb840000 	.word	0xcb840000
 8002c48:	80000001 	.word	0x80000001

08002c4c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	; 0x38
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c64:	d003      	beq.n	8002c6e <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002c6a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_AnalogWDGConfig+0x30>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e1ec      	b.n	8003056 <HAL_ADC_AnalogWDGConfig+0x40a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff f8a2 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8002c8e:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff f8c3 	bl	8001e20 <LL_ADC_INJ_IsConversionOngoing>
 8002c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 81ca 	bne.w	8003038 <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f040 81c6 	bne.w	8003038 <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a9b      	ldr	r2, [pc, #620]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f040 80a2 	bne.w	8002dfc <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002cc0:	d034      	beq.n	8002d2c <HAL_ADC_AnalogWDGConfig+0xe0>
 8002cc2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002cc6:	d856      	bhi.n	8002d76 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ccc:	d04b      	beq.n	8002d66 <HAL_ADC_AnalogWDGConfig+0x11a>
 8002cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd2:	d850      	bhi.n	8002d76 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002cd4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cd8:	d01b      	beq.n	8002d12 <HAL_ADC_AnalogWDGConfig+0xc6>
 8002cda:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cde:	d84a      	bhi.n	8002d76 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce4:	d037      	beq.n	8002d56 <HAL_ADC_AnalogWDGConfig+0x10a>
 8002ce6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cea:	d844      	bhi.n	8002d76 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cf0:	d029      	beq.n	8002d46 <HAL_ADC_AnalogWDGConfig+0xfa>
 8002cf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cf6:	d13e      	bne.n	8002d76 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002d04:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4985      	ldr	r1, [pc, #532]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d0c:	f7fe ff4e 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8002d10:	e039      	b.n	8002d86 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002d1e:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8002d22:	461a      	mov	r2, r3
 8002d24:	497e      	ldr	r1, [pc, #504]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d26:	f7fe ff41 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8002d2a:	e02c      	b.n	8002d86 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002d38:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4978      	ldr	r1, [pc, #480]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d40:	f7fe ff34 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002d44:	e01f      	b.n	8002d86 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a76      	ldr	r2, [pc, #472]	; (8002f24 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8002d4c:	4974      	ldr	r1, [pc, #464]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff2c 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d54:	e017      	b.n	8002d86 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a73      	ldr	r2, [pc, #460]	; (8002f28 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8002d5c:	4970      	ldr	r1, [pc, #448]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe ff24 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d64:	e00f      	b.n	8002d86 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a70      	ldr	r2, [pc, #448]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8002d6c:	496c      	ldr	r1, [pc, #432]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe ff1c 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d74:	e007      	b.n	8002d86 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4968      	ldr	r1, [pc, #416]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe ff14 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d84:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6819      	ldr	r1, [r3, #0]
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc2:	f7fe ff20 	bl	8001c06 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f835 	bl	8001e46 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	7b1b      	ldrb	r3, [r3, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f855 	bl	8001e98 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002dee:	e12c      	b.n	800304a <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff f87f 	bl	8001ef8 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002dfa:	e126      	b.n	800304a <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002e04:	d01d      	beq.n	8002e42 <HAL_ADC_AnalogWDGConfig+0x1f6>
 8002e06:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002e0a:	f200 8093 	bhi.w	8002f34 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e12:	d07b      	beq.n	8002f0c <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002e14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e18:	f200 808c 	bhi.w	8002f34 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002e1c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002e20:	d00f      	beq.n	8002e42 <HAL_ADC_AnalogWDGConfig+0x1f6>
 8002e22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002e26:	f200 8085 	bhi.w	8002f34 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002e2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2e:	d06d      	beq.n	8002f0c <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d87e      	bhi.n	8002f34 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002e36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e3a:	d067      	beq.n	8002f0c <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002e3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e40:	d178      	bne.n	8002f34 <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a3a      	ldr	r2, [pc, #232]	; (8002f30 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d12f      	bne.n	8002eac <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d108      	bne.n	8002e6a <HAL_ADC_AnalogWDGConfig+0x21e>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2201      	movs	r2, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	e016      	b.n	8002e98 <HAL_ADC_AnalogWDGConfig+0x24c>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	61bb      	str	r3, [r7, #24]
  return result;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e003      	b.n	8002e8e <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2201      	movs	r2, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002eaa:	e04c      	b.n	8002f46 <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d108      	bne.n	8002eca <HAL_ADC_AnalogWDGConfig+0x27e>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	e016      	b.n	8002ef8 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	60fb      	str	r3, [r7, #12]
  return result;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	e003      	b.n	8002eee <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8002f0a:	e01c      	b.n	8002f46 <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fe fe48 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002f1c:	e013      	b.n	8002f46 <HAL_ADC_AnalogWDGConfig+0x2fa>
 8002f1e:	bf00      	nop
 8002f20:	7dc00000 	.word	0x7dc00000
 8002f24:	0087ffff 	.word	0x0087ffff
 8002f28:	0107ffff 	.word	0x0107ffff
 8002f2c:	0187ffff 	.word	0x0187ffff
 8002f30:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fe fe34 	bl	8001bac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002f44:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0318 	and.w	r3, r3, #24
 8002f50:	2b18      	cmp	r3, #24
 8002f52:	d00f      	beq.n	8002f74 <HAL_ADC_AnalogWDGConfig+0x328>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	08db      	lsrs	r3, r3, #3
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	f1c3 0302 	rsb	r3, r3, #2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	f003 031e 	and.w	r3, r3, #30
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	e002      	b.n	8002f7a <HAL_ADC_AnalogWDGConfig+0x32e>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0318 	and.w	r3, r3, #24
 8002f86:	2b18      	cmp	r3, #24
 8002f88:	d00f      	beq.n	8002faa <HAL_ADC_AnalogWDGConfig+0x35e>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	08db      	lsrs	r3, r3, #3
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	f1c3 0302 	rsb	r3, r3, #2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	f003 031e 	and.w	r3, r3, #30
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	e002      	b.n	8002fb0 <HAL_ADC_AnalogWDGConfig+0x364>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fbe:	f7fe fe22 	bl	8001c06 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a26      	ldr	r2, [pc, #152]	; (8003060 <HAL_ADC_AnalogWDGConfig+0x414>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d11a      	bne.n	8003002 <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe ff3f 	bl	8001e60 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7b1b      	ldrb	r3, [r3, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe ff62 	bl	8001eb8 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ff4:	e029      	b.n	800304a <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe ff8c 	bl	8001f18 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003000:	e023      	b.n	800304a <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe ff32 	bl	8001e7c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	7b1b      	ldrb	r3, [r3, #12]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe ff57 	bl	8001ed8 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800302a:	e00e      	b.n	800304a <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe ff81 	bl	8001f38 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003036:	e008      	b.n	800304a <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003056:	4618      	mov	r0, r3
 8003058:	3738      	adds	r7, #56	; 0x38
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0017ffff 	.word	0x0017ffff

08003064 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fea9 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8003080:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe feca 	bl	8001e20 <LL_ADC_INJ_IsConversionOngoing>
 800308c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d103      	bne.n	800309c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8098 	beq.w	80031cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02a      	beq.n	8003100 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	7e5b      	ldrb	r3, [r3, #25]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d126      	bne.n	8003100 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7e1b      	ldrb	r3, [r3, #24]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d122      	bne.n	8003100 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030be:	e014      	b.n	80030ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4a45      	ldr	r2, [pc, #276]	; (80031d8 <ADC_ConversionStop+0x174>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d90d      	bls.n	80030e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f043 0210 	orr.w	r2, r3, #16
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e074      	b.n	80031ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	3301      	adds	r3, #1
 80030e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d1e3      	bne.n	80030c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2240      	movs	r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d014      	beq.n	8003130 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fe61 	bl	8001dd2 <LL_ADC_REG_IsConversionOngoing>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fe1e 	bl	8001d5c <LL_ADC_IsDisableOngoing>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fe3d 	bl	8001daa <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d014      	beq.n	8003160 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fe70 	bl	8001e20 <LL_ADC_INJ_IsConversionOngoing>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00c      	beq.n	8003160 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fe06 	bl	8001d5c <LL_ADC_IsDisableOngoing>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fe4c 	bl	8001df8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d005      	beq.n	8003172 <ADC_ConversionStop+0x10e>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d105      	bne.n	8003178 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800316c:	230c      	movs	r3, #12
 800316e:	617b      	str	r3, [r7, #20]
        break;
 8003170:	e005      	b.n	800317e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003172:	2308      	movs	r3, #8
 8003174:	617b      	str	r3, [r7, #20]
        break;
 8003176:	e002      	b.n	800317e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003178:	2304      	movs	r3, #4
 800317a:	617b      	str	r3, [r7, #20]
        break;
 800317c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800317e:	f7fe fbbb 	bl	80018f8 <HAL_GetTick>
 8003182:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003184:	e01b      	b.n	80031be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003186:	f7fe fbb7 	bl	80018f8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b05      	cmp	r3, #5
 8003192:	d914      	bls.n	80031be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e007      	b.n	80031ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1dc      	bne.n	8003186 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	a33fffff 	.word	0xa33fffff

080031dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fda2 	bl	8001d36 <LL_ADC_IsEnabled>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d169      	bne.n	80032cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	4b36      	ldr	r3, [pc, #216]	; (80032d8 <ADC_Enable+0xfc>)
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f043 0210 	orr.w	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f043 0201 	orr.w	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e055      	b.n	80032ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fd5d 	bl	8001ce6 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800322c:	482b      	ldr	r0, [pc, #172]	; (80032dc <ADC_Enable+0x100>)
 800322e:	f7fe fbb9 	bl	80019a4 <LL_ADC_GetCommonPathInternalCh>
 8003232:	4603      	mov	r3, r0
 8003234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <ADC_Enable+0x104>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <ADC_Enable+0x108>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003256:	e002      	b.n	800325e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3b01      	subs	r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f9      	bne.n	8003258 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003264:	f7fe fb48 	bl	80018f8 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800326a:	e028      	b.n	80032be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fd60 	bl	8001d36 <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe fd30 	bl	8001ce6 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003286:	f7fe fb37 	bl	80018f8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d914      	bls.n	80032be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d00d      	beq.n	80032be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	f043 0210 	orr.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e007      	b.n	80032ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d1cf      	bne.n	800326c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	8000003f 	.word	0x8000003f
 80032dc:	50040300 	.word	0x50040300
 80032e0:	20000000 	.word	0x20000000
 80032e4:	053e2d63 	.word	0x053e2d63

080032e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fd31 	bl	8001d5c <LL_ADC_IsDisableOngoing>
 80032fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe fd18 	bl	8001d36 <LL_ADC_IsEnabled>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d047      	beq.n	800339c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d144      	bne.n	800339c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030d 	and.w	r3, r3, #13
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10c      	bne.n	800333a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fcf2 	bl	8001d0e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2203      	movs	r2, #3
 8003330:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003332:	f7fe fae1 	bl	80018f8 <HAL_GetTick>
 8003336:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003338:	e029      	b.n	800338e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e023      	b.n	800339e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003356:	f7fe facf 	bl	80018f8 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d914      	bls.n	800338e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	f043 0210 	orr.w	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	f043 0201 	orr.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e007      	b.n	800339e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1dc      	bne.n	8003356 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c4:	4013      	ands	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <__NVIC_SetPriorityGrouping+0x44>)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	60d3      	str	r3, [r2, #12]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <__NVIC_GetPriorityGrouping+0x18>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 0307 	and.w	r3, r3, #7
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	db0a      	blt.n	8003436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	490c      	ldr	r1, [pc, #48]	; (8003458 <__NVIC_SetPriority+0x4c>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	440b      	add	r3, r1
 8003430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003434:	e00a      	b.n	800344c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4908      	ldr	r1, [pc, #32]	; (800345c <__NVIC_SetPriority+0x50>)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3b04      	subs	r3, #4
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	440b      	add	r3, r1
 800344a:	761a      	strb	r2, [r3, #24]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f1c3 0307 	rsb	r3, r3, #7
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf28      	it	cs
 800347e:	2304      	movcs	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3304      	adds	r3, #4
 8003486:	2b06      	cmp	r3, #6
 8003488:	d902      	bls.n	8003490 <NVIC_EncodePriority+0x30>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3b03      	subs	r3, #3
 800348e:	e000      	b.n	8003492 <NVIC_EncodePriority+0x32>
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	f04f 32ff 	mov.w	r2, #4294967295
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	401a      	ands	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	4313      	orrs	r3, r2
         );
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d8:	d301      	bcc.n	80034de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <SysTick_Config+0x40>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e6:	210f      	movs	r1, #15
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	f7ff ff8e 	bl	800340c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <SysTick_Config+0x40>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <SysTick_Config+0x40>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	e000e010 	.word	0xe000e010

0800350c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff47 	bl	80033a8 <__NVIC_SetPriorityGrouping>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003534:	f7ff ff5c 	bl	80033f0 <__NVIC_GetPriorityGrouping>
 8003538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f7ff ff8e 	bl	8003460 <NVIC_EncodePriority>
 8003544:	4602      	mov	r2, r0
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff5d 	bl	800340c <__NVIC_SetPriority>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ffb0 	bl	80034c8 <SysTick_Config>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003582:	e166      	b.n	8003852 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8158 	beq.w	800384c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d005      	beq.n	80035b4 <HAL_GPIO_Init+0x40>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d130      	bne.n	8003616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ea:	2201      	movs	r2, #1
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 0201 	and.w	r2, r3, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d017      	beq.n	8003652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2203      	movs	r2, #3
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d123      	bne.n	80036a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	6939      	ldr	r1, [r7, #16]
 80036a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	2203      	movs	r2, #3
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0203 	and.w	r2, r3, #3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80b2 	beq.w	800384c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e8:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_GPIO_Init+0x2fc>)
 80036ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ec:	4a60      	ldr	r2, [pc, #384]	; (8003870 <HAL_GPIO_Init+0x2fc>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6613      	str	r3, [r2, #96]	; 0x60
 80036f4:	4b5e      	ldr	r3, [pc, #376]	; (8003870 <HAL_GPIO_Init+0x2fc>)
 80036f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003700:	4a5c      	ldr	r2, [pc, #368]	; (8003874 <HAL_GPIO_Init+0x300>)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800372a:	d02b      	beq.n	8003784 <HAL_GPIO_Init+0x210>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a52      	ldr	r2, [pc, #328]	; (8003878 <HAL_GPIO_Init+0x304>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d025      	beq.n	8003780 <HAL_GPIO_Init+0x20c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a51      	ldr	r2, [pc, #324]	; (800387c <HAL_GPIO_Init+0x308>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d01f      	beq.n	800377c <HAL_GPIO_Init+0x208>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a50      	ldr	r2, [pc, #320]	; (8003880 <HAL_GPIO_Init+0x30c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d019      	beq.n	8003778 <HAL_GPIO_Init+0x204>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a4f      	ldr	r2, [pc, #316]	; (8003884 <HAL_GPIO_Init+0x310>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_GPIO_Init+0x200>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a4e      	ldr	r2, [pc, #312]	; (8003888 <HAL_GPIO_Init+0x314>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00d      	beq.n	8003770 <HAL_GPIO_Init+0x1fc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4d      	ldr	r2, [pc, #308]	; (800388c <HAL_GPIO_Init+0x318>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <HAL_GPIO_Init+0x1f8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a4c      	ldr	r2, [pc, #304]	; (8003890 <HAL_GPIO_Init+0x31c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_GPIO_Init+0x1f4>
 8003764:	2307      	movs	r3, #7
 8003766:	e00e      	b.n	8003786 <HAL_GPIO_Init+0x212>
 8003768:	2308      	movs	r3, #8
 800376a:	e00c      	b.n	8003786 <HAL_GPIO_Init+0x212>
 800376c:	2306      	movs	r3, #6
 800376e:	e00a      	b.n	8003786 <HAL_GPIO_Init+0x212>
 8003770:	2305      	movs	r3, #5
 8003772:	e008      	b.n	8003786 <HAL_GPIO_Init+0x212>
 8003774:	2304      	movs	r3, #4
 8003776:	e006      	b.n	8003786 <HAL_GPIO_Init+0x212>
 8003778:	2303      	movs	r3, #3
 800377a:	e004      	b.n	8003786 <HAL_GPIO_Init+0x212>
 800377c:	2302      	movs	r3, #2
 800377e:	e002      	b.n	8003786 <HAL_GPIO_Init+0x212>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_GPIO_Init+0x212>
 8003784:	2300      	movs	r3, #0
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	f002 0203 	and.w	r2, r2, #3
 800378c:	0092      	lsls	r2, r2, #2
 800378e:	4093      	lsls	r3, r2
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003796:	4937      	ldr	r1, [pc, #220]	; (8003874 <HAL_GPIO_Init+0x300>)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_GPIO_Init+0x320>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037c8:	4a32      	ldr	r2, [pc, #200]	; (8003894 <HAL_GPIO_Init+0x320>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_GPIO_Init+0x320>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037f2:	4a28      	ldr	r2, [pc, #160]	; (8003894 <HAL_GPIO_Init+0x320>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_GPIO_Init+0x320>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_GPIO_Init+0x320>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_GPIO_Init+0x320>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <HAL_GPIO_Init+0x320>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3301      	adds	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f ae91 	bne.w	8003584 <HAL_GPIO_Init+0x10>
  }
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40021000 	.word	0x40021000
 8003874:	40010000 	.word	0x40010000
 8003878:	48000400 	.word	0x48000400
 800387c:	48000800 	.word	0x48000800
 8003880:	48000c00 	.word	0x48000c00
 8003884:	48001000 	.word	0x48001000
 8003888:	48001400 	.word	0x48001400
 800388c:	48001800 	.word	0x48001800
 8003890:	48001c00 	.word	0x48001c00
 8003894:	40010400 	.word	0x40010400

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ca:	b08f      	sub	sp, #60	; 0x3c
 80038cc:	af0a      	add	r7, sp, #40	; 0x28
 80038ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e116      	b.n	8003b08 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd fea5 	bl	8001644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f002 fcb9 	bl	8006290 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	687e      	ldr	r6, [r7, #4]
 8003926:	466d      	mov	r5, sp
 8003928:	f106 0410 	add.w	r4, r6, #16
 800392c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800392e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003938:	e885 0003 	stmia.w	r5, {r0, r1}
 800393c:	1d33      	adds	r3, r6, #4
 800393e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003940:	6838      	ldr	r0, [r7, #0]
 8003942:	f002 fc79 	bl	8006238 <USB_CoreInit>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0d7      	b.n	8003b08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f002 fca7 	bl	80062b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
 8003968:	e04a      	b.n	8003a00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	333d      	adds	r3, #61	; 0x3d
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	333c      	adds	r3, #60	; 0x3c
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	b298      	uxth	r0, r3
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3344      	adds	r3, #68	; 0x44
 80039a6:	4602      	mov	r2, r0
 80039a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3340      	adds	r3, #64	; 0x40
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3348      	adds	r3, #72	; 0x48
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	334c      	adds	r3, #76	; 0x4c
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3354      	adds	r3, #84	; 0x54
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	3301      	adds	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3af      	bcc.n	800396a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e044      	b.n	8003a9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	3301      	adds	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3b5      	bcc.n	8003a10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	687e      	ldr	r6, [r7, #4]
 8003aac:	466d      	mov	r5, sp
 8003aae:	f106 0410 	add.w	r4, r6, #16
 8003ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ac2:	1d33      	adds	r3, r6, #4
 8003ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac6:	6838      	ldr	r0, [r7, #0]
 8003ac8:	f002 fc40 	bl	800634c <USB_DevInit>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e014      	b.n	8003b08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f80a 	bl	8003b10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f002 fdec 	bl	80066de <USB_DevDisconnect>

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	f043 0303 	orr.w	r3, r3, #3
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b68:	d102      	bne.n	8003b70 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b6e:	e00b      	b.n	8003b88 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003b70:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7e:	d102      	bne.n	8003b86 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b84:	e000      	b.n	8003b88 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003b86:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40007000 	.word	0x40007000

08003b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d141      	bne.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ba6:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb2:	d131      	bne.n	8003c18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bb4:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bba:	4a46      	ldr	r2, [pc, #280]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bc4:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bcc:	4a41      	ldr	r2, [pc, #260]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003bd4:	4b40      	ldr	r3, [pc, #256]	; (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2232      	movs	r2, #50	; 0x32
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	0c9b      	lsrs	r3, r3, #18
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bea:	e002      	b.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf2:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfe:	d102      	bne.n	8003c06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f2      	bne.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c06:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c12:	d158      	bne.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e057      	b.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c28:	e04d      	b.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c30:	d141      	bne.n	8003cb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c32:	4b28      	ldr	r3, [pc, #160]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d131      	bne.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c46:	4a23      	ldr	r2, [pc, #140]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c58:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2232      	movs	r2, #50	; 0x32
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	0c9b      	lsrs	r3, r3, #18
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c76:	e002      	b.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8a:	d102      	bne.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f2      	bne.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d112      	bne.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e011      	b.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cb4:	e007      	b.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cc4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	431bde83 	.word	0x431bde83

08003ce0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cee:	6053      	str	r3, [r2, #4]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40007000 	.word	0x40007000

08003d00 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0e:	6053      	str	r3, [r2, #4]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40007000 	.word	0x40007000

08003d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f000 bc08 	b.w	8004544 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d34:	4b96      	ldr	r3, [pc, #600]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d3e:	4b94      	ldr	r3, [pc, #592]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80e4 	beq.w	8003f1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4c>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	f040 808b 	bne.w	8003e7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	f040 8087 	bne.w	8003e7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d6c:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_OscConfig+0x64>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e3df      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_RCC_OscConfig+0x7e>
 8003d94:	4b7e      	ldr	r3, [pc, #504]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9c:	e005      	b.n	8003daa <HAL_RCC_OscConfig+0x8a>
 8003d9e:	4b7c      	ldr	r3, [pc, #496]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d223      	bcs.n	8003df6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fdcc 	bl	8004950 <RCC_SetFlashLatencyFromMSIRange>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e3c0      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc2:	4b73      	ldr	r3, [pc, #460]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a72      	ldr	r2, [pc, #456]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	f043 0308 	orr.w	r3, r3, #8
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b70      	ldr	r3, [pc, #448]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	496d      	ldr	r1, [pc, #436]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de0:	4b6b      	ldr	r3, [pc, #428]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	4968      	ldr	r1, [pc, #416]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
 8003df4:	e025      	b.n	8003e42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df6:	4b66      	ldr	r3, [pc, #408]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a65      	ldr	r2, [pc, #404]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	f043 0308 	orr.w	r3, r3, #8
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4960      	ldr	r1, [pc, #384]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e14:	4b5e      	ldr	r3, [pc, #376]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	495b      	ldr	r1, [pc, #364]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fd8c 	bl	8004950 <RCC_SetFlashLatencyFromMSIRange>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e380      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e42:	f000 fcc1 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8003e46:	4602      	mov	r2, r0
 8003e48:	4b51      	ldr	r3, [pc, #324]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	4950      	ldr	r1, [pc, #320]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e54:	5ccb      	ldrb	r3, [r1, r3]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <HAL_RCC_OscConfig+0x278>)
 8003e60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e62:	4b4e      	ldr	r3, [pc, #312]	; (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd fcf6 	bl	8001858 <HAL_InitTick>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d052      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	e364      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d032      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e82:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a42      	ldr	r2, [pc, #264]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fd33 	bl	80018f8 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e96:	f7fd fd2f 	bl	80018f8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e34d      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a35      	ldr	r2, [pc, #212]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4930      	ldr	r1, [pc, #192]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed2:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	492b      	ldr	r1, [pc, #172]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
 8003ee6:	e01a      	b.n	8003f1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ee8:	4b29      	ldr	r3, [pc, #164]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a28      	ldr	r2, [pc, #160]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fd00 	bl	80018f8 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003efc:	f7fd fcfc 	bl	80018f8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e31a      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1dc>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d073      	beq.n	8004012 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_OscConfig+0x21c>
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d10e      	bne.n	8003f54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3c:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d063      	beq.n	8004010 <HAL_RCC_OscConfig+0x2f0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d15f      	bne.n	8004010 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e2f7      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCC_OscConfig+0x24c>
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e025      	b.n	8003fb8 <HAL_RCC_OscConfig+0x298>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f74:	d114      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x280>
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a02      	ldr	r2, [pc, #8]	; (8003f90 <HAL_RCC_OscConfig+0x270>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e013      	b.n	8003fb8 <HAL_RCC_OscConfig+0x298>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	080068cc 	.word	0x080068cc
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	20000004 	.word	0x20000004
 8003fa0:	4ba0      	ldr	r3, [pc, #640]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a9f      	ldr	r2, [pc, #636]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b9d      	ldr	r3, [pc, #628]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a9c      	ldr	r2, [pc, #624]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fc9a 	bl	80018f8 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fd fc96 	bl	80018f8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e2b4      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	4b92      	ldr	r3, [pc, #584]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x2a8>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fc86 	bl	80018f8 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fc82 	bl	80018f8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e2a0      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	4b88      	ldr	r3, [pc, #544]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2d0>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d060      	beq.n	80040e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d005      	beq.n	8004030 <HAL_RCC_OscConfig+0x310>
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d119      	bne.n	800405e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d116      	bne.n	800405e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004030:	4b7c      	ldr	r3, [pc, #496]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_OscConfig+0x328>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e27d      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b76      	ldr	r3, [pc, #472]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	4973      	ldr	r1, [pc, #460]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405c:	e040      	b.n	80040e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d023      	beq.n	80040ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004066:	4b6f      	ldr	r3, [pc, #444]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6e      	ldr	r2, [pc, #440]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fd fc41 	bl	80018f8 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7fd fc3d 	bl	80018f8 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e25b      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408c:	4b65      	ldr	r3, [pc, #404]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b62      	ldr	r3, [pc, #392]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	495f      	ldr	r1, [pc, #380]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
 80040ac:	e018      	b.n	80040e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b5d      	ldr	r3, [pc, #372]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a5c      	ldr	r2, [pc, #368]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 80040b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd fc1d 	bl	80018f8 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fd fc19 	bl	80018f8 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e237      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03c      	beq.n	8004166 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01c      	beq.n	800412e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f4:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 80040f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fa:	4a4a      	ldr	r2, [pc, #296]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fd fbf8 	bl	80018f8 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410c:	f7fd fbf4 	bl	80018f8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e212      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ef      	beq.n	800410c <HAL_RCC_OscConfig+0x3ec>
 800412c:	e01b      	b.n	8004166 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004134:	4a3b      	ldr	r2, [pc, #236]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd fbdb 	bl	80018f8 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004146:	f7fd fbd7 	bl	80018f8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1f5      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ef      	bne.n	8004146 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80a6 	beq.w	80042c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	4a26      	ldr	r2, [pc, #152]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6593      	str	r3, [r2, #88]	; 0x58
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419c:	2301      	movs	r3, #1
 800419e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCC_OscConfig+0x508>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d118      	bne.n	80041de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ac:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <HAL_RCC_OscConfig+0x508>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <HAL_RCC_OscConfig+0x508>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b8:	f7fd fb9e 	bl	80018f8 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fd fb9a 	bl	80018f8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1b8      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_RCC_OscConfig+0x508>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4d8>
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f6:	e029      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d115      	bne.n	800422c <HAL_RCC_OscConfig+0x50c>
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	4a07      	ldr	r2, [pc, #28]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004208:	f043 0304 	orr.w	r3, r3, #4
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004210:	4b04      	ldr	r3, [pc, #16]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	4a03      	ldr	r2, [pc, #12]	; (8004224 <HAL_RCC_OscConfig+0x504>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004220:	e014      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	40007000 	.word	0x40007000
 800422c:	4b9d      	ldr	r3, [pc, #628]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	4a9c      	ldr	r2, [pc, #624]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800423c:	4b99      	ldr	r3, [pc, #612]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	4a98      	ldr	r2, [pc, #608]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d016      	beq.n	8004282 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fd fb50 	bl	80018f8 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fd fb4c 	bl	80018f8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e168      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004272:	4b8c      	ldr	r3, [pc, #560]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ed      	beq.n	800425c <HAL_RCC_OscConfig+0x53c>
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004282:	f7fd fb39 	bl	80018f8 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7fd fb35 	bl	80018f8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	; 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e151      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a0:	4b80      	ldr	r3, [pc, #512]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ed      	bne.n	800428a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b4:	4b7b      	ldr	r3, [pc, #492]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	4a7a      	ldr	r2, [pc, #488]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d03c      	beq.n	8004346 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01c      	beq.n	800430e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042d4:	4b73      	ldr	r3, [pc, #460]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80042d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042da:	4a72      	ldr	r2, [pc, #456]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd fb08 	bl	80018f8 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ec:	f7fd fb04 	bl	80018f8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e122      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042fe:	4b69      	ldr	r3, [pc, #420]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ef      	beq.n	80042ec <HAL_RCC_OscConfig+0x5cc>
 800430c:	e01b      	b.n	8004346 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800430e:	4b65      	ldr	r3, [pc, #404]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004314:	4a63      	ldr	r2, [pc, #396]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431e:	f7fd faeb 	bl	80018f8 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004326:	f7fd fae7 	bl	80018f8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e105      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004338:	4b5a      	ldr	r3, [pc, #360]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 800433a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1ef      	bne.n	8004326 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80f9 	beq.w	8004542 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	2b02      	cmp	r3, #2
 8004356:	f040 80cf 	bne.w	80044f8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800435a:	4b52      	ldr	r3, [pc, #328]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0203 	and.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	429a      	cmp	r2, r3
 800436c:	d12c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	3b01      	subs	r3, #1
 800437a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d123      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d11b      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d113      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	3b01      	subs	r3, #1
 80043ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d109      	bne.n	80043c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d071      	beq.n	80044ac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d068      	beq.n	80044a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043ce:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043da:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e0ac      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043ea:	4b2e      	ldr	r3, [pc, #184]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a2d      	ldr	r2, [pc, #180]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 80043f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043f6:	f7fd fa7f 	bl	80018f8 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fe:	f7fd fa7b 	bl	80018f8 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e099      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004410:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441c:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_RCC_OscConfig+0x788>)
 8004422:	4013      	ands	r3, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800442c:	3a01      	subs	r2, #1
 800442e:	0112      	lsls	r2, r2, #4
 8004430:	4311      	orrs	r1, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004436:	0212      	lsls	r2, r2, #8
 8004438:	4311      	orrs	r1, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800443e:	0852      	lsrs	r2, r2, #1
 8004440:	3a01      	subs	r2, #1
 8004442:	0552      	lsls	r2, r2, #21
 8004444:	4311      	orrs	r1, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800444a:	0852      	lsrs	r2, r2, #1
 800444c:	3a01      	subs	r2, #1
 800444e:	0652      	lsls	r2, r2, #25
 8004450:	4311      	orrs	r1, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004456:	06d2      	lsls	r2, r2, #27
 8004458:	430a      	orrs	r2, r1
 800445a:	4912      	ldr	r1, [pc, #72]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 800445c:	4313      	orrs	r3, r2
 800445e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004460:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0f      	ldr	r2, [pc, #60]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800446c:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004478:	f7fd fa3e 	bl	80018f8 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fd fa3a 	bl	80018f8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e058      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <HAL_RCC_OscConfig+0x784>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800449e:	e050      	b.n	8004542 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04f      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
 80044a4:	40021000 	.word	0x40021000
 80044a8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ac:	4b27      	ldr	r3, [pc, #156]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d144      	bne.n	8004542 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a23      	ldr	r2, [pc, #140]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 80044be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a20      	ldr	r2, [pc, #128]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 80044ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044d0:	f7fd fa12 	bl	80018f8 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd fa0e 	bl	80018f8 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e02c      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ea:	4b18      	ldr	r3, [pc, #96]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x7b8>
 80044f6:	e024      	b.n	8004542 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b0c      	cmp	r3, #12
 80044fc:	d01f      	beq.n	800453e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a12      	ldr	r2, [pc, #72]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 8004504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fd f9f5 	bl	80018f8 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004512:	f7fd f9f1 	bl	80018f8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e00f      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	4905      	ldr	r1, [pc, #20]	; (800454c <HAL_RCC_OscConfig+0x82c>)
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_OscConfig+0x830>)
 8004538:	4013      	ands	r3, r2
 800453a:	60cb      	str	r3, [r1, #12]
 800453c:	e001      	b.n	8004542 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	feeefffc 	.word	0xfeeefffc

08004554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e11d      	b.n	80047a8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b90      	ldr	r3, [pc, #576]	; (80047b0 <HAL_RCC_ClockConfig+0x25c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d910      	bls.n	800459c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b8d      	ldr	r3, [pc, #564]	; (80047b0 <HAL_RCC_ClockConfig+0x25c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 020f 	bic.w	r2, r3, #15
 8004582:	498b      	ldr	r1, [pc, #556]	; (80047b0 <HAL_RCC_ClockConfig+0x25c>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b89      	ldr	r3, [pc, #548]	; (80047b0 <HAL_RCC_ClockConfig+0x25c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e105      	b.n	80047a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	4b81      	ldr	r3, [pc, #516]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d908      	bls.n	80045ca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b7e      	ldr	r3, [pc, #504]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	497b      	ldr	r1, [pc, #492]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d079      	beq.n	80046ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d11e      	bne.n	800461c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0dc      	b.n	80047a8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80045ee:	f000 fa09 	bl	8004a04 <RCC_GetSysClockFreqFromPLLSource>
 80045f2:	4603      	mov	r3, r0
 80045f4:	4a70      	ldr	r2, [pc, #448]	; (80047b8 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d946      	bls.n	8004688 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045fa:	4b6e      	ldr	r3, [pc, #440]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d140      	bne.n	8004688 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004606:	4b6b      	ldr	r3, [pc, #428]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460e:	4a69      	ldr	r2, [pc, #420]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004614:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	e035      	b.n	8004688 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d107      	bne.n	8004634 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004624:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d115      	bne.n	800465c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0b9      	b.n	80047a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800463c:	4b5d      	ldr	r3, [pc, #372]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0ad      	b.n	80047a8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464c:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0a5      	b.n	80047a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800465c:	f000 f8b4 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8004660:	4603      	mov	r3, r0
 8004662:	4a55      	ldr	r2, [pc, #340]	; (80047b8 <HAL_RCC_ClockConfig+0x264>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d90f      	bls.n	8004688 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004668:	4b52      	ldr	r3, [pc, #328]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004674:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800467c:	4a4d      	ldr	r2, [pc, #308]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004688:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 0203 	bic.w	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4947      	ldr	r1, [pc, #284]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469a:	f7fd f92d 	bl	80018f8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a2:	f7fd f929 	bl	80018f8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e077      	b.n	80047a8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b8:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 020c 	and.w	r2, r3, #12
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d1eb      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b80      	cmp	r3, #128	; 0x80
 80046ce:	d105      	bne.n	80046dc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046d0:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80046d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046da:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d010      	beq.n	800470a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d208      	bcs.n	800470a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f8:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	492b      	ldr	r1, [pc, #172]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004706:	4313      	orrs	r3, r2
 8004708:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800470a:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <HAL_RCC_ClockConfig+0x25c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d210      	bcs.n	800473a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <HAL_RCC_ClockConfig+0x25c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 020f 	bic.w	r2, r3, #15
 8004720:	4923      	ldr	r1, [pc, #140]	; (80047b0 <HAL_RCC_ClockConfig+0x25c>)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004728:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <HAL_RCC_ClockConfig+0x25c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d001      	beq.n	800473a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e036      	b.n	80047a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004746:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	4918      	ldr	r1, [pc, #96]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004754:	4313      	orrs	r3, r2
 8004756:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4910      	ldr	r1, [pc, #64]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004778:	f000 f826 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCC_ClockConfig+0x260>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	490c      	ldr	r1, [pc, #48]	; (80047bc <HAL_RCC_ClockConfig+0x268>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
 8004794:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x26c>)
 8004796:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd f85b 	bl	8001858 <HAL_InitTick>
 80047a2:	4603      	mov	r3, r0
 80047a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40022000 	.word	0x40022000
 80047b4:	40021000 	.word	0x40021000
 80047b8:	04c4b400 	.word	0x04c4b400
 80047bc:	080068cc 	.word	0x080068cc
 80047c0:	20000000 	.word	0x20000000
 80047c4:	20000004 	.word	0x20000004

080047c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d6:	4b3e      	ldr	r3, [pc, #248]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e0:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x34>
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b0c      	cmp	r3, #12
 80047f4:	d121      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d11e      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047fc:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004808:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800480a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e005      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004818:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004824:	4a2b      	ldr	r2, [pc, #172]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10d      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d102      	bne.n	8004846 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e004      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d101      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800484c:	4b23      	ldr	r3, [pc, #140]	; (80048dc <HAL_RCC_GetSysClockFreq+0x114>)
 800484e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d134      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004856:	4b1e      	ldr	r3, [pc, #120]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_GetSysClockFreq+0xa6>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d003      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0xac>
 800486c:	e005      	b.n	800487a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004870:	617b      	str	r3, [r7, #20]
      break;
 8004872:	e005      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_GetSysClockFreq+0x114>)
 8004876:	617b      	str	r3, [r7, #20]
      break;
 8004878:	e002      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	617b      	str	r3, [r7, #20]
      break;
 800487e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004880:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3301      	adds	r3, #1
 800488c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800488e:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	fb03 f202 	mul.w	r2, r3, r2
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	0e5b      	lsrs	r3, r3, #25
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	3301      	adds	r3, #1
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048c0:	69bb      	ldr	r3, [r7, #24]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000
 80048d4:	080068e4 	.word	0x080068e4
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200

080048e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000000 	.word	0x20000000

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048fc:	f7ff fff0 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004900:	4602      	mov	r2, r0
 8004902:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4904      	ldr	r1, [pc, #16]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800490e:	5ccb      	ldrb	r3, [r1, r3]
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000
 8004920:	080068dc 	.word	0x080068dc

08004924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004928:	f7ff ffda 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0adb      	lsrs	r3, r3, #11
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4904      	ldr	r1, [pc, #16]	; (800494c <HAL_RCC_GetPCLK2Freq+0x28>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	080068dc 	.word	0x080068dc

08004950 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800495c:	4b27      	ldr	r3, [pc, #156]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004968:	f7ff f8f6 	bl	8003b58 <HAL_PWREx_GetVoltageRange>
 800496c:	6178      	str	r0, [r7, #20]
 800496e:	e014      	b.n	800499a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b22      	ldr	r3, [pc, #136]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	4a21      	ldr	r2, [pc, #132]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	6593      	str	r3, [r2, #88]	; 0x58
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004988:	f7ff f8e6 	bl	8003b58 <HAL_PWREx_GetVoltageRange>
 800498c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800498e:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004992:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004998:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a0:	d10b      	bne.n	80049ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b80      	cmp	r3, #128	; 0x80
 80049a6:	d913      	bls.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2ba0      	cmp	r3, #160	; 0xa0
 80049ac:	d902      	bls.n	80049b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049ae:	2302      	movs	r3, #2
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	e00d      	b.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049b4:	2301      	movs	r3, #1
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	e00a      	b.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b7f      	cmp	r3, #127	; 0x7f
 80049be:	d902      	bls.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80049c0:	2302      	movs	r3, #2
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	e004      	b.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b70      	cmp	r3, #112	; 0x70
 80049ca:	d101      	bne.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049cc:	2301      	movs	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f023 020f 	bic.w	r2, r3, #15
 80049d8:	4909      	ldr	r1, [pc, #36]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40022000 	.word	0x40022000

08004a04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a0a:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d00b      	beq.n	8004a32 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d825      	bhi.n	8004a6c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d008      	beq.n	8004a38 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d11f      	bne.n	8004a6c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a2e:	613b      	str	r3, [r7, #16]
    break;
 8004a30:	e01f      	b.n	8004a72 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004a32:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004a34:	613b      	str	r3, [r7, #16]
    break;
 8004a36:	e01c      	b.n	8004a72 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a38:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d107      	bne.n	8004a54 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a44:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4a:	0a1b      	lsrs	r3, r3, #8
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e005      	b.n	8004a60 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a54:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a68:	613b      	str	r3, [r7, #16]
    break;
 8004a6a:	e002      	b.n	8004a72 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]
    break;
 8004a70:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	091b      	lsrs	r3, r3, #4
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	fb03 f202 	mul.w	r2, r3, r2
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	0e5b      	lsrs	r3, r3, #25
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ab2:	683b      	ldr	r3, [r7, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	00f42400 	.word	0x00f42400
 8004ac8:	007a1200 	.word	0x007a1200
 8004acc:	080068e4 	.word	0x080068e4

08004ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ad8:	2300      	movs	r3, #0
 8004ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004adc:	2300      	movs	r3, #0
 8004ade:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d040      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d02a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d825      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004af8:	2b60      	cmp	r3, #96	; 0x60
 8004afa:	d026      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d821      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d006      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d81d      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d010      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b10:	e018      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b12:	4b89      	ldr	r3, [pc, #548]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4a88      	ldr	r2, [pc, #544]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b1e:	e015      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb02 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b30:	e00c      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3320      	adds	r3, #32
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fbed 	bl	8005318 <RCCEx_PLLSAI2_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b42:	e003      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	74fb      	strb	r3, [r7, #19]
      break;
 8004b48:	e000      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b52:	4b79      	ldr	r3, [pc, #484]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b58:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b60:	4975      	ldr	r1, [pc, #468]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b68:	e001      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d047      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b82:	d030      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d82a      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8e:	d02a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b94:	d824      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9a:	d008      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba0:	d81e      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	d010      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004bac:	e018      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4a61      	ldr	r2, [pc, #388]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bba:	e015      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fab4 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bcc:	e00c      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3320      	adds	r3, #32
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fb9f 	bl	8005318 <RCCEx_PLLSAI2_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bde:	e003      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	74fb      	strb	r3, [r7, #19]
      break;
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bee:	4b52      	ldr	r3, [pc, #328]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfc:	494e      	ldr	r1, [pc, #312]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c04:	e001      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 809f 	beq.w	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c1c:	4b46      	ldr	r3, [pc, #280]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c32:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	4a40      	ldr	r2, [pc, #256]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c3e:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c5a:	f7fc fe4d 	bl	80018f8 <HAL_GetTick>
 8004c5e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c60:	e009      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fc fe49 	bl	80018f8 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d902      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	74fb      	strb	r3, [r7, #19]
        break;
 8004c74:	e005      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c76:	4b31      	ldr	r3, [pc, #196]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ef      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d15b      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c88:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01f      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d019      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ca6:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cb2:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc2:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cd2:	4a19      	ldr	r2, [pc, #100]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d016      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fc fe08 	bl	80018f8 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cea:	e00b      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cec:	f7fc fe04 	bl	80018f8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d902      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	74fb      	strb	r3, [r7, #19]
            break;
 8004d02:	e006      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0ec      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10c      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d28:	4903      	ldr	r1, [pc, #12]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d30:	e008      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	74bb      	strb	r3, [r7, #18]
 8004d36:	e005      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d44:	7c7b      	ldrb	r3, [r7, #17]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d105      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4a:	4ba0      	ldr	r3, [pc, #640]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	4a9f      	ldr	r2, [pc, #636]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d62:	4b9a      	ldr	r3, [pc, #616]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f023 0203 	bic.w	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	4996      	ldr	r1, [pc, #600]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d84:	4b91      	ldr	r3, [pc, #580]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f023 020c 	bic.w	r2, r3, #12
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	498e      	ldr	r1, [pc, #568]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004da6:	4b89      	ldr	r3, [pc, #548]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	4985      	ldr	r1, [pc, #532]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dc8:	4b80      	ldr	r3, [pc, #512]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	497d      	ldr	r1, [pc, #500]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dea:	4b78      	ldr	r3, [pc, #480]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df8:	4974      	ldr	r1, [pc, #464]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1a:	496c      	ldr	r1, [pc, #432]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e2e:	4b67      	ldr	r3, [pc, #412]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e3c:	4963      	ldr	r1, [pc, #396]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e50:	4b5e      	ldr	r3, [pc, #376]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e5e:	495b      	ldr	r1, [pc, #364]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e72:	4b56      	ldr	r3, [pc, #344]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	4952      	ldr	r1, [pc, #328]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e94:	4b4d      	ldr	r3, [pc, #308]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	494a      	ldr	r1, [pc, #296]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eb6:	4b45      	ldr	r3, [pc, #276]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	4941      	ldr	r1, [pc, #260]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ed8:	4b3c      	ldr	r3, [pc, #240]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ede:	f023 0203 	bic.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee6:	4939      	ldr	r1, [pc, #228]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d028      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004efa:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f08:	4930      	ldr	r1, [pc, #192]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f18:	d106      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f1a:	4b2c      	ldr	r3, [pc, #176]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f24:	60d3      	str	r3, [r2, #12]
 8004f26:	e011      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2101      	movs	r1, #1
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f8f9 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d04d      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d108      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f68:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f72:	e012      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f74:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f7a:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f80:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f92:	490e      	ldr	r1, [pc, #56]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa4:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a08      	ldr	r2, [pc, #32]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fae:	60d3      	str	r3, [r2, #12]
 8004fb0:	e020      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fbc:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a02      	ldr	r2, [pc, #8]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc6:	60d3      	str	r3, [r2, #12]
 8004fc8:	e014      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2101      	movs	r1, #1
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 f8a5 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d028      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005000:	4b4a      	ldr	r3, [pc, #296]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800500e:	4947      	ldr	r1, [pc, #284]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501e:	d106      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005020:	4b42      	ldr	r3, [pc, #264]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a41      	ldr	r2, [pc, #260]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800502a:	60d3      	str	r3, [r2, #12]
 800502c:	e011      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005036:	d10c      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	2101      	movs	r1, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f876 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005048:	7cfb      	ldrb	r3, [r7, #19]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01e      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005064:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506e:	492f      	ldr	r1, [pc, #188]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005080:	d10c      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	2102      	movs	r1, #2
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f851 	bl	8005130 <RCCEx_PLLSAI1_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005092:	7cfb      	ldrb	r3, [r7, #19]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050a8:	4b20      	ldr	r3, [pc, #128]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ae:	f023 0204 	bic.w	r2, r3, #4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b8:	491c      	ldr	r1, [pc, #112]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050cc:	4b17      	ldr	r3, [pc, #92]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050d2:	f023 0218 	bic.w	r2, r3, #24
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	4913      	ldr	r1, [pc, #76]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80050f0:	4b0e      	ldr	r3, [pc, #56]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005100:	490a      	ldr	r1, [pc, #40]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800510e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005112:	d105      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4a04      	ldr	r2, [pc, #16]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800511e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005120:	7cbb      	ldrb	r3, [r7, #18]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000

08005130 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800513e:	4b72      	ldr	r3, [pc, #456]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00e      	beq.n	8005168 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800514a:	4b6f      	ldr	r3, [pc, #444]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0203 	and.w	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d103      	bne.n	8005162 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
       ||
 800515e:	2b00      	cmp	r3, #0
 8005160:	d142      	bne.n	80051e8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
 8005166:	e03f      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b03      	cmp	r3, #3
 800516e:	d018      	beq.n	80051a2 <RCCEx_PLLSAI1_Config+0x72>
 8005170:	2b03      	cmp	r3, #3
 8005172:	d825      	bhi.n	80051c0 <RCCEx_PLLSAI1_Config+0x90>
 8005174:	2b01      	cmp	r3, #1
 8005176:	d002      	beq.n	800517e <RCCEx_PLLSAI1_Config+0x4e>
 8005178:	2b02      	cmp	r3, #2
 800517a:	d009      	beq.n	8005190 <RCCEx_PLLSAI1_Config+0x60>
 800517c:	e020      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800517e:	4b62      	ldr	r3, [pc, #392]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d11d      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800518e:	e01a      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005190:	4b5d      	ldr	r3, [pc, #372]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005198:	2b00      	cmp	r3, #0
 800519a:	d116      	bne.n	80051ca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a0:	e013      	b.n	80051ca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051a2:	4b59      	ldr	r3, [pc, #356]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051ae:	4b56      	ldr	r3, [pc, #344]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051be:	e006      	b.n	80051ce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
      break;
 80051c4:	e004      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051c6:	bf00      	nop
 80051c8:	e002      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051ca:	bf00      	nop
 80051cc:	e000      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d108      	bne.n	80051e8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80051d6:	4b4c      	ldr	r3, [pc, #304]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f023 0203 	bic.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4949      	ldr	r1, [pc, #292]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 8086 	bne.w	80052fc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051f0:	4b45      	ldr	r3, [pc, #276]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a44      	ldr	r2, [pc, #272]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fc:	f7fc fb7c 	bl	80018f8 <HAL_GetTick>
 8005200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005202:	e009      	b.n	8005218 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005204:	f7fc fb78 	bl	80018f8 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d902      	bls.n	8005218 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	73fb      	strb	r3, [r7, #15]
        break;
 8005216:	e005      	b.n	8005224 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005218:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1ef      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d168      	bne.n	80052fc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d113      	bne.n	8005258 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005230:	4b35      	ldr	r3, [pc, #212]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	4b35      	ldr	r3, [pc, #212]	; (800530c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005236:	4013      	ands	r3, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6892      	ldr	r2, [r2, #8]
 800523c:	0211      	lsls	r1, r2, #8
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68d2      	ldr	r2, [r2, #12]
 8005242:	06d2      	lsls	r2, r2, #27
 8005244:	4311      	orrs	r1, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6852      	ldr	r2, [r2, #4]
 800524a:	3a01      	subs	r2, #1
 800524c:	0112      	lsls	r2, r2, #4
 800524e:	430a      	orrs	r2, r1
 8005250:	492d      	ldr	r1, [pc, #180]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005252:	4313      	orrs	r3, r2
 8005254:	610b      	str	r3, [r1, #16]
 8005256:	e02d      	b.n	80052b4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d115      	bne.n	800528a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800525e:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005264:	4013      	ands	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6892      	ldr	r2, [r2, #8]
 800526a:	0211      	lsls	r1, r2, #8
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6912      	ldr	r2, [r2, #16]
 8005270:	0852      	lsrs	r2, r2, #1
 8005272:	3a01      	subs	r2, #1
 8005274:	0552      	lsls	r2, r2, #21
 8005276:	4311      	orrs	r1, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6852      	ldr	r2, [r2, #4]
 800527c:	3a01      	subs	r2, #1
 800527e:	0112      	lsls	r2, r2, #4
 8005280:	430a      	orrs	r2, r1
 8005282:	4921      	ldr	r1, [pc, #132]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005284:	4313      	orrs	r3, r2
 8005286:	610b      	str	r3, [r1, #16]
 8005288:	e014      	b.n	80052b4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800528a:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	4b21      	ldr	r3, [pc, #132]	; (8005314 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6892      	ldr	r2, [r2, #8]
 8005296:	0211      	lsls	r1, r2, #8
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6952      	ldr	r2, [r2, #20]
 800529c:	0852      	lsrs	r2, r2, #1
 800529e:	3a01      	subs	r2, #1
 80052a0:	0652      	lsls	r2, r2, #25
 80052a2:	4311      	orrs	r1, r2
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6852      	ldr	r2, [r2, #4]
 80052a8:	3a01      	subs	r2, #1
 80052aa:	0112      	lsls	r2, r2, #4
 80052ac:	430a      	orrs	r2, r1
 80052ae:	4916      	ldr	r1, [pc, #88]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052b4:	4b14      	ldr	r3, [pc, #80]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a13      	ldr	r2, [pc, #76]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fc fb1a 	bl	80018f8 <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052c6:	e009      	b.n	80052dc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052c8:	f7fc fb16 	bl	80018f8 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d902      	bls.n	80052dc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	73fb      	strb	r3, [r7, #15]
          break;
 80052da:	e005      	b.n	80052e8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ef      	beq.n	80052c8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	4904      	ldr	r1, [pc, #16]	; (8005308 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40021000 	.word	0x40021000
 800530c:	07ff800f 	.word	0x07ff800f
 8005310:	ff9f800f 	.word	0xff9f800f
 8005314:	f9ff800f 	.word	0xf9ff800f

08005318 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005326:	4b72      	ldr	r3, [pc, #456]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00e      	beq.n	8005350 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005332:	4b6f      	ldr	r3, [pc, #444]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0203 	and.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d103      	bne.n	800534a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
       ||
 8005346:	2b00      	cmp	r3, #0
 8005348:	d142      	bne.n	80053d0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
 800534e:	e03f      	b.n	80053d0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d018      	beq.n	800538a <RCCEx_PLLSAI2_Config+0x72>
 8005358:	2b03      	cmp	r3, #3
 800535a:	d825      	bhi.n	80053a8 <RCCEx_PLLSAI2_Config+0x90>
 800535c:	2b01      	cmp	r3, #1
 800535e:	d002      	beq.n	8005366 <RCCEx_PLLSAI2_Config+0x4e>
 8005360:	2b02      	cmp	r3, #2
 8005362:	d009      	beq.n	8005378 <RCCEx_PLLSAI2_Config+0x60>
 8005364:	e020      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005366:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11d      	bne.n	80053ae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005376:	e01a      	b.n	80053ae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005378:	4b5d      	ldr	r3, [pc, #372]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d116      	bne.n	80053b2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005388:	e013      	b.n	80053b2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800538a:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005396:	4b56      	ldr	r3, [pc, #344]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053a6:	e006      	b.n	80053b6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      break;
 80053ac:	e004      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053ae:	bf00      	nop
 80053b0:	e002      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80053be:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f023 0203 	bic.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4949      	ldr	r1, [pc, #292]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f040 8086 	bne.w	80054e4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053d8:	4b45      	ldr	r3, [pc, #276]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a44      	ldr	r2, [pc, #272]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e4:	f7fc fa88 	bl	80018f8 <HAL_GetTick>
 80053e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053ea:	e009      	b.n	8005400 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053ec:	f7fc fa84 	bl	80018f8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d902      	bls.n	8005400 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	73fb      	strb	r3, [r7, #15]
        break;
 80053fe:	e005      	b.n	800540c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005400:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ef      	bne.n	80053ec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d168      	bne.n	80054e4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d113      	bne.n	8005440 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005418:	4b35      	ldr	r3, [pc, #212]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	4b35      	ldr	r3, [pc, #212]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800541e:	4013      	ands	r3, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6892      	ldr	r2, [r2, #8]
 8005424:	0211      	lsls	r1, r2, #8
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68d2      	ldr	r2, [r2, #12]
 800542a:	06d2      	lsls	r2, r2, #27
 800542c:	4311      	orrs	r1, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6852      	ldr	r2, [r2, #4]
 8005432:	3a01      	subs	r2, #1
 8005434:	0112      	lsls	r2, r2, #4
 8005436:	430a      	orrs	r2, r1
 8005438:	492d      	ldr	r1, [pc, #180]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800543a:	4313      	orrs	r3, r2
 800543c:	614b      	str	r3, [r1, #20]
 800543e:	e02d      	b.n	800549c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d115      	bne.n	8005472 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005446:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6892      	ldr	r2, [r2, #8]
 8005452:	0211      	lsls	r1, r2, #8
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6912      	ldr	r2, [r2, #16]
 8005458:	0852      	lsrs	r2, r2, #1
 800545a:	3a01      	subs	r2, #1
 800545c:	0552      	lsls	r2, r2, #21
 800545e:	4311      	orrs	r1, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6852      	ldr	r2, [r2, #4]
 8005464:	3a01      	subs	r2, #1
 8005466:	0112      	lsls	r2, r2, #4
 8005468:	430a      	orrs	r2, r1
 800546a:	4921      	ldr	r1, [pc, #132]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800546c:	4313      	orrs	r3, r2
 800546e:	614b      	str	r3, [r1, #20]
 8005470:	e014      	b.n	800549c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005472:	4b1f      	ldr	r3, [pc, #124]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <RCCEx_PLLSAI2_Config+0x1e4>)
 8005478:	4013      	ands	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6892      	ldr	r2, [r2, #8]
 800547e:	0211      	lsls	r1, r2, #8
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6952      	ldr	r2, [r2, #20]
 8005484:	0852      	lsrs	r2, r2, #1
 8005486:	3a01      	subs	r2, #1
 8005488:	0652      	lsls	r2, r2, #25
 800548a:	4311      	orrs	r1, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6852      	ldr	r2, [r2, #4]
 8005490:	3a01      	subs	r2, #1
 8005492:	0112      	lsls	r2, r2, #4
 8005494:	430a      	orrs	r2, r1
 8005496:	4916      	ldr	r1, [pc, #88]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005498:	4313      	orrs	r3, r2
 800549a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800549c:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fc fa26 	bl	80018f8 <HAL_GetTick>
 80054ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054ae:	e009      	b.n	80054c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054b0:	f7fc fa22 	bl	80018f8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d902      	bls.n	80054c4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	73fb      	strb	r3, [r7, #15]
          break;
 80054c2:	e005      	b.n	80054d0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0ef      	beq.n	80054b0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054d6:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	4904      	ldr	r1, [pc, #16]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40021000 	.word	0x40021000
 80054f4:	07ff800f 	.word	0x07ff800f
 80054f8:	ff9f800f 	.word	0xff9f800f
 80054fc:	f9ff800f 	.word	0xf9ff800f

08005500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e042      	b.n	8005598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7fb ffa1 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2224      	movs	r2, #36	; 0x24
 800552e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f8c4 	bl	80056d0 <UART_SetConfig>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e022      	b.n	8005598 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fbb4 	bl	8005cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800556e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800557e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fc3b 	bl	8005e0c <UART_CheckIdleState>
 8005596:	4603      	mov	r3, r0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	f040 8084 	bne.w	80056c4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_UART_Transmit+0x28>
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e07c      	b.n	80056c6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UART_Transmit+0x3a>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e075      	b.n	80056c6 <HAL_UART_Transmit+0x126>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2221      	movs	r2, #33	; 0x21
 80055ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055f2:	f7fc f981 	bl	80018f8 <HAL_GetTick>
 80055f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	88fa      	ldrh	r2, [r7, #6]
 80055fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005610:	d108      	bne.n	8005624 <HAL_UART_Transmit+0x84>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e003      	b.n	800562c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005634:	e02d      	b.n	8005692 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2200      	movs	r2, #0
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fc2e 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e03a      	b.n	80056c6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005662:	b292      	uxth	r2, r2
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	3302      	adds	r3, #2
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	e008      	b.n	8005680 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	b292      	uxth	r2, r2
 8005678:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	3301      	adds	r3, #1
 800567e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1cb      	bne.n	8005636 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2140      	movs	r1, #64	; 0x40
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fbfa 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e006      	b.n	80056c6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e000      	b.n	80056c6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80056c4:	2302      	movs	r3, #2
  }
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b08c      	sub	sp, #48	; 0x30
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4baa      	ldr	r3, [pc, #680]	; (80059a8 <UART_SetConfig+0x2d8>)
 8005700:	4013      	ands	r3, r2
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005708:	430b      	orrs	r3, r1
 800570a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a9f      	ldr	r2, [pc, #636]	; (80059ac <UART_SetConfig+0x2dc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005738:	4313      	orrs	r3, r2
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005746:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005750:	430b      	orrs	r3, r1
 8005752:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f023 010f 	bic.w	r1, r3, #15
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a90      	ldr	r2, [pc, #576]	; (80059b0 <UART_SetConfig+0x2e0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d125      	bne.n	80057c0 <UART_SetConfig+0xf0>
 8005774:	4b8f      	ldr	r3, [pc, #572]	; (80059b4 <UART_SetConfig+0x2e4>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b03      	cmp	r3, #3
 8005780:	d81a      	bhi.n	80057b8 <UART_SetConfig+0xe8>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <UART_SetConfig+0xb8>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	08005799 	.word	0x08005799
 800578c:	080057a9 	.word	0x080057a9
 8005790:	080057a1 	.word	0x080057a1
 8005794:	080057b1 	.word	0x080057b1
 8005798:	2301      	movs	r3, #1
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e116      	b.n	80059ce <UART_SetConfig+0x2fe>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e112      	b.n	80059ce <UART_SetConfig+0x2fe>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e10e      	b.n	80059ce <UART_SetConfig+0x2fe>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e10a      	b.n	80059ce <UART_SetConfig+0x2fe>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e106      	b.n	80059ce <UART_SetConfig+0x2fe>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a7c      	ldr	r2, [pc, #496]	; (80059b8 <UART_SetConfig+0x2e8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d138      	bne.n	800583c <UART_SetConfig+0x16c>
 80057ca:	4b7a      	ldr	r3, [pc, #488]	; (80059b4 <UART_SetConfig+0x2e4>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f003 030c 	and.w	r3, r3, #12
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d82d      	bhi.n	8005834 <UART_SetConfig+0x164>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0x110>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	08005815 	.word	0x08005815
 80057e4:	08005835 	.word	0x08005835
 80057e8:	08005835 	.word	0x08005835
 80057ec:	08005835 	.word	0x08005835
 80057f0:	08005825 	.word	0x08005825
 80057f4:	08005835 	.word	0x08005835
 80057f8:	08005835 	.word	0x08005835
 80057fc:	08005835 	.word	0x08005835
 8005800:	0800581d 	.word	0x0800581d
 8005804:	08005835 	.word	0x08005835
 8005808:	08005835 	.word	0x08005835
 800580c:	08005835 	.word	0x08005835
 8005810:	0800582d 	.word	0x0800582d
 8005814:	2300      	movs	r3, #0
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581a:	e0d8      	b.n	80059ce <UART_SetConfig+0x2fe>
 800581c:	2302      	movs	r3, #2
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005822:	e0d4      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005824:	2304      	movs	r3, #4
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e0d0      	b.n	80059ce <UART_SetConfig+0x2fe>
 800582c:	2308      	movs	r3, #8
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005832:	e0cc      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005834:	2310      	movs	r3, #16
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583a:	e0c8      	b.n	80059ce <UART_SetConfig+0x2fe>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a5e      	ldr	r2, [pc, #376]	; (80059bc <UART_SetConfig+0x2ec>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d125      	bne.n	8005892 <UART_SetConfig+0x1c2>
 8005846:	4b5b      	ldr	r3, [pc, #364]	; (80059b4 <UART_SetConfig+0x2e4>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d016      	beq.n	8005882 <UART_SetConfig+0x1b2>
 8005854:	2b30      	cmp	r3, #48	; 0x30
 8005856:	d818      	bhi.n	800588a <UART_SetConfig+0x1ba>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d00a      	beq.n	8005872 <UART_SetConfig+0x1a2>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d814      	bhi.n	800588a <UART_SetConfig+0x1ba>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <UART_SetConfig+0x19a>
 8005864:	2b10      	cmp	r3, #16
 8005866:	d008      	beq.n	800587a <UART_SetConfig+0x1aa>
 8005868:	e00f      	b.n	800588a <UART_SetConfig+0x1ba>
 800586a:	2300      	movs	r3, #0
 800586c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005870:	e0ad      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005872:	2302      	movs	r3, #2
 8005874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005878:	e0a9      	b.n	80059ce <UART_SetConfig+0x2fe>
 800587a:	2304      	movs	r3, #4
 800587c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005880:	e0a5      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005882:	2308      	movs	r3, #8
 8005884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005888:	e0a1      	b.n	80059ce <UART_SetConfig+0x2fe>
 800588a:	2310      	movs	r3, #16
 800588c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005890:	e09d      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a4a      	ldr	r2, [pc, #296]	; (80059c0 <UART_SetConfig+0x2f0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d125      	bne.n	80058e8 <UART_SetConfig+0x218>
 800589c:	4b45      	ldr	r3, [pc, #276]	; (80059b4 <UART_SetConfig+0x2e4>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058a6:	2bc0      	cmp	r3, #192	; 0xc0
 80058a8:	d016      	beq.n	80058d8 <UART_SetConfig+0x208>
 80058aa:	2bc0      	cmp	r3, #192	; 0xc0
 80058ac:	d818      	bhi.n	80058e0 <UART_SetConfig+0x210>
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d00a      	beq.n	80058c8 <UART_SetConfig+0x1f8>
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d814      	bhi.n	80058e0 <UART_SetConfig+0x210>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <UART_SetConfig+0x1f0>
 80058ba:	2b40      	cmp	r3, #64	; 0x40
 80058bc:	d008      	beq.n	80058d0 <UART_SetConfig+0x200>
 80058be:	e00f      	b.n	80058e0 <UART_SetConfig+0x210>
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e082      	b.n	80059ce <UART_SetConfig+0x2fe>
 80058c8:	2302      	movs	r3, #2
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e07e      	b.n	80059ce <UART_SetConfig+0x2fe>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e07a      	b.n	80059ce <UART_SetConfig+0x2fe>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e076      	b.n	80059ce <UART_SetConfig+0x2fe>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e6:	e072      	b.n	80059ce <UART_SetConfig+0x2fe>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a35      	ldr	r2, [pc, #212]	; (80059c4 <UART_SetConfig+0x2f4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d12a      	bne.n	8005948 <UART_SetConfig+0x278>
 80058f2:	4b30      	ldr	r3, [pc, #192]	; (80059b4 <UART_SetConfig+0x2e4>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005900:	d01a      	beq.n	8005938 <UART_SetConfig+0x268>
 8005902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005906:	d81b      	bhi.n	8005940 <UART_SetConfig+0x270>
 8005908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590c:	d00c      	beq.n	8005928 <UART_SetConfig+0x258>
 800590e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005912:	d815      	bhi.n	8005940 <UART_SetConfig+0x270>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <UART_SetConfig+0x250>
 8005918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800591c:	d008      	beq.n	8005930 <UART_SetConfig+0x260>
 800591e:	e00f      	b.n	8005940 <UART_SetConfig+0x270>
 8005920:	2300      	movs	r3, #0
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e052      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005928:	2302      	movs	r3, #2
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e04e      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005930:	2304      	movs	r3, #4
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e04a      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005938:	2308      	movs	r3, #8
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593e:	e046      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005940:	2310      	movs	r3, #16
 8005942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005946:	e042      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a17      	ldr	r2, [pc, #92]	; (80059ac <UART_SetConfig+0x2dc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d13a      	bne.n	80059c8 <UART_SetConfig+0x2f8>
 8005952:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <UART_SetConfig+0x2e4>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800595c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005960:	d01a      	beq.n	8005998 <UART_SetConfig+0x2c8>
 8005962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005966:	d81b      	bhi.n	80059a0 <UART_SetConfig+0x2d0>
 8005968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596c:	d00c      	beq.n	8005988 <UART_SetConfig+0x2b8>
 800596e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005972:	d815      	bhi.n	80059a0 <UART_SetConfig+0x2d0>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <UART_SetConfig+0x2b0>
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d008      	beq.n	8005990 <UART_SetConfig+0x2c0>
 800597e:	e00f      	b.n	80059a0 <UART_SetConfig+0x2d0>
 8005980:	2300      	movs	r3, #0
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005986:	e022      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005988:	2302      	movs	r3, #2
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e01e      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005990:	2304      	movs	r3, #4
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e01a      	b.n	80059ce <UART_SetConfig+0x2fe>
 8005998:	2308      	movs	r3, #8
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599e:	e016      	b.n	80059ce <UART_SetConfig+0x2fe>
 80059a0:	2310      	movs	r3, #16
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a6:	e012      	b.n	80059ce <UART_SetConfig+0x2fe>
 80059a8:	cfff69f3 	.word	0xcfff69f3
 80059ac:	40008000 	.word	0x40008000
 80059b0:	40013800 	.word	0x40013800
 80059b4:	40021000 	.word	0x40021000
 80059b8:	40004400 	.word	0x40004400
 80059bc:	40004800 	.word	0x40004800
 80059c0:	40004c00 	.word	0x40004c00
 80059c4:	40005000 	.word	0x40005000
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4aae      	ldr	r2, [pc, #696]	; (8005c8c <UART_SetConfig+0x5bc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	f040 8097 	bne.w	8005b08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d823      	bhi.n	8005a2a <UART_SetConfig+0x35a>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x318>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a2b 	.word	0x08005a2b
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a2b 	.word	0x08005a2b
 80059f8:	08005a1b 	.word	0x08005a1b
 80059fc:	08005a2b 	.word	0x08005a2b
 8005a00:	08005a2b 	.word	0x08005a2b
 8005a04:	08005a2b 	.word	0x08005a2b
 8005a08:	08005a23 	.word	0x08005a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0c:	f7fe ff74 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8005a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a12:	e010      	b.n	8005a36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a14:	4b9e      	ldr	r3, [pc, #632]	; (8005c90 <UART_SetConfig+0x5c0>)
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a18:	e00d      	b.n	8005a36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1a:	f7fe fed5 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8005a1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a20:	e009      	b.n	8005a36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a28:	e005      	b.n	8005a36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8130 	beq.w	8005c9e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	4a94      	ldr	r2, [pc, #592]	; (8005c94 <UART_SetConfig+0x5c4>)
 8005a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d305      	bcc.n	8005a6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d903      	bls.n	8005a76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a74:	e113      	b.n	8005c9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	2200      	movs	r2, #0
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	60fa      	str	r2, [r7, #12]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	4a84      	ldr	r2, [pc, #528]	; (8005c94 <UART_SetConfig+0x5c4>)
 8005a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a98:	f7fa ffb0 	bl	80009fc <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	020b      	lsls	r3, r1, #8
 8005aae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ab2:	0202      	lsls	r2, r0, #8
 8005ab4:	6979      	ldr	r1, [r7, #20]
 8005ab6:	6849      	ldr	r1, [r1, #4]
 8005ab8:	0849      	lsrs	r1, r1, #1
 8005aba:	2000      	movs	r0, #0
 8005abc:	460c      	mov	r4, r1
 8005abe:	4605      	mov	r5, r0
 8005ac0:	eb12 0804 	adds.w	r8, r2, r4
 8005ac4:	eb43 0905 	adc.w	r9, r3, r5
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	469a      	mov	sl, r3
 8005ad0:	4693      	mov	fp, r2
 8005ad2:	4652      	mov	r2, sl
 8005ad4:	465b      	mov	r3, fp
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	4649      	mov	r1, r9
 8005ada:	f7fa ff8f 	bl	80009fc <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aec:	d308      	bcc.n	8005b00 <UART_SetConfig+0x430>
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af4:	d204      	bcs.n	8005b00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	e0ce      	b.n	8005c9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b06:	e0ca      	b.n	8005c9e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b10:	d166      	bne.n	8005be0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d827      	bhi.n	8005b6a <UART_SetConfig+0x49a>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x450>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	08005b6b 	.word	0x08005b6b
 8005b30:	08005b5b 	.word	0x08005b5b
 8005b34:	08005b6b 	.word	0x08005b6b
 8005b38:	08005b6b 	.word	0x08005b6b
 8005b3c:	08005b6b 	.word	0x08005b6b
 8005b40:	08005b63 	.word	0x08005b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b44:	f7fe fed8 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8005b48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b4a:	e014      	b.n	8005b76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b4c:	f7fe feea 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
 8005b50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b52:	e010      	b.n	8005b76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b54:	4b4e      	ldr	r3, [pc, #312]	; (8005c90 <UART_SetConfig+0x5c0>)
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b58:	e00d      	b.n	8005b76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5a:	f7fe fe35 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8005b5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b60:	e009      	b.n	8005b76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b68:	e005      	b.n	8005b76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8090 	beq.w	8005c9e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	4a44      	ldr	r2, [pc, #272]	; (8005c94 <UART_SetConfig+0x5c4>)
 8005b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b90:	005a      	lsls	r2, r3, #1
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	441a      	add	r2, r3
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	2b0f      	cmp	r3, #15
 8005ba8:	d916      	bls.n	8005bd8 <UART_SetConfig+0x508>
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb0:	d212      	bcs.n	8005bd8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f023 030f 	bic.w	r3, r3, #15
 8005bba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	8bfb      	ldrh	r3, [r7, #30]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	8bfa      	ldrh	r2, [r7, #30]
 8005bd4:	60da      	str	r2, [r3, #12]
 8005bd6:	e062      	b.n	8005c9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bde:	e05e      	b.n	8005c9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005be0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d828      	bhi.n	8005c3a <UART_SetConfig+0x56a>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x520>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	08005c3b 	.word	0x08005c3b
 8005c00:	08005c2b 	.word	0x08005c2b
 8005c04:	08005c3b 	.word	0x08005c3b
 8005c08:	08005c3b 	.word	0x08005c3b
 8005c0c:	08005c3b 	.word	0x08005c3b
 8005c10:	08005c33 	.word	0x08005c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fe fe70 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8005c18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c1a:	e014      	b.n	8005c46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7fe fe82 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
 8005c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c22:	e010      	b.n	8005c46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c24:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <UART_SetConfig+0x5c0>)
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c28:	e00d      	b.n	8005c46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7fe fdcd 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8005c2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c30:	e009      	b.n	8005c46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c38:	e005      	b.n	8005c46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c44:	bf00      	nop
    }

    if (pclk != 0U)
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d028      	beq.n	8005c9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	4a10      	ldr	r2, [pc, #64]	; (8005c94 <UART_SetConfig+0x5c4>)
 8005c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c56:	461a      	mov	r2, r3
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	441a      	add	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	2b0f      	cmp	r3, #15
 8005c74:	d910      	bls.n	8005c98 <UART_SetConfig+0x5c8>
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7c:	d20c      	bcs.n	8005c98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	e009      	b.n	8005c9e <UART_SetConfig+0x5ce>
 8005c8a:	bf00      	nop
 8005c8c:	40008000 	.word	0x40008000
 8005c90:	00f42400 	.word	0x00f42400
 8005c94:	08006914 	.word	0x08006914
      }
      else
      {
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005cba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3730      	adds	r7, #48	; 0x30
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01a      	beq.n	8005dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc6:	d10a      	bne.n	8005dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
  }
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e1c:	f7fb fd6c 	bl	80018f8 <HAL_GetTick>
 8005e20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d10e      	bne.n	8005e4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f82f 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e025      	b.n	8005e9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d10e      	bne.n	8005e7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f819 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e00f      	b.n	8005e9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b09c      	sub	sp, #112	; 0x70
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb2:	e0a9      	b.n	8006008 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	f000 80a5 	beq.w	8006008 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fb fd1b 	bl	80018f8 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d140      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ef8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e6      	bne.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f26:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e5      	bne.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e069      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d051      	beq.n	8006008 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f72:	d149      	bne.n	8006008 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fd0:	623a      	str	r2, [r7, #32]
 8005fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e010      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4013      	ands	r3, r2
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	429a      	cmp	r2, r3
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	429a      	cmp	r2, r3
 8006024:	f43f af46 	beq.w	8005eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3770      	adds	r7, #112	; 0x70
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_UARTEx_DisableFifoMode+0x16>
 8006044:	2302      	movs	r3, #2
 8006046:	e027      	b.n	8006098 <HAL_UARTEx_DisableFifoMode+0x66>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2224      	movs	r2, #36	; 0x24
 8006054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006076:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e02d      	b.n	8006118 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f84f 	bl	800619c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006134:	2302      	movs	r3, #2
 8006136:	e02d      	b.n	8006194 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2224      	movs	r2, #36	; 0x24
 8006144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f811 	bl	800619c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d108      	bne.n	80061be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061bc:	e031      	b.n	8006222 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061be:	2308      	movs	r3, #8
 80061c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061c2:	2308      	movs	r3, #8
 80061c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	0e5b      	lsrs	r3, r3, #25
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	0f5b      	lsrs	r3, r3, #29
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	7b3a      	ldrb	r2, [r7, #12]
 80061ea:	4911      	ldr	r1, [pc, #68]	; (8006230 <UARTEx_SetNbDataToProcess+0x94>)
 80061ec:	5c8a      	ldrb	r2, [r1, r2]
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061f2:	7b3a      	ldrb	r2, [r7, #12]
 80061f4:	490f      	ldr	r1, [pc, #60]	; (8006234 <UARTEx_SetNbDataToProcess+0x98>)
 80061f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	7b7a      	ldrb	r2, [r7, #13]
 8006208:	4909      	ldr	r1, [pc, #36]	; (8006230 <UARTEx_SetNbDataToProcess+0x94>)
 800620a:	5c8a      	ldrb	r2, [r1, r2]
 800620c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006210:	7b7a      	ldrb	r2, [r7, #13]
 8006212:	4908      	ldr	r1, [pc, #32]	; (8006234 <UARTEx_SetNbDataToProcess+0x98>)
 8006214:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006216:	fb93 f3f2 	sdiv	r3, r3, r2
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	0800692c 	.word	0x0800692c
 8006234:	08006934 	.word	0x08006934

08006238 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006238:	b084      	sub	sp, #16
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	f107 001c 	add.w	r0, r7, #28
 8006246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fa70 	bl	800673c <USB_CoreReset>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	639a      	str	r2, [r3, #56]	; 0x38
 8006272:	e005      	b.n	8006280 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800628c:	b004      	add	sp, #16
 800628e:	4770      	bx	lr

08006290 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f023 0201 	bic.w	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	460b      	mov	r3, r1
 80062bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d115      	bne.n	8006300 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062e0:	2001      	movs	r0, #1
 80062e2:	f7fb fb15 	bl	8001910 <HAL_Delay>
      ms++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fa17 	bl	8006720 <USB_GetMode>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d01e      	beq.n	8006336 <USB_SetCurrentMode+0x84>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b31      	cmp	r3, #49	; 0x31
 80062fc:	d9f0      	bls.n	80062e0 <USB_SetCurrentMode+0x2e>
 80062fe:	e01a      	b.n	8006336 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d115      	bne.n	8006332 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006312:	2001      	movs	r0, #1
 8006314:	f7fb fafc 	bl	8001910 <HAL_Delay>
      ms++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f9fe 	bl	8006720 <USB_GetMode>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <USB_SetCurrentMode+0x84>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b31      	cmp	r3, #49	; 0x31
 800632e:	d9f0      	bls.n	8006312 <USB_SetCurrentMode+0x60>
 8006330:	e001      	b.n	8006336 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e005      	b.n	8006342 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b32      	cmp	r3, #50	; 0x32
 800633a:	d101      	bne.n	8006340 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800634c:	b084      	sub	sp, #16
 800634e:	b580      	push	{r7, lr}
 8006350:	b086      	sub	sp, #24
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800635a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	e009      	b.n	8006380 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	3340      	adds	r3, #64	; 0x40
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	2200      	movs	r2, #0
 8006378:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	3301      	adds	r3, #1
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b0e      	cmp	r3, #14
 8006384:	d9f2      	bls.n	800636c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d11c      	bne.n	80063c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e005      	b.n	80063d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063d8:	461a      	mov	r2, r3
 80063da:	2300      	movs	r3, #0
 80063dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e4:	4619      	mov	r1, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ec:	461a      	mov	r2, r3
 80063ee:	680b      	ldr	r3, [r1, #0]
 80063f0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063f2:	2103      	movs	r1, #3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f959 	bl	80066ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063fa:	2110      	movs	r1, #16
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f8f1 	bl	80065e4 <USB_FlushTxFifo>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f91d 	bl	800664c <USB_FlushRxFifo>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	461a      	mov	r2, r3
 8006424:	2300      	movs	r3, #0
 8006426:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642e:	461a      	mov	r2, r3
 8006430:	2300      	movs	r3, #0
 8006432:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	461a      	mov	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006440:	2300      	movs	r3, #0
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	e043      	b.n	80064ce <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645c:	d118      	bne.n	8006490 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006470:	461a      	mov	r2, r3
 8006472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e013      	b.n	80064a2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	461a      	mov	r2, r3
 8006488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e008      	b.n	80064a2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	461a      	mov	r2, r3
 800649e:	2300      	movs	r3, #0
 80064a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	461a      	mov	r2, r3
 80064c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3301      	adds	r3, #1
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d3b7      	bcc.n	8006446 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064d6:	2300      	movs	r3, #0
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	e043      	b.n	8006564 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f2:	d118      	bne.n	8006526 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006506:	461a      	mov	r2, r3
 8006508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e013      	b.n	8006538 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	461a      	mov	r2, r3
 800651e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	e008      	b.n	8006538 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006532:	461a      	mov	r2, r3
 8006534:	2300      	movs	r3, #0
 8006536:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	461a      	mov	r2, r3
 8006546:	2300      	movs	r3, #0
 8006548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	461a      	mov	r2, r3
 8006558:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800655c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	3301      	adds	r3, #1
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	429a      	cmp	r2, r3
 800656a:	d3b7      	bcc.n	80064dc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800657a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800657e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800658c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f043 0210 	orr.w	r2, r3, #16
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <USB_DevInit+0x294>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	f043 0208 	orr.w	r2, r3, #8
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d107      	bne.n	80065ce <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c6:	f043 0304 	orr.w	r3, r3, #4
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065da:	b004      	add	sp, #16
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	803c3800 	.word	0x803c3800

080065e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a13      	ldr	r2, [pc, #76]	; (8006648 <USB_FlushTxFifo+0x64>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e01b      	b.n	800663c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	daf2      	bge.n	80065f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	019b      	lsls	r3, r3, #6
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3301      	adds	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a08      	ldr	r2, [pc, #32]	; (8006648 <USB_FlushTxFifo+0x64>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e006      	b.n	800663c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b20      	cmp	r3, #32
 8006638:	d0f0      	beq.n	800661c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	00030d40 	.word	0x00030d40

0800664c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3301      	adds	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a11      	ldr	r2, [pc, #68]	; (80066a8 <USB_FlushRxFifo+0x5c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e018      	b.n	800669c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	daf2      	bge.n	8006658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2210      	movs	r2, #16
 800667a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <USB_FlushRxFifo+0x5c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e006      	b.n	800669c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b10      	cmp	r3, #16
 8006698:	d0f0      	beq.n	800667c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	00030d40 	.word	0x00030d40

080066ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	68f9      	ldr	r1, [r7, #12]
 80066c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066cc:	4313      	orrs	r3, r2
 80066ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066f8:	f023 0303 	bic.w	r3, r3, #3
 80066fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670c:	f043 0302 	orr.w	r3, r3, #2
 8006710:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f003 0301 	and.w	r3, r3, #1
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a13      	ldr	r2, [pc, #76]	; (80067a0 <USB_CoreReset+0x64>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e01b      	b.n	8006792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	daf2      	bge.n	8006748 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f043 0201 	orr.w	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3301      	adds	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <USB_CoreReset+0x64>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d901      	bls.n	8006784 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e006      	b.n	8006792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b01      	cmp	r3, #1
 800678e:	d0f0      	beq.n	8006772 <USB_CoreReset+0x36>

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	00030d40 	.word	0x00030d40

080067a4 <__libc_init_array>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	4d0d      	ldr	r5, [pc, #52]	; (80067dc <__libc_init_array+0x38>)
 80067a8:	4c0d      	ldr	r4, [pc, #52]	; (80067e0 <__libc_init_array+0x3c>)
 80067aa:	1b64      	subs	r4, r4, r5
 80067ac:	10a4      	asrs	r4, r4, #2
 80067ae:	2600      	movs	r6, #0
 80067b0:	42a6      	cmp	r6, r4
 80067b2:	d109      	bne.n	80067c8 <__libc_init_array+0x24>
 80067b4:	4d0b      	ldr	r5, [pc, #44]	; (80067e4 <__libc_init_array+0x40>)
 80067b6:	4c0c      	ldr	r4, [pc, #48]	; (80067e8 <__libc_init_array+0x44>)
 80067b8:	f000 f87c 	bl	80068b4 <_init>
 80067bc:	1b64      	subs	r4, r4, r5
 80067be:	10a4      	asrs	r4, r4, #2
 80067c0:	2600      	movs	r6, #0
 80067c2:	42a6      	cmp	r6, r4
 80067c4:	d105      	bne.n	80067d2 <__libc_init_array+0x2e>
 80067c6:	bd70      	pop	{r4, r5, r6, pc}
 80067c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067cc:	4798      	blx	r3
 80067ce:	3601      	adds	r6, #1
 80067d0:	e7ee      	b.n	80067b0 <__libc_init_array+0xc>
 80067d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d6:	4798      	blx	r3
 80067d8:	3601      	adds	r6, #1
 80067da:	e7f2      	b.n	80067c2 <__libc_init_array+0x1e>
 80067dc:	0800696c 	.word	0x0800696c
 80067e0:	0800696c 	.word	0x0800696c
 80067e4:	0800696c 	.word	0x0800696c
 80067e8:	08006970 	.word	0x08006970

080067ec <__itoa>:
 80067ec:	1e93      	subs	r3, r2, #2
 80067ee:	2b22      	cmp	r3, #34	; 0x22
 80067f0:	b510      	push	{r4, lr}
 80067f2:	460c      	mov	r4, r1
 80067f4:	d904      	bls.n	8006800 <__itoa+0x14>
 80067f6:	2300      	movs	r3, #0
 80067f8:	700b      	strb	r3, [r1, #0]
 80067fa:	461c      	mov	r4, r3
 80067fc:	4620      	mov	r0, r4
 80067fe:	bd10      	pop	{r4, pc}
 8006800:	2a0a      	cmp	r2, #10
 8006802:	d109      	bne.n	8006818 <__itoa+0x2c>
 8006804:	2800      	cmp	r0, #0
 8006806:	da07      	bge.n	8006818 <__itoa+0x2c>
 8006808:	232d      	movs	r3, #45	; 0x2d
 800680a:	700b      	strb	r3, [r1, #0]
 800680c:	4240      	negs	r0, r0
 800680e:	2101      	movs	r1, #1
 8006810:	4421      	add	r1, r4
 8006812:	f000 f80d 	bl	8006830 <__utoa>
 8006816:	e7f1      	b.n	80067fc <__itoa+0x10>
 8006818:	2100      	movs	r1, #0
 800681a:	e7f9      	b.n	8006810 <__itoa+0x24>

0800681c <itoa>:
 800681c:	f7ff bfe6 	b.w	80067ec <__itoa>

08006820 <memset>:
 8006820:	4402      	add	r2, r0
 8006822:	4603      	mov	r3, r0
 8006824:	4293      	cmp	r3, r2
 8006826:	d100      	bne.n	800682a <memset+0xa>
 8006828:	4770      	bx	lr
 800682a:	f803 1b01 	strb.w	r1, [r3], #1
 800682e:	e7f9      	b.n	8006824 <memset+0x4>

08006830 <__utoa>:
 8006830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006832:	4c1f      	ldr	r4, [pc, #124]	; (80068b0 <__utoa+0x80>)
 8006834:	b08b      	sub	sp, #44	; 0x2c
 8006836:	4605      	mov	r5, r0
 8006838:	460b      	mov	r3, r1
 800683a:	466e      	mov	r6, sp
 800683c:	f104 0c20 	add.w	ip, r4, #32
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	6861      	ldr	r1, [r4, #4]
 8006844:	4637      	mov	r7, r6
 8006846:	c703      	stmia	r7!, {r0, r1}
 8006848:	3408      	adds	r4, #8
 800684a:	4564      	cmp	r4, ip
 800684c:	463e      	mov	r6, r7
 800684e:	d1f7      	bne.n	8006840 <__utoa+0x10>
 8006850:	7921      	ldrb	r1, [r4, #4]
 8006852:	7139      	strb	r1, [r7, #4]
 8006854:	1e91      	subs	r1, r2, #2
 8006856:	6820      	ldr	r0, [r4, #0]
 8006858:	6038      	str	r0, [r7, #0]
 800685a:	2922      	cmp	r1, #34	; 0x22
 800685c:	f04f 0100 	mov.w	r1, #0
 8006860:	d904      	bls.n	800686c <__utoa+0x3c>
 8006862:	7019      	strb	r1, [r3, #0]
 8006864:	460b      	mov	r3, r1
 8006866:	4618      	mov	r0, r3
 8006868:	b00b      	add	sp, #44	; 0x2c
 800686a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686c:	1e58      	subs	r0, r3, #1
 800686e:	4684      	mov	ip, r0
 8006870:	fbb5 f7f2 	udiv	r7, r5, r2
 8006874:	fb02 5617 	mls	r6, r2, r7, r5
 8006878:	3628      	adds	r6, #40	; 0x28
 800687a:	446e      	add	r6, sp
 800687c:	460c      	mov	r4, r1
 800687e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006882:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006886:	462e      	mov	r6, r5
 8006888:	42b2      	cmp	r2, r6
 800688a:	f101 0101 	add.w	r1, r1, #1
 800688e:	463d      	mov	r5, r7
 8006890:	d9ee      	bls.n	8006870 <__utoa+0x40>
 8006892:	2200      	movs	r2, #0
 8006894:	545a      	strb	r2, [r3, r1]
 8006896:	1919      	adds	r1, r3, r4
 8006898:	1aa5      	subs	r5, r4, r2
 800689a:	42aa      	cmp	r2, r5
 800689c:	dae3      	bge.n	8006866 <__utoa+0x36>
 800689e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80068a2:	780e      	ldrb	r6, [r1, #0]
 80068a4:	7006      	strb	r6, [r0, #0]
 80068a6:	3201      	adds	r2, #1
 80068a8:	f801 5901 	strb.w	r5, [r1], #-1
 80068ac:	e7f4      	b.n	8006898 <__utoa+0x68>
 80068ae:	bf00      	nop
 80068b0:	0800693c 	.word	0x0800693c

080068b4 <_init>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	bf00      	nop
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr

080068c0 <_fini>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	bf00      	nop
 80068c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c6:	bc08      	pop	{r3}
 80068c8:	469e      	mov	lr, r3
 80068ca:	4770      	bx	lr
